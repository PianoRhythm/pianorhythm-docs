[
  {
    "objectID": 1,
    "title": "Self Hosted Rooms",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; import BaseVideo from '@site/src/components/BaseVideo'; :::danger Self hosting rooms is currently not available. ::: General Version: 0.8.46 brought in the first draft of the ability to host your own room. Well, to be more precise, it",
    "url": "/docs\\tutorials\\tut-selfhost-room",
    "type": "docs",
    "tags": [
      "self host",
      "self host rooms",
      "host"
    ],
    "keywords": [
      "self host",
      "self host rooms",
      "host",
      "hosting",
      "host room",
      "self hosting",
      "self-host",
      "self host"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Self Hosted Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 2,
    "title": "Self Hosted Rooms",
    "description": "",
    "content": "'s actually just setting up a P2P network to handle just the midi notes emitted in the room, instead of them going through the main server. This feature is not available for guests so create an account today! This means that any latency bottleneck is now determined only between the peers' network sp",
    "url": "/docs\\tutorials\\tut-selfhost-room",
    "type": "docs",
    "tags": [
      "self host",
      "self host rooms",
      "host"
    ],
    "keywords": [
      "self host",
      "self host rooms",
      "host",
      "hosting",
      "host room",
      "self hosting",
      "self-host",
      "self host"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Self Hosted Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 3,
    "title": "Self Hosted Rooms",
    "description": "",
    "content": "eed. So, if you and another user are physically close, then you should be able to play almost near realtime and do things like duets! :::warning Since NoteQuota is primarily server sided, self hosted rooms do not have any note quota limiting. So that means the Allow Black Midi setting has no affect.",
    "url": "/docs\\tutorials\\tut-selfhost-room",
    "type": "docs",
    "tags": [
      "self host",
      "self host rooms",
      "host"
    ],
    "keywords": [
      "self host",
      "self host rooms",
      "host",
      "hosting",
      "host room",
      "self hosting",
      "self-host",
      "self host"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Self Hosted Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 4,
    "title": "Self Hosted Rooms",
    "description": "",
    "content": " This will change in the future. ::: How do I set it up? You can find by going to New Room -> Advanced -> Self Hosting and toggling on the Enable switch. From there, you should see two dropdowns to select your continent and country. By default, the server will try to estimate your current location w",
    "url": "/docs\\tutorials\\tut-selfhost-room",
    "type": "docs",
    "tags": [
      "self host",
      "self host rooms",
      "host"
    ],
    "keywords": [
      "self host",
      "self host rooms",
      "host",
      "hosting",
      "host room",
      "self hosting",
      "self-host",
      "self host"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Self Hosted Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 5,
    "title": "Self Hosted Rooms",
    "description": "",
    "content": "hen toggled on and set the values for you. To respect privacy, I do not intend to add the ability to say what city that you're in. At the very most, I may add regions like US East. If I update the room to disable self hosting, will it going back to using the server? Yes! You can toggle between the t",
    "url": "/docs\\tutorials\\tut-selfhost-room",
    "type": "docs",
    "tags": [
      "self host",
      "self host rooms",
      "host"
    ],
    "keywords": [
      "self host",
      "self host rooms",
      "host",
      "hosting",
      "host room",
      "self hosting",
      "self-host",
      "self host"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Self Hosted Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 6,
    "title": "Self Hosted Rooms",
    "description": "",
    "content": "wo kinds of networking. Is there a plan to make rooms fully P2P? It's possible. I would have to look the architecture to see what makes sense. The main types of data that are emitted in rooms are the chat and midi messages. I see a ping element over the users in the sidebar? In general, ping refers ",
    "url": "/docs\\tutorials\\tut-selfhost-room",
    "type": "docs",
    "tags": [
      "self host",
      "self host rooms",
      "host"
    ],
    "keywords": [
      "self host",
      "self host rooms",
      "host",
      "hosting",
      "host room",
      "self hosting",
      "self-host",
      "self host"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Self Hosted Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 7,
    "title": "Self Hosted Rooms",
    "description": "",
    "content": "to the time taken for data to travel from your computer to a server (or in this case, another player's computer) and then back to your computer. The measurement (in milliseconds) is known as latency or lag. So, the higher the number, the longer it takes for data to be exchanged between two users. Th",
    "url": "/docs\\tutorials\\tut-selfhost-room",
    "type": "docs",
    "tags": [
      "self host",
      "self host rooms",
      "host"
    ],
    "keywords": [
      "self host",
      "self host rooms",
      "host",
      "hosting",
      "host room",
      "self hosting",
      "self-host",
      "self host"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Self Hosted Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 8,
    "title": "Self Hosted Rooms",
    "description": "",
    "content": "us, a higher ping (which is usually determined by your ISP's network speed and physical location relative to another user) would make it harder to do any kind of realtime collaborative playing. :::note If you a see a ping of -1, then something may have gone wrong when trying to connect to that user.",
    "url": "/docs\\tutorials\\tut-selfhost-room",
    "type": "docs",
    "tags": [
      "self host",
      "self host rooms",
      "host"
    ],
    "keywords": [
      "self host",
      "self host rooms",
      "host",
      "hosting",
      "host room",
      "self hosting",
      "self-host",
      "self host"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Self Hosted Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 9,
    "title": "Self Hosted Rooms",
    "description": "",
    "content": " Neither you or they will be able to hear each other's notes. ::: What about latency/bandwidth? Excerpt from peerjs.com: Data sent between the two peers do not touch any other servers, so the connection speed is limited only by the upload and download rates of the two peers. This also means you don'",
    "url": "/docs\\tutorials\\tut-selfhost-room",
    "type": "docs",
    "tags": [
      "self host",
      "self host rooms",
      "host"
    ],
    "keywords": [
      "self host",
      "self host rooms",
      "host",
      "hosting",
      "host room",
      "self hosting",
      "self-host",
      "self host"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Self Hosted Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 10,
    "title": "Self Hosted Rooms",
    "description": "",
    "content": "t have the additional latency of an intermediary server.The latency to establish a connection can be split into two components: the brokering of data and the identification of clients. PeerJS has been designed to minimize the time you spend in these two areas. For brokering, data is sent through an ",
    "url": "/docs\\tutorials\\tut-selfhost-room",
    "type": "docs",
    "tags": [
      "self host",
      "self host rooms",
      "host"
    ],
    "keywords": [
      "self host",
      "self host rooms",
      "host",
      "hosting",
      "host room",
      "self hosting",
      "self-host",
      "self host"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Self Hosted Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 11,
    "title": "Self Hosted Rooms",
    "description": "",
    "content": "XHR streaming request before a WebSocket connection is established, then through WebSockets.",
    "url": "/docs\\tutorials\\tut-selfhost-room",
    "type": "docs",
    "tags": [
      "self host",
      "self host rooms",
      "host"
    ],
    "keywords": [
      "self host",
      "self host rooms",
      "host",
      "hosting",
      "host room",
      "self hosting",
      "self-host",
      "self host"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Self Hosted Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 12,
    "title": "Loading Soundfonts",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; import BaseImage from '@site/src/components/BaseImage'; First of all, what is a soundfont? Well, according to Wikipedia: SoundFont is a brand name that collectively refers to a file format and associated technology that uses sample-ba",
    "url": "/docs\\tutorials\\tut-load-soundfont",
    "type": "docs",
    "tags": [
      "tutorial",
      "soundfonts"
    ],
    "keywords": [
      "tutorial",
      "soundfonts",
      "soundfonts",
      "load soundfont",
      "custom soundfont",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Loading Soundfonts",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 13,
    "title": "Loading Soundfonts",
    "description": "",
    "content": "sed synthesis to play MIDI files. So it's pretty much a file that contains a bank of various audio files that is used alongside programs that are designed to synthesize different instruments using the soundfont. Overall, a soundfont is a collection of instruments. Here's a technical description of t",
    "url": "/docs\\tutorials\\tut-load-soundfont",
    "type": "docs",
    "tags": [
      "tutorial",
      "soundfonts"
    ],
    "keywords": [
      "tutorial",
      "soundfonts",
      "soundfonts",
      "load soundfont",
      "custom soundfont",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Loading Soundfonts",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 14,
    "title": "Loading Soundfonts",
    "description": "",
    "content": "he soundfont structure: The overall structure of a SoundFont is described above. The Preset (also often referred to as an ”instrument”, a “program”, or a “patch”) is the feature that is visible to the outside. Presets are combined into Banks. Each Bank can hold 128 Presets and these are numbered eit",
    "url": "/docs\\tutorials\\tut-load-soundfont",
    "type": "docs",
    "tags": [
      "tutorial",
      "soundfonts"
    ],
    "keywords": [
      "tutorial",
      "soundfonts",
      "soundfonts",
      "load soundfont",
      "custom soundfont",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Loading Soundfonts",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 15,
    "title": "Loading Soundfonts",
    "description": "",
    "content": "her from 0 to 127 (or 1 to 128 - SynthFont uses the range 0-127). There can be 128 Banks (numbered 1-128 or 0-127). Hence the total number of Presets in a SoundFont file is large enough. Very few SoundFonts have more than a few Banks in use. Usually these are “variation banks”, .i.e there may be a s",
    "url": "/docs\\tutorials\\tut-load-soundfont",
    "type": "docs",
    "tags": [
      "tutorial",
      "soundfonts"
    ],
    "keywords": [
      "tutorial",
      "soundfonts",
      "soundfonts",
      "load soundfont",
      "custom soundfont",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Loading Soundfonts",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 16,
    "title": "Loading Soundfonts",
    "description": "",
    "content": "lightly different Acoustic Piano in Bank 1 Preset 0 (1:0) than in 0:0. Banks 0 to 127 are called the Melodic banks while bank 128 is reserved for Percussion presets. The MIDI standard defines MIDI channel 9 (on the scale 0 to 15) as the Percussion channel and hence all MIDI Programs in this channel ",
    "url": "/docs\\tutorials\\tut-load-soundfont",
    "type": "docs",
    "tags": [
      "tutorial",
      "soundfonts"
    ],
    "keywords": [
      "tutorial",
      "soundfonts",
      "soundfonts",
      "load soundfont",
      "custom soundfont",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Loading Soundfonts",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 17,
    "title": "Loading Soundfonts",
    "description": "",
    "content": "will automatically call for a preset in bank 128. Source: Synthfont.com Loading built-in Soundfonts You can find a list of soundfonts that have been included with PianoRhythm by going to: Settings > Soundfont. From there, you can click on Main Soundfont and you'll see a dropdown list of various soun",
    "url": "/docs\\tutorials\\tut-load-soundfont",
    "type": "docs",
    "tags": [
      "tutorial",
      "soundfonts"
    ],
    "keywords": [
      "tutorial",
      "soundfonts",
      "soundfonts",
      "load soundfont",
      "custom soundfont",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Loading Soundfonts",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 18,
    "title": "Loading Soundfonts",
    "description": "",
    "content": "dfonts that were found on the internet. Loading Custom Soundfonts Not a fan of any of the included soundfonts? Well, you can now load custom soundfonts that are located on your machine. The process is similar to loading an included soundfont except in the settings, just click on the Load Custom Soun",
    "url": "/docs\\tutorials\\tut-load-soundfont",
    "type": "docs",
    "tags": [
      "tutorial",
      "soundfonts"
    ],
    "keywords": [
      "tutorial",
      "soundfonts",
      "soundfonts",
      "load soundfont",
      "custom soundfont",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Loading Soundfonts",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 19,
    "title": "Loading Soundfonts",
    "description": "",
    "content": "dfont button: Where to find Soundfonts? Here a few sites where you can download some soundfonts: https://musical-artifacts.com/artifacts?formats=sf2&tags=soundfont https://cymatics.fm/blogs/production/soundfonts https://sites.google.com/site/soundfonts4u/?pli=1 https://archive.org/download/free-soun",
    "url": "/docs\\tutorials\\tut-load-soundfont",
    "type": "docs",
    "tags": [
      "tutorial",
      "soundfonts"
    ],
    "keywords": [
      "tutorial",
      "soundfonts",
      "soundfonts",
      "load soundfont",
      "custom soundfont",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Loading Soundfonts",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 20,
    "title": "Loading Soundfonts",
    "description": "",
    "content": "dfonts-sf2-2019-04 https://hiphopmakers.com/over-2000-free-soundfonts-free-soundfont-player :::note PianoRhythm's soundfont player is not perfect, so many soundfonts may not load or work at all. ::: How can I create my own? I recommend using a free soundfont editor called Polyphone: (https://www.pol",
    "url": "/docs\\tutorials\\tut-load-soundfont",
    "type": "docs",
    "tags": [
      "tutorial",
      "soundfonts"
    ],
    "keywords": [
      "tutorial",
      "soundfonts",
      "soundfonts",
      "load soundfont",
      "custom soundfont",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Loading Soundfonts",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 21,
    "title": "Loading Soundfonts",
    "description": "",
    "content": "yphone-soundfonts.com/)",
    "url": "/docs\\tutorials\\tut-load-soundfont",
    "type": "docs",
    "tags": [
      "tutorial",
      "soundfonts"
    ],
    "keywords": [
      "tutorial",
      "soundfonts",
      "soundfonts",
      "load soundfont",
      "custom soundfont",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Loading Soundfonts",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 22,
    "title": "Changing Instruments",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; A soundfont is typically comprised of a collection of instruments or technically called presets. By default, PianoRhythm will load the very first instrument available. In a standard General MIDI set, it's typically the grand piano. To",
    "url": "/docs\\tutorials\\tut-instruments",
    "type": "docs",
    "tags": [
      "tutorial",
      "instruments"
    ],
    "keywords": [
      "tutorial",
      "instruments",
      "tutorial",
      "instruments",
      "load instrument",
      "change instrument",
      "instruments list"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Changing Instruments",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 23,
    "title": "Changing Instruments",
    "description": "",
    "content": " show the instruments/presets list, you can do so by pressing F1 (default shortcut) or by clicking Tools > Instrument Selection in the dock: Once you have the list visible, you can use an instrument by simply clicking on the element. By default, it'll load in the first channel (0), in the channel sl",
    "url": "/docs\\tutorials\\tut-instruments",
    "type": "docs",
    "tags": [
      "tutorial",
      "instruments"
    ],
    "keywords": [
      "tutorial",
      "instruments",
      "tutorial",
      "instruments",
      "load instrument",
      "change instrument",
      "instruments list"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Changing Instruments",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 24,
    "title": "Changing Instruments",
    "description": "",
    "content": "ots in the dock. :::tip You can also drag and drop an instrument into a slot. :::",
    "url": "/docs\\tutorials\\tut-instruments",
    "type": "docs",
    "tags": [
      "tutorial",
      "instruments"
    ],
    "keywords": [
      "tutorial",
      "instruments",
      "tutorial",
      "instruments",
      "load instrument",
      "change instrument",
      "instruments list"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Changing Instruments",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 25,
    "title": "Getting Started",
    "description": "",
    "content": "Wondering how to do a certain task or thing in PianoRhythm? Look no further! This sections contains a list of general tutorials on how to use PianoRhythm. If you have a tutorial that you would like to submit, feel free to contact me!",
    "url": "/docs\\tutorials\\index",
    "type": "docs",
    "tags": [],
    "keywords": [],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Getting Started",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 26,
    "title": "Sound/Audio",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; TroubleShooting (Sound/Audio) General The first step I would suggest, is to check if your audio device is actually muted. Either externally or through your operating system. If that's okay, then check if the volume within PianoRhythm ",
    "url": "/docs\\troubleshoot\\troubleshoot-audio",
    "type": "docs",
    "tags": [
      "sound",
      "audio",
      "piano",
      "troubleshoot"
    ],
    "keywords": [
      "sound",
      "audio",
      "piano",
      "troubleshoot",
      "troubleshoot",
      "troubleshoot audio",
      "troubleshoot sound"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sound/Audio",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 27,
    "title": "Sound/Audio",
    "description": "",
    "content": "is low or muted: If you still don't hear anything, then check if your soundfont loaded properly. If it was, then you should see a list of instruments (shortcut: F1) and there should be at least be one instrument active in the dock channels: Also double check if the Enable audio to output only settin",
    "url": "/docs\\troubleshoot\\troubleshoot-audio",
    "type": "docs",
    "tags": [
      "sound",
      "audio",
      "piano",
      "troubleshoot"
    ],
    "keywords": [
      "sound",
      "audio",
      "piano",
      "troubleshoot",
      "troubleshoot",
      "troubleshoot audio",
      "troubleshoot sound"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sound/Audio",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 28,
    "title": "Sound/Audio",
    "description": "",
    "content": "g is enabled, if that is not your intention. Error logs Lastly, check the devtools for any console log errors. You can do by pressing F12 or ctrl + shift + I. Click on the Console tab and see if any relevant errors show up. If so, feel to make a report in Discord or here :::info A channel is indicat",
    "url": "/docs\\troubleshoot\\troubleshoot-audio",
    "type": "docs",
    "tags": [
      "sound",
      "audio",
      "piano",
      "troubleshoot"
    ],
    "keywords": [
      "sound",
      "audio",
      "piano",
      "troubleshoot",
      "troubleshoot",
      "troubleshoot audio",
      "troubleshoot sound"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sound/Audio",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 29,
    "title": "Sound/Audio",
    "description": "",
    "content": "ed as a primary active channel when it has a white border around the icon. ::: It's also possible that there may be an issue with your soundfont and/or instrument. Double check with another software that has soundfont support. I recommend using a free soundfont editor called Polyphone: (https://www.",
    "url": "/docs\\troubleshoot\\troubleshoot-audio",
    "type": "docs",
    "tags": [
      "sound",
      "audio",
      "piano",
      "troubleshoot"
    ],
    "keywords": [
      "sound",
      "audio",
      "piano",
      "troubleshoot",
      "troubleshoot",
      "troubleshoot audio",
      "troubleshoot sound"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sound/Audio",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 30,
    "title": "Sound/Audio",
    "description": "",
    "content": "polyphone-soundfonts.com/) Web If you're using the browser version, double check if your tab is muted. For example in Chrome, right click on the tab and then click on Unmute site to unmute it: Desktop If you're using the desktop version, first check if PianoRhythm is using the correct targeted audio",
    "url": "/docs\\troubleshoot\\troubleshoot-audio",
    "type": "docs",
    "tags": [
      "sound",
      "audio",
      "piano",
      "troubleshoot"
    ],
    "keywords": [
      "sound",
      "audio",
      "piano",
      "troubleshoot",
      "troubleshoot",
      "troubleshoot audio",
      "troubleshoot sound"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sound/Audio",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 31,
    "title": "Sound/Audio",
    "description": "",
    "content": " device: And with that said, also check the target sample rate. If you choose a sample rate that is not supported by your audio device then the audio engine will fail. Overall, just leave it as AUTO or just make that the sample rate matches what your audio device is currently set to in your operatin",
    "url": "/docs\\troubleshoot\\troubleshoot-audio",
    "type": "docs",
    "tags": [
      "sound",
      "audio",
      "piano",
      "troubleshoot"
    ],
    "keywords": [
      "sound",
      "audio",
      "piano",
      "troubleshoot",
      "troubleshoot",
      "troubleshoot audio",
      "troubleshoot sound"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sound/Audio",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 32,
    "title": "Sound/Audio",
    "description": "",
    "content": "g system. Also, apparently certain types of audio devices like certain kinds of headphones seem to have issues. If that's the case, try using something else to see if the issue still persists.",
    "url": "/docs\\troubleshoot\\troubleshoot-audio",
    "type": "docs",
    "tags": [
      "sound",
      "audio",
      "piano",
      "troubleshoot"
    ],
    "keywords": [
      "sound",
      "audio",
      "piano",
      "troubleshoot",
      "troubleshoot",
      "troubleshoot audio",
      "troubleshoot sound"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sound/Audio",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 33,
    "title": "Rooms",
    "description": "",
    "content": "What are Rooms in PianoRhythm? Rooms in PianoRhythm are virtual spaces where users can gather to play and enjoy music together. Each room can host multiple participants, allowing them to collaborate and create music in real-time. Key Features of Rooms Collaboration: Users can join rooms to play musi",
    "url": "/docs\\guides\\rooms-index",
    "type": "docs",
    "tags": [
      "rooms",
      "guide"
    ],
    "keywords": [
      "rooms",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 34,
    "title": "Rooms",
    "description": "",
    "content": "c together, share ideas, and learn from each other. Customization: Room owners can customize the settings of their rooms, including privacy options and participant permissions. How to Create a Room Log in: Ensure you are logged into your PianoRhythm account. Create Room: Click on the 'New Room' butt",
    "url": "/docs\\guides\\rooms-index",
    "type": "docs",
    "tags": [
      "rooms",
      "guide"
    ],
    "keywords": [
      "rooms",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 35,
    "title": "Rooms",
    "description": "",
    "content": "on on the bottom bar, and fill in the required details such as room name, description, and settings. Invite Participants: Share the room link with friends or make it public for anyone to join. Joining a Room Browse Rooms: Explore the list of available rooms in the 'Rooms' section inside the left sid",
    "url": "/docs\\guides\\rooms-index",
    "type": "docs",
    "tags": [
      "rooms",
      "guide"
    ],
    "keywords": [
      "rooms",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 36,
    "title": "Rooms",
    "description": "",
    "content": "ebar. Join Room: Click on the room you want to join and start collaborating with other musicians. Room Etiquette Respect: Be respectful to all participants and their contributions. Collaboration: Encourage and support each other to create a positive and productive environment. Feedback: Provide cons",
    "url": "/docs\\guides\\rooms-index",
    "type": "docs",
    "tags": [
      "rooms",
      "guide"
    ],
    "keywords": [
      "rooms",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 37,
    "title": "Rooms",
    "description": "",
    "content": "tructive feedback to help others improve their skills. Rooms in PianoRhythm are designed to foster a collaborative and enjoyable music-making experience. Whether you're a beginner or a seasoned musician, there's always something new to learn and share in a PianoRhythm room.",
    "url": "/docs\\guides\\rooms-index",
    "type": "docs",
    "tags": [
      "rooms",
      "guide"
    ],
    "keywords": [
      "rooms",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 38,
    "title": "Untitled",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; General These are just common guides about the different features of PianoRhythm. Below, you can find some common terminologies within PianoRhythm: | Term | Description | | :----- | :----- | | Oak | The creator and sole developer of P",
    "url": "/docs\\guides\\index",
    "type": "docs",
    "tags": [],
    "keywords": [
      "general terms",
      "terminologies"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 39,
    "title": "Untitled",
    "description": "",
    "content": "ianoRhythm. | | PianoRhythm | PianoRhythm is a multiplayer social web app to play music and casual games with people all over the world! | | Soundfont | In simplified terms, a soundfont is a file that can contain multiple different kinds of instruments used for audio synthesizers. | | Instrument Doc",
    "url": "/docs\\guides\\index",
    "type": "docs",
    "tags": [],
    "keywords": [
      "general terms",
      "terminologies"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 40,
    "title": "Untitled",
    "description": "",
    "content": "k | The instrument dock is one of the UI components for managing the different midi channels. You can manage the different instruments, change the transpose or octave, set the slot mode, and more! You can find out more here. | | Slot Mode | The slot modes are different midi channel modes that the au",
    "url": "/docs\\guides\\index",
    "type": "docs",
    "tags": [],
    "keywords": [
      "general terms",
      "terminologies"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 41,
    "title": "Untitled",
    "description": "",
    "content": "dio engine can interpret. The default mode is All. You can find out more here. | FAQ How do I report a bug? The easiest way to report a bug is to join the PianoRhythm Discord server and report it in the #bug-reports channel. How do I suggest a feature? You can suggest a feature by joining the PianoR",
    "url": "/docs\\guides\\index",
    "type": "docs",
    "tags": [],
    "keywords": [
      "general terms",
      "terminologies"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 42,
    "title": "Untitled",
    "description": "",
    "content": "hythm Discord server and suggesting it in the #feedback channel. How do I contact the developer? You can contact the developer by joining the PianoRhythm Discord server and messaging oak_9806. You can also contact the developer by sending an email to oak@pianorhythm.io. How to change to 2D mode? You",
    "url": "/docs\\guides\\index",
    "type": "docs",
    "tags": [],
    "keywords": [
      "general terms",
      "terminologies"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 43,
    "title": "Untitled",
    "description": "",
    "content": " can change to 2D mode by clicking on the Camera Mode button in action widgets section, at the top right. You'll then see a 2D piano view on the canvas. My screen is black, what do I do? If your screen is black, it's likely that you have a WebGPU issue. You can try the following: Go to Settings -> G",
    "url": "/docs\\guides\\index",
    "type": "docs",
    "tags": [],
    "keywords": [
      "general terms",
      "terminologies"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 44,
    "title": "Untitled",
    "description": "",
    "content": "raphics -> Use WebGPU and disable it. Refresh the page. You can also try disable using the offscreen canvas by going to Settings -> Graphics -> Enable Offscreen Canvas. This will force the canvas to be rendered on the main thread. My FPS is low, what do I do? If your FPS is low, it's likely that you",
    "url": "/docs\\guides\\index",
    "type": "docs",
    "tags": [],
    "keywords": [
      "general terms",
      "terminologies"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 45,
    "title": "Untitled",
    "description": "",
    "content": " have a performance issue. You can try the following: Go to Settings -> Graphics (General) and change the Graphics Preset to Medium or Low. Go to Settings -> Graphics (General) and disable certain features like Lights, Particle System, Shadows, etc. Go to Settings -> Graphics (Advanced) and use low ",
    "url": "/docs\\guides\\index",
    "type": "docs",
    "tags": [],
    "keywords": [
      "general terms",
      "terminologies"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 46,
    "title": "Untitled",
    "description": "",
    "content": "poly models by enabling Use Low Poly Models. Switch to 2D mode. Find more information here. How do I connect my MIDI device? You can connect your MIDI device by pressing the MIDI button on the bottom bar to open the Midi modal, and selecting your MIDI device. You'll see a list of available MIDI inpu",
    "url": "/docs\\guides\\index",
    "type": "docs",
    "tags": [],
    "keywords": [
      "general terms",
      "terminologies"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 47,
    "title": "Untitled",
    "description": "",
    "content": "t and output devices to connect to. My MIDI device is not working or showing up, what do I do? If your MIDI device is not working or showing up, it's likely that you have a MIDI issue. You can try the following: Refresh the page. Reconnect your MIDI device. Check if your MIDI device is connected pro",
    "url": "/docs\\guides\\index",
    "type": "docs",
    "tags": [],
    "keywords": [
      "general terms",
      "terminologies"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 48,
    "title": "Untitled",
    "description": "",
    "content": "perly. Check if your MIDI device isn't being used by another application. If it is, close that application and try again. How can I change my profile picture? You can change your profile picture by going to Settings -> My Account and clicking on the current profile picture to open the file picker. Y",
    "url": "/docs\\guides\\index",
    "type": "docs",
    "tags": [],
    "keywords": [
      "general terms",
      "terminologies"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 49,
    "title": "Untitled",
    "description": "",
    "content": "ou can then select an image to upload as your profile picture. However, you need to be logged in to change your profile picture. This feature is not available for guests. How do I change my keybinds? You can change your keybinds by going to Settings -> Input -> Piano Keys Layout and clicking on the ",
    "url": "/docs\\guides\\index",
    "type": "docs",
    "tags": [],
    "keywords": [
      "general terms",
      "terminologies"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 50,
    "title": "Untitled",
    "description": "",
    "content": "keybind you want to change. You can choose between VP, MPP (Multiplayer Piano), or Custom keybinds. How do I change my nickname? In the chat bar, type /nickname to change your nickname. For example, /nickname PianoRhythmFan. To clear it, type /nickname or /clear_nickname. You can find more informati",
    "url": "/docs\\guides\\index",
    "type": "docs",
    "tags": [],
    "keywords": [
      "general terms",
      "terminologies"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 51,
    "title": "Untitled",
    "description": "",
    "content": "on about chat commands here.",
    "url": "/docs\\guides\\index",
    "type": "docs",
    "tags": [],
    "keywords": [
      "general terms",
      "terminologies"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 52,
    "title": "PRO Subscription",
    "description": "",
    "content": "import BaseImage from '@site/src/components/BaseImage'; import Pricing from '@site/src/components/Pricing'; General PianoRhythm's PRO subscription is a paid service to give users unique perks and exclusive access to certain features. Ideally, as much as I would like to make this a completely free pl",
    "url": "/docs\\guides\\subscription\\index",
    "type": "docs",
    "tags": [
      "pro subscription",
      "pro",
      "guide"
    ],
    "keywords": [
      "pro subscription",
      "pro",
      "guide",
      "subscription",
      "pro",
      "pro subscription"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "PRO Subscription",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 53,
    "title": "PRO Subscription",
    "description": "",
    "content": "atform, there are some costs associated with developing and maintaining PianoRhythm. Don't worry, I don't plan on making this about the money cause once that happens, then all of the passion would get sucked out. This is really just a way to at least break even when it comes to covering the infrastr",
    "url": "/docs\\guides\\subscription\\index",
    "type": "docs",
    "tags": [
      "pro subscription",
      "pro",
      "guide"
    ],
    "keywords": [
      "pro subscription",
      "pro",
      "guide",
      "subscription",
      "pro",
      "pro subscription"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "PRO Subscription",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 54,
    "title": "PRO Subscription",
    "description": "",
    "content": "ucture costs. So, if you would like to help support PianoRhythm, it would be greatly appreciated! Also, if you have any ideas about features that should be a part of the PRO subscription, then feel free to let me know! You can contact me via Discord(oak_9806) or through this email: system+pro@pianor",
    "url": "/docs\\guides\\subscription\\index",
    "type": "docs",
    "tags": [
      "pro subscription",
      "pro",
      "guide"
    ],
    "keywords": [
      "pro subscription",
      "pro",
      "guide",
      "subscription",
      "pro",
      "pro subscription"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "PRO Subscription",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 55,
    "title": "PRO Subscription",
    "description": "",
    "content": "hythm.io How do I subscribe? You can find it by going to Settings > Subscription and selecting a plan. You can either do monthly or annually (small discount). After selecting a plan, you can click \"Check out with Stripe\" and you'll be directed to a secure 3rd party checkout using Stripe. :::note No ",
    "url": "/docs\\guides\\subscription\\index",
    "type": "docs",
    "tags": [
      "pro subscription",
      "pro",
      "guide"
    ],
    "keywords": [
      "pro subscription",
      "pro",
      "guide",
      "subscription",
      "pro",
      "pro subscription"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "PRO Subscription",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 56,
    "title": "PRO Subscription",
    "description": "",
    "content": "sensitive financial information is stored with PianoRhythm. You can cancel your subscription at any time within Stripe's portal. ::: Comparison Table",
    "url": "/docs\\guides\\subscription\\index",
    "type": "docs",
    "tags": [
      "pro subscription",
      "pro",
      "guide"
    ],
    "keywords": [
      "pro subscription",
      "pro",
      "guide",
      "subscription",
      "pro",
      "pro subscription"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "PRO Subscription",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 57,
    "title": "Sheet Music",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; import styled, { css } from 'styled-components'; import image_5a90b0b3887492ee413d16fc9c0fb0c9 from '@site/static/img/guide/sheet-music/5a90b0b3887492ee413d16fc9c0fb0c9.gif'; import image_d14ec8523e2d6247727dc147e47bf206 from '@site/s",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 58,
    "title": "Sheet Music",
    "description": "",
    "content": "tatic/img/guide/sheet-music/d14ec8523e2d6247727dc147e47bf206.gif'; import image_a9a8508c6f318057bc333fa618babd86 from '@site/static/img/guide/sheet-music/a9a8508c6f318057bc333fa618babd86.png'; import image_bb2f68161bff8b65aa9bc374a5f21efc from '@site/static/img/guide/sheet-music/bb2f68161bff8b65aa9b",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 59,
    "title": "Sheet Music",
    "description": "",
    "content": "c374a5f21efc.png'; import image_f8c15527521aa286d1cf5209f4a37130 from '@site/static/img/guide/sheet-music/f8c15527521aa286d1cf5209f4a37130.png'; import image_c231da7c2aa446217be35e1828122d19 from '@site/static/img/guide/sheet-music/c231da7c2aa446217be35e1828122d19.png'; import image_92048cc3f78a7437",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 60,
    "title": "Sheet Music",
    "description": "",
    "content": "9361f136b7c4c44b from '@site/static/img/guide/sheet-music/92048cc3f78a74379361f136b7c4c44b.png'; import image_ffee70a39b9eed45badb6143d3711930 from '@site/static/img/guide/sheet-music/ffee70a39b9eed45badb6143d3711930.gif'; import image_f02c5c715fead9d2ede80516bd03d929 from '@site/static/img/guide/sh",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 61,
    "title": "Sheet Music",
    "description": "",
    "content": "eet-music/f02c5c715fead9d2ede80516bd03d929.png'; import image_ab271ff29ae2fd41cac43ee3fdbd5aef from '@site/static/img/guide/sheet-music/ab271ff29ae2fd41cac43ee3fdbd5aef.png'; import BaseImage from '@site/src/components/BaseImage'; Introduction This is just a short introduction to the sheet music rep",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 62,
    "title": "Sheet Music",
    "description": "",
    "content": "ository in PianoRhythm. Where do I find it? You can get quick access to it by clicking on the hamburger menu at the bottom left corner. You'll then see the Sheet Music button to display the repository. Sheet Music Details When you find a sheet music that you like, you can click on it to view more de",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 63,
    "title": "Sheet Music",
    "description": "",
    "content": "tails. Alongside the content of the sheet music, in addition, you'll see details such as the upload date, title, original artist, description, tags, last time it was edited, etc. Options As a guest, at the very minimum, you'll have the options to: Copy the content of the sheet music. Open the sheet ",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 64,
    "title": "Sheet Music",
    "description": "",
    "content": "music in PianoRhythm's Sheet Music viewer. (Virtual Piano Only) Download the sheet music as a midi file. If you're signed in as a user, you'll see the additional option to favorite the sheet music. Virtual Piano Player - Controls If the sheet music is of the Virtual Piano category, you'll see additi",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 65,
    "title": "Sheet Music",
    "description": "",
    "content": "onal controls to play the sheet music. You can find out more here: Virtual Piano Player. Categories As a user, you'll be able to upload, search, and favorite all kinds of sheet music.\\ As of now, sheet music can be categorized in one of three different flavors: Music XML MultiplayerPiano VirtualPian",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 66,
    "title": "Sheet Music",
    "description": "",
    "content": "o MusicXML (Currently Not Available) What's MusicXML, you say? Well, it's the standard open format for exchanging digital sheet music. It allows you to collaborate with musicians using different music applications (such as PianoRhythm). You can find more info at www.musicxml.co. Here's an example (p",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 67,
    "title": "Sheet Music",
    "description": "",
    "content": "lease ignore the title name): MultiplayerPiano Similar to PianoRhythm and actually our rival, MultiplayerPiano (MPP for short) is an online piano website. Sheet music with this category should be reflected with MPP's keyboard layout. VirtualPiano VIRTUAL PIANO IS THE WORLD’S FIRST AND MOST LOVED ONL",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 68,
    "title": "Sheet Music",
    "description": "",
    "content": "INE PIANO KEYBOARD Enough said. Uploading Sheet Music So you think you're daring, adventureous, and brave enough to upload sheet music, yeah? Well, not a problem! You can get quick access to it by clicking on the hamburger menu at the bottom left corner. You'll then see the Sheet Music - Upload butt",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 69,
    "title": "Sheet Music",
    "description": "",
    "content": "on to display the upload modal that contains a form to help you submit your content. Getting Started As of now, there are two ways of uploading sheet music. You can browse and import a local text or MusicXml file, or create a new sheet. Keep in mind, that a creating a new sheet is only valid for Vir",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 70,
    "title": "Sheet Music",
    "description": "",
    "content": "tualPiano and MultiplayerPiano sheets. Technically, the only required inputs are the file you're planning on uploading, and the title. But you should make sure that it's the appropriate category as well. Once that's filled in, you can just press the Submit button at the bottom right of the modal. He",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 71,
    "title": "Sheet Music",
    "description": "",
    "content": "re's an example of creating a new sheet: Inputs Let's go over the different inputs, shall we? Title ` This is a required input. It should be reflective of the piece. ` Original Artist ` This is optional but if you know it, then give credit where credit is due. ` Original Artist's Album ` This is opt",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 72,
    "title": "Sheet Music",
    "description": "",
    "content": "ional but if you know it, then give credit where credit is due. ` Description ` This is optional. In here, you can provide extra information about the score in general. You can describe how hard it was for you to create it, mention where you originally found the source, etc. Please keep it family fr",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 73,
    "title": "Sheet Music",
    "description": "",
    "content": "iendly. ` Tags ` This is optional. If you would like to add certain meta data (like the genre), then this is the place to put it. Each piece can have a max of 3 tags. ` Category ` This will describe the type of sheet music it is. As of now, the only three options are: MusicXML Multiplayer Piano Virt",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 74,
    "title": "Sheet Music",
    "description": "",
    "content": "ual Piano ` Privacy Level ` This will set how this sheet music can be accessed. By default, everything is public. Public: Anyone can see it. Private: Only the uploader and certain elevated roles can see it. Unlisted: Won't show up readily on the public listing. It can be accessed by searching for th",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 75,
    "title": "Sheet Music",
    "description": "",
    "content": "e sheet music's ID. ` Difficulty ` This is to describe how relatively difficult it would be for an average player to learn and play. You can set it to Unknown if you're not sure. ` Approvals Most public sheet music will have to go through an approval process before it can be displayed in the public ",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 76,
    "title": "Sheet Music",
    "description": "",
    "content": "listing. Either a mod or a user with the SheetMusicEditor role will review your upload. If it's deemed worthy, then it will be approved and you'll get an email of the change. Here's what it may look like: Mods/Sheet Music Editors If you have the power to review sheet music, this section is for you. ",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 77,
    "title": "Sheet Music",
    "description": "",
    "content": "In order to start approving/disapproving sheet music, you can filter for all the sheet music that needs approval by clicking the Need Approval checkbox in the repo. Depending on the sheet's status, you can approve/disapprove by either: Right clicking on the element to show the context menu Clicking ",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 78,
    "title": "Sheet Music",
    "description": "",
    "content": "the element for a detailed view, and pressing the thumbs up/down Disapprovals By default, your sheet music will be in a disapproval state. If your sheet music gets approved, then you'll be notified via email. Once that happens, your sheet music can be made visible to other users in the community. Ho",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 79,
    "title": "Sheet Music",
    "description": "",
    "content": "wever, any major changes made to your sheet music will reset its state and will have to be approved again. This should change in the future once the pipeline of the process has been enhanced.",
    "url": "/docs\\guides\\sheet-music\\index",
    "type": "docs",
    "tags": [
      "sheet music",
      "guide"
    ],
    "keywords": [
      "sheet music",
      "guide",
      "sheet music",
      "submit sheet music",
      "upload sheet music"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Sheet Music",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 80,
    "title": "MIDI Step Sequencer",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; Introduction In the step sequencer, you can create patterns by editing multifunctional steps in the step grid. Each row represents a channel that controls a sound (which can be a drum kit piece or a note on an instrument). Getting Sta",
    "url": "/docs\\guides\\sequencer\\index",
    "type": "docs",
    "tags": [
      "step sequencer",
      "guide"
    ],
    "keywords": [
      "step sequencer",
      "guide",
      "step sequencer",
      "midi sequencer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Step Sequencer",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 81,
    "title": "MIDI Step Sequencer",
    "description": "",
    "content": "rted First, the step sequencer does not use a separate list of audio samples. It uses the instruments that are loaded with your current soundfont. Each channel in the sequencer contains a number of steps, and will emit a sound when a step is active during playback. You can further customize each ste",
    "url": "/docs\\guides\\sequencer\\index",
    "type": "docs",
    "tags": [
      "step sequencer",
      "guide"
    ],
    "keywords": [
      "step sequencer",
      "guide",
      "step sequencer",
      "midi sequencer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Step Sequencer",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 82,
    "title": "MIDI Step Sequencer",
    "description": "",
    "content": "p by setting its note value (default is 60 or C3) and/or its velocity (default: 100). :::caution If you're in drum mode and the loaded soundfont does not have any percussion instruments (standard bank of 120 or 128), then you probably won't hear any sound. ::: Where do I find it? You can either find",
    "url": "/docs\\guides\\sequencer\\index",
    "type": "docs",
    "tags": [
      "step sequencer",
      "guide"
    ],
    "keywords": [
      "step sequencer",
      "guide",
      "step sequencer",
      "midi sequencer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Step Sequencer",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 83,
    "title": "MIDI Step Sequencer",
    "description": "",
    "content": " it by going to the right side widgets of common actions: Or by going to the left of the bottom bar and clicking the hamburger menu: Loading instruments To load an instrument, just click on the left most button in a channel: :::note The list of selectable instruments depends on the current sequencer",
    "url": "/docs\\guides\\sequencer\\index",
    "type": "docs",
    "tags": [
      "step sequencer",
      "guide"
    ],
    "keywords": [
      "step sequencer",
      "guide",
      "step sequencer",
      "midi sequencer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Step Sequencer",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 84,
    "title": "MIDI Step Sequencer",
    "description": "",
    "content": " mode (MIDI or DRUM) that you're in. ::: Warnings Certain scenarios may cause a warning to be displayed in the step sequencer. One example is if you have the drum channel disabled in the settings but you're trying to use the DRUM mode in the sequencer. Warning messages like that are just to bring mo",
    "url": "/docs\\guides\\sequencer\\index",
    "type": "docs",
    "tags": [
      "step sequencer",
      "guide"
    ],
    "keywords": [
      "step sequencer",
      "guide",
      "step sequencer",
      "midi sequencer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Step Sequencer",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 85,
    "title": "MIDI Step Sequencer",
    "description": "",
    "content": "re awareness to the state of the application, so you're not left confused as to why something may not be happening as you're expecting. Import/Export You can also import or export your patterns. When exporting, it'll be saved as a json file that contains the current state of the pattern you have set",
    "url": "/docs\\guides\\sequencer\\index",
    "type": "docs",
    "tags": [
      "step sequencer",
      "guide"
    ],
    "keywords": [
      "step sequencer",
      "guide",
      "step sequencer",
      "midi sequencer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Step Sequencer",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 86,
    "title": "MIDI Step Sequencer",
    "description": "",
    "content": ". :::note There is a versioning system that will be tied to the exported files. In the future, incompatiable or outdated versions may not be able to imported properly. More on that soon. ::: Components Channels, Steps, and BPM Here, you can change the total number of channels available, the number o",
    "url": "/docs\\guides\\sequencer\\index",
    "type": "docs",
    "tags": [
      "step sequencer",
      "guide"
    ],
    "keywords": [
      "step sequencer",
      "guide",
      "step sequencer",
      "midi sequencer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Step Sequencer",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 87,
    "title": "MIDI Step Sequencer",
    "description": "",
    "content": "f steps per channel, and the target BPM for the sequencer: Context menu There are context menu options available for further customization. If you right click on the channel pad or instrument load button then you'll see these options: and if you click on an individual step, then you'll see this: Seq",
    "url": "/docs\\guides\\sequencer\\index",
    "type": "docs",
    "tags": [
      "step sequencer",
      "guide"
    ],
    "keywords": [
      "step sequencer",
      "guide",
      "step sequencer",
      "midi sequencer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Step Sequencer",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 88,
    "title": "MIDI Step Sequencer",
    "description": "",
    "content": "uencer Modes Intro There are currently two modes: DRUM and MIDI. In DRUM mode, you are able to select sounds based on the currently loaded bank in the percussion channel. As of now, the keys are mapped based on the standard of the General Midi Percussion Map: While MIDI mode just uses everything els",
    "url": "/docs\\guides\\sequencer\\index",
    "type": "docs",
    "tags": [
      "step sequencer",
      "guide"
    ],
    "keywords": [
      "step sequencer",
      "guide",
      "step sequencer",
      "midi sequencer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Step Sequencer",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 89,
    "title": "MIDI Step Sequencer",
    "description": "",
    "content": "e available in the soundfont. Drum Mode Preset Patterns There are several included patterns that you can find here: Most of these are based from the book - Pocket Operations: A Collection of Drum Machine Patterns. There'll be more patterns added in the future. Sound Kits Depending on the soundfont y",
    "url": "/docs\\guides\\sequencer\\index",
    "type": "docs",
    "tags": [
      "step sequencer",
      "guide"
    ],
    "keywords": [
      "step sequencer",
      "guide",
      "step sequencer",
      "midi sequencer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Step Sequencer",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 90,
    "title": "MIDI Step Sequencer",
    "description": "",
    "content": "ou have loaded, there may be a variety of percussion sound banks that you can select from:",
    "url": "/docs\\guides\\sequencer\\index",
    "type": "docs",
    "tags": [
      "step sequencer",
      "guide"
    ],
    "keywords": [
      "step sequencer",
      "guide",
      "step sequencer",
      "midi sequencer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Step Sequencer",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 91,
    "title": "Creating Rooms",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; New Room The New Room Modal in PianoRhythm allows you to create or update a room with various settings. This guide will walk you through each field available in the modal and explain their purpose. Basic Settings Room Name Set the nam",
    "url": "/docs\\guides\\rooms\\creating-rooms",
    "type": "docs",
    "tags": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "keywords": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide",
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Creating Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 92,
    "title": "Creating Rooms",
    "description": "",
    "content": "e of your room. This is how other users will identify your room in the list. Password (Optional) Set a password for your room to restrict access. Only users with the password will be able to join. Room Status Toggle between making your room public or private. A private room will not appear in the gl",
    "url": "/docs\\guides\\rooms\\creating-rooms",
    "type": "docs",
    "tags": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "keywords": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide",
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Creating Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 93,
    "title": "Creating Rooms",
    "description": "",
    "content": "obal rooms list. Room Stage Select a predefined 3D stage for your room. This sets the visual environment for your room. Room Mode Choose the mode for your room. Options include: Normal: Standard room mode for playing the piano with friends. Orchestra: Play in an orchestra setting with multiple instr",
    "url": "/docs\\guides\\rooms\\creating-rooms",
    "type": "docs",
    "tags": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "keywords": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide",
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Creating Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 94,
    "title": "Creating Rooms",
    "description": "",
    "content": "uments. Welcome Message (Optional) Set a welcome message that users will see when they enter your room. You can use the token %%user%% to dynamically insert the user's name. Advanced Settings Only Owner Can Chat Enable this option to restrict chatting in the room to only the room owner. Only Owner C",
    "url": "/docs\\guides\\rooms\\creating-rooms",
    "type": "docs",
    "tags": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "keywords": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide",
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Creating Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 95,
    "title": "Creating Rooms",
    "description": "",
    "content": "an Play Enable this option to restrict playing the piano to only the room owner. Allow Guests Allow guest users to join your room. Allow Bots Allow bots to join your room. Allow Black MIDI Enable this option to allow Black MIDI, which involves playing a large number of notes in a short period. Filte",
    "url": "/docs\\guides\\rooms\\creating-rooms",
    "type": "docs",
    "tags": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "keywords": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide",
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Creating Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 96,
    "title": "Creating Rooms",
    "description": "",
    "content": "r Profanity Enable this option to filter out profane language in the chat. Max Players Set the maximum number of players that can join your room. Self Hosting Enable self-hosting to partially host your own room. This includes selecting your continent and country for better server performance. Rememb",
    "url": "/docs\\guides\\rooms\\creating-rooms",
    "type": "docs",
    "tags": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "keywords": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide",
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Creating Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 97,
    "title": "Creating Rooms",
    "description": "",
    "content": "er Last Settings Enable this option to remember the last settings you used when creating or updating a room. Self Hosting Settings Continent Select the continent where you are hosting the room. This helps in optimizing the server performance. Country Select the country where you are hosting the room",
    "url": "/docs\\guides\\rooms\\creating-rooms",
    "type": "docs",
    "tags": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "keywords": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide",
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Creating Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 98,
    "title": "Creating Rooms",
    "description": "",
    "content": ". This further helps in optimizing the server performance. Other Settings Remember Last Settings Enable this option to remember the last settings you used when creating or updating a room. Actions Reset to Default Reset all fields to their default values. Create Room / Update Room Submit the form to",
    "url": "/docs\\guides\\rooms\\creating-rooms",
    "type": "docs",
    "tags": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "keywords": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide",
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Creating Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 99,
    "title": "Creating Rooms",
    "description": "",
    "content": " create a new room or update the existing room with the specified settings. By using these settings, you can customize your room to fit your preferences and provide a better experience for your users.",
    "url": "/docs\\guides\\rooms\\creating-rooms",
    "type": "docs",
    "tags": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "keywords": [
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide",
      "rooms",
      "new room",
      "create room",
      "update room",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Creating Rooms",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 100,
    "title": "Orchestra Mode",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; Introduction Orchestra mode is a room mode where instrument models are shown for most users. Now, you'll see other players playing on their respective piano, instead of your own. Also, this is currently the only mode where other users",
    "url": "/docs\\guides\\orchestra-mode\\index",
    "type": "docs",
    "tags": [
      "orchestra",
      "guide"
    ],
    "keywords": [
      "orchestra",
      "guide",
      "orchestra mode",
      "orchestra"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Orchestra Mode",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 101,
    "title": "Orchestra Mode",
    "description": "",
    "content": " can see your customized piano. Each piano will have their user's username tag floating above it. When that user is playing, you'll only see their piano keys being animated for that respective user. To enter Orchestra mode, just create a new room and change the room mode to Orchestra. :::note Guests",
    "url": "/docs\\guides\\orchestra-mode\\index",
    "type": "docs",
    "tags": [
      "orchestra",
      "guide"
    ],
    "keywords": [
      "orchestra",
      "guide",
      "orchestra mode",
      "orchestra"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Orchestra Mode",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 102,
    "title": "Orchestra Mode",
    "description": "",
    "content": " are not allowed to set room modes when creating rooms. So, create a free account and become a member ASAP! ::: :::note There is currently an arbitrary limit of 10 max 3D models that are shown for the current users. Meaning that if the room currently has 15 users in there, the client will only show ",
    "url": "/docs\\guides\\orchestra-mode\\index",
    "type": "docs",
    "tags": [
      "orchestra",
      "guide"
    ],
    "keywords": [
      "orchestra",
      "guide",
      "orchestra mode",
      "orchestra"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Orchestra Mode",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 103,
    "title": "Orchestra Mode",
    "description": "",
    "content": "piano models for the first 10. ::: :::note To enable/disable displaying other models in Orchestra mode, you can go to Settings -> Graphics (General) -> Enable Orchestra Models :::",
    "url": "/docs\\guides\\orchestra-mode\\index",
    "type": "docs",
    "tags": [
      "orchestra",
      "guide"
    ],
    "keywords": [
      "orchestra",
      "guide",
      "orchestra mode",
      "orchestra"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Orchestra Mode",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 104,
    "title": "Virtual Piano Player",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; Introduction There is now support for a basic Virtual Piano sequencer in PianoRhythm. This feature allows you to play notes from virtual piano sheets and have them played back in sequence with sound. How to get started? There are a fe",
    "url": "/docs\\guides\\midi-player\\vp-sequencer",
    "type": "docs",
    "tags": [
      "sequencer",
      "guide"
    ],
    "keywords": [
      "sequencer",
      "guide",
      "virtual piano sequencer",
      "sequencer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Virtual Piano Player",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 105,
    "title": "Virtual Piano Player",
    "description": "",
    "content": "w ways to start use the Virtual Piano sequencer: Sheet Music Viewer You can open the Sheet Music Viewer and either manually type in notes or paste notes from a virtual piano sheet after clicking Create New. You can also click on Browse File to open a virtual piano sheet file from your computer. Afte",
    "url": "/docs\\guides\\midi-player\\vp-sequencer",
    "type": "docs",
    "tags": [
      "sequencer",
      "guide"
    ],
    "keywords": [
      "sequencer",
      "guide",
      "virtual piano sequencer",
      "sequencer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Virtual Piano Player",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 106,
    "title": "Virtual Piano Player",
    "description": "",
    "content": "r you have entered notes, you can click on the VP button at the top to active Virtual Piano mode. You'll see additional controls for the sequencer such as Play, Pause, etc. You'll also see the buttons to change the tempo, toggle auto-scroll, and toggle the sustain. Sheet Music Repo You can also use ",
    "url": "/docs\\guides\\midi-player\\vp-sequencer",
    "type": "docs",
    "tags": [
      "sequencer",
      "guide"
    ],
    "keywords": [
      "sequencer",
      "guide",
      "virtual piano sequencer",
      "sequencer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Virtual Piano Player",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 107,
    "title": "Virtual Piano Player",
    "description": "",
    "content": "the sequencer when viewing sheet music from the Sheet Music Repo. Those that support the Virtual Piano player will have the category set as Virtual Piano.",
    "url": "/docs\\guides\\midi-player\\vp-sequencer",
    "type": "docs",
    "tags": [
      "sequencer",
      "guide"
    ],
    "keywords": [
      "sequencer",
      "guide",
      "virtual piano sequencer",
      "sequencer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Virtual Piano Player",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 108,
    "title": "MIDI Player",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; Introduction The MIDI player is a feature that allows you to play MIDI files in PianoRhythm. How to get started? You can either drag and drop a MIDI file into the PianoRhythm window or click on the \"Open MIDI File\" button by going to ",
    "url": "/docs\\guides\\midi-player\\index",
    "type": "docs",
    "tags": [
      "midi",
      "guide"
    ],
    "keywords": [
      "midi",
      "guide",
      "midi player",
      "midi"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Player",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 109,
    "title": "MIDI Player",
    "description": "",
    "content": "Tools in the instrument dock. Lyrics The MIDI player also supports lyrics. You can add lyrics to the MIDI file and they will be displayed as the song is played. Lyric text in a MIDI file simply identifies a chronological sequence of syllables that should be sung with the song, and the time at which ",
    "url": "/docs\\guides\\midi-player\\index",
    "type": "docs",
    "tags": [
      "midi",
      "guide"
    ],
    "keywords": [
      "midi",
      "guide",
      "midi player",
      "midi"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Player",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 110,
    "title": "MIDI Player",
    "description": "",
    "content": "each syllable should start to be sung Each syllable will be animated to show the current syllable being sung.",
    "url": "/docs\\guides\\midi-player\\index",
    "type": "docs",
    "tags": [
      "midi",
      "guide"
    ],
    "keywords": [
      "midi",
      "guide",
      "midi player",
      "midi"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Player",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 111,
    "title": "Instrument Dock",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; :::note This guide is still a work in progress ::: Introduction The instrument dock is one the core features of PianoRhythm. From there, you'll be able the view and manipulate the different midi channel states. What's a midi channel, ",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 112,
    "title": "Instrument Dock",
    "description": "",
    "content": "you may ask? Well, here's a nice definition: The concept of channels is central to how most MIDI messages work. A channel is an independent path over which messages travel to their destination. There are 16 channels per MIDI device. A track in your sequencer program plays one instrument over a singl",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 113,
    "title": "Instrument Dock",
    "description": "",
    "content": "e channel. The MIDI messages in the track find their way to the instrument over that channel. source: Introduction to the MIDI Standard. Tranpose You can change the current transpose of a key by either entering the transpose number (-14 to 14) or clicking on the up/down arrows keys. Ultimately, it's",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 114,
    "title": "Instrument Dock",
    "description": "",
    "content": " just a number that you can add to the key you're playing to shift it up or down. The default number is 0. To reset it, simply click on the button that says Transpose. You can find the transpose button in the instrument dock near the bottom. Octave You can change the current octave of a key by eithe",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 115,
    "title": "Instrument Dock",
    "description": "",
    "content": "r entering the octave number (-7 to 7) or clicking on the up/down arrows keys. Ultimately, it's just a number that you can add to the key you're playing to shift it up or down by an octave (12 keys). The default number is 0. To reset it, simply click on the button that says Octave. You can find the ",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 116,
    "title": "Instrument Dock",
    "description": "",
    "content": "octave button in the instrument dock near the bottom. Primary channel Depending on the slot mode, the primary channel is just the default channel that is used when playing notes. By default, the primary channel is 0. That means, whatever instrument is in channel 0, will be the one used to synthesize",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 117,
    "title": "Instrument Dock",
    "description": "",
    "content": " the audio. A channel is indicated as a primary active channel when it has a white border around the icon. You can change the primary channel by right clicking on an active channel icon (meaning that there's an instrument loaded) and then selecting Make Channel Primary. :::note Depending on the curr",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 118,
    "title": "Instrument Dock",
    "description": "",
    "content": "ent slot mode, the primary channel may not have an affect. For example, the primary channel is ignored in Multi mode. ::: Slot Modes The slot mode is just a particular mode for the midi channels that the audio engine can interpret differently. You can change the slot mode by clicking on the button t",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 119,
    "title": "Instrument Dock",
    "description": "",
    "content": "hat says: Slot Mode in the instrument dock. All All is the default mode. This means that all the notes created by the user (either by keyboard, mouse, midi piano, etc) will be emitted to a primary channel (default is channel 0). And all others channels are enabled and allowed to listen for data. For",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 120,
    "title": "Instrument Dock",
    "description": "",
    "content": " example, if you're playing a midi file or somehow emitting data on various channels, then the audio engine will process it accordingly. Single Single mode will ignore all other channels except for one. It will only use and listen to data on channel 0. It doesn't matter what the primary channel is s",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 121,
    "title": "Instrument Dock",
    "description": "",
    "content": "et to since it will not be used. Multi Multi mode allows note data to be emitted to multiple channels at the same time. By default, it's 3. This means that playing any notes will have data be emitted to channels 0, 1, and 2 at the same time. This is useful when you want to play multiple different in",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 122,
    "title": "Instrument Dock",
    "description": "",
    "content": "struments at the same time for various effects. For example, you can have the piano in channel 0 and a guitar in channel 1 for a cool effect. The default max number of channels can be changed in the settings by going to: Settings -> Midi -> Max Multi Mode Channels. Splits Split modes pretty much spl",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 123,
    "title": "Instrument Dock",
    "description": "",
    "content": "its the actually keyboard into different sections with a respective channel. In the 3D piano, you'll see each section color coded to a particular channel. :::note The keys that appear transparent is just an indication that there's no instrument actively loaded for that channel. ::: Split2: Splits th",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 124,
    "title": "Instrument Dock",
    "description": "",
    "content": "e piano in half. The first half will emit data to channel 0 while the second half emits to channel 1. Split4: Splits the piano into quarters. From channels 0 to 3. Split8: Splits the piano into eigths. From channels 0 to 7. Tools The tools are just a collection of some common actions related to the ",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 125,
    "title": "Instrument Dock",
    "description": "",
    "content": "dock or in general. Some actions are kind of self explanatory but here some more details on a few: Channel Display Mode The Channel Display Mode action simply changes the total number of channel icons that are displayed in the dock. By default, 8 channel icons are displayed at a time. You can cycle ",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 126,
    "title": "Instrument Dock",
    "description": "",
    "content": "through all 16 by clicking the left/right arrow buttons. Reset to Default This Reset to Default action will reset all the channels (including their state like volume, panning, etc) to their default values. Clear instruments The Clear Instruments action will remove all instruments from the channels. ",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 127,
    "title": "Instrument Dock",
    "description": "",
    "content": "Open Midi File The Open Midi File action will open a file dialog to import a valid midi file (.mid) to play in PianoRhythm's midi player. Instrument Selection The Instrument Selection action will open up the list of instruments available for your currently loaded soundfont.",
    "url": "/docs\\guides\\instrument-dock\\index",
    "type": "docs",
    "tags": [
      "instrument dock",
      "guide"
    ],
    "keywords": [
      "instrument dock",
      "guide",
      "instrument dock",
      "transpose",
      "octave",
      "primary channel",
      "slot mode",
      "dock tools"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Instrument Dock",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 128,
    "title": "Channel Parameters",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; :::note This guide is still a work in progress. ::: Introduction As of version 0.8.3, you can now manipulate the volume and panning of each midi channel. :::note The highlighted animation on each slider does not represent the current ",
    "url": "/docs\\guides\\instrument-dock\\channel-parameters",
    "type": "docs",
    "tags": [
      "channel parameters",
      "guide"
    ],
    "keywords": [
      "channel parameters",
      "guide",
      "channel parameters",
      "channels",
      "channel volume",
      "channel panning",
      "muting channels"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Channel Parameters",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 129,
    "title": "Channel Parameters",
    "description": "",
    "content": "volume per channel, but instead tracks the last note-on activity for that channel, based on its velocity value. ::: Where do I find it? To access this modal, you can find the Channels Parameters button in right widgets sections: You can also right click on each individual channel slot in the instrum",
    "url": "/docs\\guides\\instrument-dock\\channel-parameters",
    "type": "docs",
    "tags": [
      "channel parameters",
      "guide"
    ],
    "keywords": [
      "channel parameters",
      "guide",
      "channel parameters",
      "channels",
      "channel volume",
      "channel panning",
      "muting channels"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Channel Parameters",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 130,
    "title": "Channel Parameters",
    "description": "",
    "content": "ent dock to access a value slider for the volume and/or panning. Muting Channels You can also mute channels (setting the channel's volume to 0) by clicking on the checkbox below the slider, as indicated here:",
    "url": "/docs\\guides\\instrument-dock\\channel-parameters",
    "type": "docs",
    "tags": [
      "channel parameters",
      "guide"
    ],
    "keywords": [
      "channel parameters",
      "guide",
      "channel parameters",
      "channels",
      "channel volume",
      "channel panning",
      "muting channels"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Channel Parameters",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 131,
    "title": "Commands",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; Chat Commands Documentation This documentation provides an overview of the available chat commands in the PianoRhythm application. The commands are categorized into client commands and moderator commands. To use a command, type / and ",
    "url": "/docs\\guides\\general\\commands",
    "type": "docs",
    "tags": [],
    "keywords": [
      "commands",
      "chat commands",
      "chat",
      "commands list"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Commands",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 132,
    "title": "Commands",
    "description": "",
    "content": "then command in the chat input box and press Enter. For example, to view all available commands, type /help and press Enter. A pop up modal will appear with the list of available commands and their descriptions. Press the Up and Down arrow keys to navigate the list, and press Tab to select the comma",
    "url": "/docs\\guides\\general\\commands",
    "type": "docs",
    "tags": [],
    "keywords": [
      "commands",
      "chat commands",
      "chat",
      "commands list"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Commands",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 133,
    "title": "Commands",
    "description": "",
    "content": "nd or Enter to execute it. :::note These commands are only shown on the client and will not be saved in the chat history on the server. ::: Client Commands These commands are available to all users: help Description: View all available commands. me Description: View user info. discord Description: G",
    "url": "/docs\\guides\\general\\commands",
    "type": "docs",
    "tags": [],
    "keywords": [
      "commands",
      "chat commands",
      "chat",
      "commands list"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Commands",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 134,
    "title": "Commands",
    "description": "",
    "content": "et the link to PianoRhythm's Community Discord Server! youtube Description: Get the link to PianoRhythm's YouTube Channel! twitch Description: Get the link to PianoRhythm's Twitch Channel! issues Description: Get the link to PianoRhythm's Issue Tracker! download Description: Get the latest desktop a",
    "url": "/docs\\guides\\general\\commands",
    "type": "docs",
    "tags": [],
    "keywords": [
      "commands",
      "chat commands",
      "chat",
      "commands list"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Commands",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 135,
    "title": "Commands",
    "description": "",
    "content": "pp version! mute_self Description: Mute your own notes to prevent others from hearing you. unmute_self Description: Unmute your notes. offline_mode Description: Disconnect from the server and play offline. Disabled: Yes Moderator Commands These commands are available to moderators only: ban_user Des",
    "url": "/docs\\guides\\general\\commands",
    "type": "docs",
    "tags": [],
    "keywords": [
      "commands",
      "chat commands",
      "chat",
      "commands list"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Commands",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 136,
    "title": "Commands",
    "description": "",
    "content": "cription: (Not Implemented Yet | Use context menu on user in sidebar) Ban a user from the server. Arguments: user: The user to ban. edit_badges Description: Edit badges for a user. Arguments: user: The user whose badges will be edited. clear_chat Description: Clear the chat in the room for everyone.",
    "url": "/docs\\guides\\general\\commands",
    "type": "docs",
    "tags": [],
    "keywords": [
      "commands",
      "chat commands",
      "chat",
      "commands list"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Commands",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 137,
    "title": "Commands",
    "description": "",
    "content": " Additional Commands These commands are available to members and moderators: whisper Description: Send a private message to a user. Disabled: Yes Arguments: user: The user to send a message to. message: The message content. status_text Description: Set your status text. Arguments: text: The status t",
    "url": "/docs\\guides\\general\\commands",
    "type": "docs",
    "tags": [],
    "keywords": [
      "commands",
      "chat commands",
      "chat",
      "commands list"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Commands",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 138,
    "title": "Commands",
    "description": "",
    "content": "ext (optional). clear_status_text Description: Clear your status text. nickname Description: Set your nickname. Arguments: text: The nickname (optional). clear_nickname Description: Clear your nickname. profile_description Description: Set your profile description. Arguments: text: The profile descr",
    "url": "/docs\\guides\\general\\commands",
    "type": "docs",
    "tags": [],
    "keywords": [
      "commands",
      "chat commands",
      "chat",
      "commands list"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Commands",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 139,
    "title": "Commands",
    "description": "",
    "content": "iption (optional). clear_profile_description Description: Clear your profile description.",
    "url": "/docs\\guides\\general\\commands",
    "type": "docs",
    "tags": [],
    "keywords": [
      "commands",
      "chat commands",
      "chat",
      "commands list"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Commands",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 140,
    "title": "Piano Customization",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; Introduction With the introduction of Orchestra Mode (version: 0.8.30), you can now customize your piano! There'll be more customization options in the future, but as of now, you're able to modify your piano's body material and its ke",
    "url": "/docs\\guides\\customization\\piano_index",
    "type": "docs",
    "tags": [
      "orchestra",
      "piano customization",
      "customization",
      "guide"
    ],
    "keywords": [
      "orchestra",
      "piano customization",
      "customization",
      "guide",
      "piano customization",
      "orchestra mode",
      "decals"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Piano Customization",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 141,
    "title": "Piano Customization",
    "description": "",
    "content": "ys. :::note This is not available for guests so create an account today! Also, there are certain customization features that are only for PRO members (paid subscription). ::: Where do I find it? To enter customization mode, you can find the button Customize Piano in right sidebar widgets. Decals :::",
    "url": "/docs\\guides\\customization\\piano_index",
    "type": "docs",
    "tags": [
      "orchestra",
      "piano customization",
      "customization",
      "guide"
    ],
    "keywords": [
      "orchestra",
      "piano customization",
      "customization",
      "guide",
      "piano customization",
      "orchestra mode",
      "decals"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Piano Customization",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 142,
    "title": "Piano Customization",
    "description": "",
    "content": "caution This feature is not yet ready. Once it is, this section will be updated. ::: Another customization feature are decals. From a preset list of various decals, you'll be able to place them anywhere you wish on your model. You'll be able to change the size, angle, and color of each decal.",
    "url": "/docs\\guides\\customization\\piano_index",
    "type": "docs",
    "tags": [
      "orchestra",
      "piano customization",
      "customization",
      "guide"
    ],
    "keywords": [
      "orchestra",
      "piano customization",
      "customization",
      "guide",
      "piano customization",
      "orchestra mode",
      "decals"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Piano Customization",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 143,
    "title": "Locales Guide",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; Introduction PianoRhythm is a multilingual application that supports multiple languages. This guide will show you how to contribute to the localization of PianoRhythm. Github Repo How to get started? You have two primary ways to contr",
    "url": "/docs\\guides\\contributing\\locales",
    "type": "docs",
    "tags": [
      "locales",
      "contributing",
      "guide"
    ],
    "keywords": [
      "locales",
      "contributing",
      "guide",
      "locales",
      "contributing",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Locales Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 144,
    "title": "Locales Guide",
    "description": "",
    "content": "ibute to the localization of PianoRhythm: Forking the Repository The first way is to fork the repository and create a new locale file or update one in the locales directory. You can copy or use the translation files in the locales/en directory as your reference to translate the strings to your desir",
    "url": "/docs\\guides\\contributing\\locales",
    "type": "docs",
    "tags": [
      "locales",
      "contributing",
      "guide"
    ],
    "keywords": [
      "locales",
      "contributing",
      "guide",
      "locales",
      "contributing",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Locales Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 145,
    "title": "Locales Guide",
    "description": "",
    "content": "ed language. The README file in the root directory will provide you with more information. Once you have completed the translation, you can submit a pull request to the main repository. You can find the link to the repository here. Using Fink by Inlang The other way is to use Fink by Inlang, a web-b",
    "url": "/docs\\guides\\contributing\\locales",
    "type": "docs",
    "tags": [
      "locales",
      "contributing",
      "guide"
    ],
    "keywords": [
      "locales",
      "contributing",
      "guide",
      "locales",
      "contributing",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Locales Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 146,
    "title": "Locales Guide",
    "description": "",
    "content": "ased translation platform that allows you to translate the strings in PianoRhythm. With your github account, you can sign in to Fink and start translating through their web interface. A fork of the repository will be created for you to work on the translations in your own personal Github account. On",
    "url": "/docs\\guides\\contributing\\locales",
    "type": "docs",
    "tags": [
      "locales",
      "contributing",
      "guide"
    ],
    "keywords": [
      "locales",
      "contributing",
      "guide",
      "locales",
      "contributing",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Locales Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 147,
    "title": "Locales Guide",
    "description": "",
    "content": "ce you have completed the translation, you can submit a pull request to the main repository. You can find the link to PianoRhythm's Fink by Inlang here.",
    "url": "/docs\\guides\\contributing\\locales",
    "type": "docs",
    "tags": [
      "locales",
      "contributing",
      "guide"
    ],
    "keywords": [
      "locales",
      "contributing",
      "guide",
      "locales",
      "contributing",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Locales Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 148,
    "title": "Introduction",
    "description": "",
    "content": "Introduction PianoRhythm is an open-source project that welcomes contributions from the community. This guide will show you the different ways to contribute to the development of PianoRhythm. How to get started? i18n Localization: Locales Guide",
    "url": "/docs\\guides\\contributing\\index",
    "type": "docs",
    "tags": [
      "contributing",
      "guide"
    ],
    "keywords": [
      "contributing",
      "guide",
      "contributing",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Introduction",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 149,
    "title": "Looper",
    "description": "",
    "content": "import BaseScreenShot from '@site/src/components/BaseScreenShot'; Introduction The Looper component is a powerful tool that allows you to record and playback data in real-time. It is a great tool for creating loops, practicing, and experimenting with different ideas. How to get started? You can find",
    "url": "/docs\\guides\\components\\looper",
    "type": "docs",
    "tags": [
      "looper",
      "guide"
    ],
    "keywords": [
      "looper",
      "guide",
      "looper",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Looper",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 150,
    "title": "Looper",
    "description": "",
    "content": " the looper component by going to the Common Actions menu and selecting Looper: How to use it? The Looper component has the following features: Record: Start recording data. Left click on a track to record. Play: Start playing the recorded data. Press the Play button to play all tracks. You can also",
    "url": "/docs\\guides\\components\\looper",
    "type": "docs",
    "tags": [
      "looper",
      "guide"
    ],
    "keywords": [
      "looper",
      "guide",
      "looper",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Looper",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 151,
    "title": "Looper",
    "description": "",
    "content": " toggle playing individual tracks by right clicking on them. Stop: Stop the recording or playback. Press the Stop button to stop all tracks. Clear: Clear the recorded data. Press the Clear button to clear all tracks or the press the icon underneath the track to clear it. Add/Remove Tracks: Add or re",
    "url": "/docs\\guides\\components\\looper",
    "type": "docs",
    "tags": [
      "looper",
      "guide"
    ],
    "keywords": [
      "looper",
      "guide",
      "looper",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Looper",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 152,
    "title": "Looper",
    "description": "",
    "content": "move tracks. A maximum of 16 tracks can be added. Press the Add Track button to add a new track. Press the Remove Track button to remove a track. Auto Trim: Automatically trim the recorded data. Press the Auto Trim button to automatically trim the recorded data. Help: Get help on how to use the Loop",
    "url": "/docs\\guides\\components\\looper",
    "type": "docs",
    "tags": [
      "looper",
      "guide"
    ],
    "keywords": [
      "looper",
      "guide",
      "looper",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Looper",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 153,
    "title": "Looper",
    "description": "",
    "content": "er component. Press the Help button to get help on how to use the Looper component. Color Coding The Looper component uses color coding to help you identify the different states of the tracks: (Using the default theme colors) Recording The track is currently recording. Playing The track is currently",
    "url": "/docs\\guides\\components\\looper",
    "type": "docs",
    "tags": [
      "looper",
      "guide"
    ],
    "keywords": [
      "looper",
      "guide",
      "looper",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Looper",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 154,
    "title": "Looper",
    "description": "",
    "content": " playing. Stopped The track is currently stopped but has recorded data. Empty The track is empty.",
    "url": "/docs\\guides\\components\\looper",
    "type": "docs",
    "tags": [
      "looper",
      "guide"
    ],
    "keywords": [
      "looper",
      "guide",
      "looper",
      "guide"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Looper",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 155,
    "title": "PianoRhythm: FAQs",
    "description": "",
    "content": "import FAQStructuredData from '../../src/components/faqs/FAQStructuredData'; What v3 is today, is something v2 will most likely have turned into, if I had continued working on it. `, }, { question: My midi inputs are not showing up. How come?, answer: ` There can be a few reasons as to why your midi",
    "url": "/docs\\faqs\\index",
    "type": "docs",
    "tags": [
      "faqs",
      "questions",
      "troubleshoot"
    ],
    "keywords": [
      "faqs",
      "questions",
      "troubleshoot",
      "faqs",
      "questions",
      "troubleshoot"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "PianoRhythm: FAQs",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 156,
    "title": "PianoRhythm: FAQs",
    "description": "",
    "content": " device inputs are not showing up. Your device is already being used by another process/application. Closing it typically resolves the issue. Your devices may not be properly plugged in. Double check the connection. You may be using a browser that may not support WebMIDI (if you're using the browser",
    "url": "/docs\\faqs\\index",
    "type": "docs",
    "tags": [
      "faqs",
      "questions",
      "troubleshoot"
    ],
    "keywords": [
      "faqs",
      "questions",
      "troubleshoot",
      "faqs",
      "questions",
      "troubleshoot"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "PianoRhythm: FAQs",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 157,
    "title": "PianoRhythm: FAQs",
    "description": "",
    "content": "). Try switching to Chrome or Opera. And finally, it may be a legit bug in PianoRhythm and I'm most likely trying to resolve it. `, }, { question: 'Why is the latency so bad in the browser version?', answer: ` It's more of an implementation issue with PianoRhythm. I'm still trying to figure out how ",
    "url": "/docs\\faqs\\index",
    "type": "docs",
    "tags": [
      "faqs",
      "questions",
      "troubleshoot"
    ],
    "keywords": [
      "faqs",
      "questions",
      "troubleshoot",
      "faqs",
      "questions",
      "troubleshoot"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "PianoRhythm: FAQs",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 158,
    "title": "PianoRhythm: FAQs",
    "description": "",
    "content": "to refactor the systems to reduce the perceived latency. That's why I developed the desktop version which has more direct access to midi inputs. `, }, { question: 'Why is the audio quality so bad in the browser version?', answer: ` I don't think it's that bad but it is indeed not the highest fidelit",
    "url": "/docs\\faqs\\index",
    "type": "docs",
    "tags": [
      "faqs",
      "questions",
      "troubleshoot"
    ],
    "keywords": [
      "faqs",
      "questions",
      "troubleshoot",
      "faqs",
      "questions",
      "troubleshoot"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "PianoRhythm: FAQs",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 159,
    "title": "PianoRhythm: FAQs",
    "description": "",
    "content": "y. In short, WebAudio just has certain limitations with synthesized audio. I'm also not a master expert in utilizing the full potential of it, so that's another factor. If you're well versed in the topic and would like to help, please contact me! Otherwise, the desktop app uses your machine's native",
    "url": "/docs\\faqs\\index",
    "type": "docs",
    "tags": [
      "faqs",
      "questions",
      "troubleshoot"
    ],
    "keywords": [
      "faqs",
      "questions",
      "troubleshoot",
      "faqs",
      "questions",
      "troubleshoot"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "PianoRhythm: FAQs",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 160,
    "title": "PianoRhythm: FAQs",
    "description": "",
    "content": " audio driver, so the quality is relatively better there. `, }, { question: Why can't I hear any sound/audio?, answer: Check this troubleshooting guide here, }, { question: 'How do I create a plugin?', answer: Click here, }, /*{ question: 'I found a bug. Where do I report it?', answer: Click here or",
    "url": "/docs\\faqs\\index",
    "type": "docs",
    "tags": [
      "faqs",
      "questions",
      "troubleshoot"
    ],
    "keywords": [
      "faqs",
      "questions",
      "troubleshoot",
      "faqs",
      "questions",
      "troubleshoot"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "PianoRhythm: FAQs",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 161,
    "title": "PianoRhythm: FAQs",
    "description": "",
    "content": " make a post in the Discord Server., }, { question: 'I want to request a new feature to be added. How can I?', answer: Click here, },*/ ]} />",
    "url": "/docs\\faqs\\index",
    "type": "docs",
    "tags": [
      "faqs",
      "questions",
      "troubleshoot"
    ],
    "keywords": [
      "faqs",
      "questions",
      "troubleshoot",
      "faqs",
      "questions",
      "troubleshoot"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "PianoRhythm: FAQs",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 162,
    "title": "Community",
    "description": "",
    "content": "Links PianoRhythm Support Email - system+help@pianorhythm.io PianoRhythm Status Page - StatusPage Official Social Media Youtube Twitch Discord Twitter/X",
    "url": "/docs\\community\\index",
    "type": "docs",
    "tags": [
      "social media",
      "youtube",
      "twitch",
      "discord",
      "x"
    ],
    "keywords": [
      "social media",
      "youtube",
      "twitch",
      "discord",
      "x",
      "official email",
      "support email",
      "issue tracker",
      "social media",
      "youtube",
      "twitch",
      "discord"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Community",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 163,
    "title": "Discord",
    "description": "",
    "content": "Join our discord server here! PianoRhythm Discord",
    "url": "/docs\\community\\discord",
    "type": "docs",
    "tags": [],
    "keywords": [
      "discord",
      "social media"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Discord",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 164,
    "title": "Credits",
    "description": "",
    "content": "This project is made possible by the community surrounding it and especially the wonderful people and projects listed in this document. Contributors (Discord Users) Development Bop It Freak#8512 Alpha Testing Bop It Freak#8512 Delan#1634 123123 (Dja-)#2732 eye811#1573 saiku.wisteria#1926 ̗̀Lucie ̖́-",
    "url": "/docs\\community\\credits",
    "type": "docs",
    "tags": [],
    "keywords": [
      "credits",
      "contributors",
      "libraries"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Credits",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 165,
    "title": "Credits",
    "description": "",
    "content": "#2612 Matcha 🍵#0393 charsy#5579 DashU#8181 Beary#3378 T o m m y#8502 Nie Li#7415 And many more! Libraries (Web Framework) Solid.js (3D Engine) babylon.js (2D Engine) Pixi.js (Desktop App) Tauri (Desktop Backend & WASM) Rust Programming Language (Multiplayer Server - World) Colyseus.io lottie-player",
    "url": "/docs\\community\\credits",
    "type": "docs",
    "tags": [],
    "keywords": [
      "credits",
      "contributors",
      "libraries"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Credits",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 166,
    "title": "Credits",
    "description": "",
    "content": " Lottie Files Credit violinist.json 782-check-mark-success.json.json 6902-exploding-ribbon-and-confetti.json 10008-music-note-character.json 10009-hello-streamers.json",
    "url": "/docs\\community\\credits",
    "type": "docs",
    "tags": [],
    "keywords": [
      "credits",
      "contributors",
      "libraries"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Credits",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 167,
    "title": "Technical Documentation",
    "description": "",
    "content": "PianoRhythm Technical Documentation Welcome to the comprehensive technical documentation for PianoRhythm, a multiplayer social web application for real-time musical collaboration. 📚 Documentation Index Core Architecture Architecture Overview - High-level system design and component relationships Co",
    "url": "/docs\\community\\technical-documentation\\index",
    "type": "docs",
    "tags": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview"
    ],
    "keywords": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Technical Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 168,
    "title": "Technical Documentation",
    "description": "",
    "content": "re Business Logic - pianorhythm_core Rust engine documentation Initialization System - Dependency-based startup architecture Protocol Buffers - Message serialization and cross-platform communication Frontend Development Frontend Architecture - SolidJS components, services, and state management Audio",
    "url": "/docs\\community\\technical-documentation\\index",
    "type": "docs",
    "tags": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview"
    ],
    "keywords": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Technical Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 169,
    "title": "Technical Documentation",
    "description": "",
    "content": " System - Audio synthesis, WebAudio API, and audio processing MIDI Integration - MIDI device handling and Web MIDI API 3D Rendering - Bevy Engine integration and WebGPU/WebGL2 UI Components - Hope UI components and design system Backend & Infrastructure SSR Implementation - Server-side rendering wit",
    "url": "/docs\\community\\technical-documentation\\index",
    "type": "docs",
    "tags": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview"
    ],
    "keywords": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Technical Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 170,
    "title": "Technical Documentation",
    "description": "",
    "content": "h Vinxi and SolidJS Backend Services - API endpoints, database, and authentication WebSocket Communication - Real-time communication architecture Development & Operations Development Setup - Local development environment and build processes Testing Guide - Unit tests, integration tests, and e2e test",
    "url": "/docs\\community\\technical-documentation\\index",
    "type": "docs",
    "tags": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview"
    ],
    "keywords": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Technical Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 171,
    "title": "Technical Documentation",
    "description": "",
    "content": "ing Deployment Guide - Production deployment and CI/CD Build System - Vinxi configuration and build processes Desktop Application - Tauri-based native wrapper and system integration 🚀 Quick Start For new developers joining the project: Start with Development Setup to get your environment ready Read",
    "url": "/docs\\community\\technical-documentation\\index",
    "type": "docs",
    "tags": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview"
    ],
    "keywords": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Technical Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 172,
    "title": "Technical Documentation",
    "description": "",
    "content": " Architecture Overview to understand the system design Follow Frontend Architecture to understand the SolidJS structure Review Testing Guide to understand our testing practices 🔧 Key Technologies Frontend: SolidJS, TypeScript, Hope UI, Vinxi Backend: Bun/Node.js, MongoDB, WebSockets Core Engine: Ru",
    "url": "/docs\\community\\technical-documentation\\index",
    "type": "docs",
    "tags": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview"
    ],
    "keywords": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Technical Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 173,
    "title": "Technical Documentation",
    "description": "",
    "content": "st, WebAssembly, Protocol Buffers 3D Rendering: Bevy Engine, WebGPU/WebGL2 Audio: Custom Rust synthesizer, Web Audio API Testing: Vitest, Solid Testing Library, Cypress Deployment: GitHub Pages, Docker, DigitalOcean 📖 Documentation Guidelines When contributing to documentation: Keep it current - Up",
    "url": "/docs\\community\\technical-documentation\\index",
    "type": "docs",
    "tags": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview"
    ],
    "keywords": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Technical Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 174,
    "title": "Technical Documentation",
    "description": "",
    "content": "date docs when making code changes Use examples - Include code snippets and practical examples Be comprehensive - Cover both happy path and edge cases Link related topics - Cross-reference related documentation Include diagrams - Use Mermaid diagrams for complex flows 🤝 Contributing See our main Co",
    "url": "/docs\\community\\technical-documentation\\index",
    "type": "docs",
    "tags": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview"
    ],
    "keywords": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Technical Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 175,
    "title": "Technical Documentation",
    "description": "",
    "content": "ntributing Guide for general contribution guidelines. For documentation-specific contributions: Follow the existing structure and formatting Test code examples before including them Update the index when adding new documentation files Use clear, concise language suitable for developers of all levels",
    "url": "/docs\\community\\technical-documentation\\index",
    "type": "docs",
    "tags": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview"
    ],
    "keywords": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Technical Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 176,
    "title": "Technical Documentation",
    "description": "",
    "content": " 📞 Support Issues: GitHub Issues Discussions: GitHub Discussions Main Site: pianorhythm.io Last Updated: 2025-06-28",
    "url": "/docs\\community\\technical-documentation\\index",
    "type": "docs",
    "tags": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview"
    ],
    "keywords": [
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "overview",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Technical Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 177,
    "title": "server",
    "description": "Technical documentation for PianoRhythm Server",
    "content": "PianoRhythm Server Technical Documentation Welcome to the comprehensive technical documentation for PianoRhythm Server. This documentation covers all aspects of the server architecture, APIs, deployment, and development. 📖 Documentation Structure 🏗️ Architecture Understanding the system design and",
    "url": "/docs\\community\\technical-documentation\\server\\index",
    "type": "docs",
    "tags": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "keywords": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust",
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "server",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 178,
    "title": "server",
    "description": "Technical documentation for PianoRhythm Server",
    "content": " core components: Overview - High-level system architecture and design principles Actor System - Detailed actor system documentation State Management - Redis-based state management and caching 🔌 API Reference Complete API documentation for integration: API Overview - API architecture and authentica",
    "url": "/docs\\community\\technical-documentation\\server\\index",
    "type": "docs",
    "tags": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "keywords": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust",
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "server",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 179,
    "title": "server",
    "description": "Technical documentation for PianoRhythm Server",
    "content": "tion WebSocket API - Real-time WebSocket communication REST Endpoints - HTTP REST API reference 🚀 Deployment Production deployment and operations: Docker Deployment - Containerized deployment with Docker Kubernetes Deployment - Scalable Kubernetes deployment Environment Configuration - Configuratio",
    "url": "/docs\\community\\technical-documentation\\server\\index",
    "type": "docs",
    "tags": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "keywords": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust",
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "server",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 180,
    "title": "server",
    "description": "Technical documentation for PianoRhythm Server",
    "content": "n management and secrets 💻 Development Development guides and best practices: Development Setup - Local development environment setup Testing Guide - Testing strategies and tools Contributing Guidelines - Code standards and contribution workflow 🎯 Quick Navigation For New Developers Start with Arc",
    "url": "/docs\\community\\technical-documentation\\server\\index",
    "type": "docs",
    "tags": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "keywords": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust",
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "server",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 181,
    "title": "server",
    "description": "Technical documentation for PianoRhythm Server",
    "content": "hitecture Overview to understand the system Follow Development Setup to get your environment ready Review API Overview to understand the interfaces Check Testing Guide to run and write tests For DevOps Engineers Review Docker Deployment for containerization Study Kubernetes Deployment for orchestrat",
    "url": "/docs\\community\\technical-documentation\\server\\index",
    "type": "docs",
    "tags": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "keywords": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust",
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "server",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 182,
    "title": "server",
    "description": "Technical documentation for PianoRhythm Server",
    "content": "ion Configure Environment Variables for your setup For API Consumers Start with API Overview for authentication and general concepts Reference REST Endpoints for HTTP APIs Study WebSocket API for real-time features For System Architects Deep dive into Architecture Overview Understand Actor System de",
    "url": "/docs\\community\\technical-documentation\\server\\index",
    "type": "docs",
    "tags": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "keywords": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust",
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "server",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 183,
    "title": "server",
    "description": "Technical documentation for PianoRhythm Server",
    "content": "sign patterns Review State Management strategies 🔍 Key Concepts Real-time Architecture The server is built around real-time communication using: WebSocket connections for low-latency client communication Actor-based messaging for scalable concurrent processing Redis pub/sub for distributed messagin",
    "url": "/docs\\community\\technical-documentation\\server\\index",
    "type": "docs",
    "tags": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "keywords": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust",
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "server",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 184,
    "title": "server",
    "description": "Technical documentation for PianoRhythm Server",
    "content": "g across server instances Scalability Design Horizontal scaling through stateless server instances Redis clustering for distributed state management Kubernetes orchestration for container management Load balancing for traffic distribution Security Model JWT authentication with Ed25519 signatures Rol",
    "url": "/docs\\community\\technical-documentation\\server\\index",
    "type": "docs",
    "tags": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "keywords": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust",
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "server",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 185,
    "title": "server",
    "description": "Technical documentation for PianoRhythm Server",
    "content": "e-based authorization (Guest, Member, Pro, Moderator, Admin) Rate limiting to prevent abuse Input validation and sanitization 📊 Monitoring and Observability The server includes comprehensive monitoring: Prometheus metrics for performance monitoring Structured logging with JSON format Sentry integra",
    "url": "/docs\\community\\technical-documentation\\server\\index",
    "type": "docs",
    "tags": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "keywords": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust",
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "server",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 186,
    "title": "server",
    "description": "Technical documentation for PianoRhythm Server",
    "content": "tion for error tracking Health check endpoints for load balancers 🛠️ Development Tools Key tools and technologies used: Rust - Systems programming language Actix Web - High-performance web framework Redis - In-memory data structure store MongoDB - Document database Protobuf - Binary serialization D",
    "url": "/docs\\community\\technical-documentation\\server\\index",
    "type": "docs",
    "tags": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "keywords": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust",
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "server",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 187,
    "title": "server",
    "description": "Technical documentation for PianoRhythm Server",
    "content": "ocker - Containerization Kubernetes - Container orchestration 📝 Documentation Standards This documentation follows these principles: Comprehensive - Covers all aspects of the system Up-to-date - Maintained alongside code changes Practical - Includes working examples and code snippets Accessible - W",
    "url": "/docs\\community\\technical-documentation\\server\\index",
    "type": "docs",
    "tags": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "keywords": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust",
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "server",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 188,
    "title": "server",
    "description": "Technical documentation for PianoRhythm Server",
    "content": "ritten for different skill levels and roles 🔄 Keeping Documentation Updated When making changes to the server: Update relevant documentation files Add new sections for new features Update API documentation for interface changes Review and update deployment guides as needed 📞 Getting Help If you ca",
    "url": "/docs\\community\\technical-documentation\\server\\index",
    "type": "docs",
    "tags": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "keywords": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust",
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "server",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 189,
    "title": "server",
    "description": "Technical documentation for PianoRhythm Server",
    "content": "n't find what you're looking for: Check the specific section most relevant to your needs Search through the documentation using your browser's find function Create an issue on GitHub for documentation improvements Ask questions in the development Discord channel This documentation is maintained by t",
    "url": "/docs\\community\\technical-documentation\\server\\index",
    "type": "docs",
    "tags": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "keywords": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust",
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "server",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 190,
    "title": "server",
    "description": "Technical documentation for PianoRhythm Server",
    "content": "he PianoRhythm development team and updated regularly to reflect the current state of the system.",
    "url": "/docs\\community\\technical-documentation\\server\\index",
    "type": "docs",
    "tags": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "keywords": [
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust",
      "server",
      "documentation",
      "technical",
      "guides",
      "architecture",
      "development",
      "pianorhythm",
      "rust"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "server",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 191,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "Testing Guide This guide covers the comprehensive testing strategy for PianoRhythm Server, including unit tests, integration tests, performance tests, and testing best practices. 🧪 Testing Philosophy Testing Pyramid Unit Tests (70%) - Fast, isolated component testing Integration Tests (20%) - API a",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 192,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "nd service integration testing End-to-End Tests (10%) - Full system workflow testing Testing Principles Fast Feedback - Tests should run quickly during development Reliable - Tests should be deterministic and not flaky Maintainable - Tests should be easy to understand and modify Comprehensive - Crit",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 193,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "ical paths should have good test coverage 🏗️ Test Structure Test Organization ` src/ ├── lib.rs ├── main.rs ├── actors/ │ ├── mod.rs │ ├── pianorhythm_state.rs │ └── tests/ # Unit tests for actors │ ├── mod.rs │ └── pianorhythm_state_tests.rs ├── routes/ │ ├── mod.rs │ ├── api.rs │ └── tests/ # Uni",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 194,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "t tests for routes │ └── api_tests.rs └── tests/ # Integration tests ├── common/ │ ├── mod.rs │ └── test_helpers.rs ├── api_tests.rs ├── websocket_tests.rs └── performance_tests.rs ` Test Configuration `toml Cargo.toml dev-dependencies] actix-test = \"0.1.2\" actix-codec = \"0.5.1\" awc = \"3.2.0\" test-l",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 195,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "og = \"0.2.13\" test-env-helpers = \"0.2.2\" tokio-test = \"0.4\" mockall = \"0.11\" wiremock = \"0.5\" criterion = \"0.5\" ` 🔬 Unit Testing Actor Testing `rust // src/actors/tests/pianorhythm_state_tests.rs #[cfg(test)] mod tests { use super::*; use crate::actors::pianorhythm_state::PianoRhythmState; use crat",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 196,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "e::connections::stores::memory::MemoryStore; use std::sync::Arc; fn create_test_state() -> PianoRhythmState { let config = Arc::new(get_test_configuration()); let store = MemoryStore::new(); PianoRhythmState::new(config, store) } #[tokio::test] async fn test_save_user() { let state = create_test_sta",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 197,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "te(); let user_dbo = create_test_user(); let result = state.save_user(&user_dbo); assert!(result.is_ok()); let retrieved_user = state.get_user(&user_dbo.socket_id).unwrap(); assert_eq!(retrieved_user.username, user_dbo.username); } #[tokio::test] async fn test_add_user_to_room() { let state = create",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 198,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "_test_state(); let room_dbo = create_test_room(); let user_dbo = create_test_user(); // Save room and user first state.save_room(&room_dbo).unwrap(); state.save_user(&user_dbo).unwrap(); let result = state.add_user_to_room(&room_dbo.room_id, &user_dbo.socket_id); assert!(result.is_ok()); let users_i",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 199,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "n_room = state.get_users_in_room(&room_dbo.room_id).unwrap(); assert_eq!(users_in_room.len(), 1); assert_eq!(users_in_room[0].socket_id, user_dbo.socket_id); } } ` Route Testing `rust // src/routes/tests/api_tests.rs #[cfg(test)] mod tests { use super::*; use actix_web::{test, web, App}; use crate::",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 200,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "routes::api; #[actix_web::test] async fn test_validate_token_success() { let app = test::init_service( App::new() .service(api::validate_token) ).await; let req = test::TestRequest::get() .uri(\"/validate-token\") .insert_header((\"Authorization\", \"Bearer valid-jwt-token\")) .to_request(); let resp = te",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 201,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "st::call_service(&app, req).await; assert!(resp.status().is_success()); } #[actix_web::test] async fn test_validate_token_unauthorized() { let app = test::init_service( App::new() .service(api::validate_token) ).await; let req = test::TestRequest::get() .uri(\"/validate-token\") .to_request(); let res",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 202,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "p = test::call_service(&app, req).await; assert_eq!(resp.status(), 401); } } ` Mock Testing `rust // Using mockall for mocking dependencies use mockall::predicate::*; use mockall::mock; mock! { DatabaseService { async fn get_user(&self, user_id: &str) -> Result; async fn save_user(&self, user: &User",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 203,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "Dbo) -> Result; } } #[tokio::test] async fn test_user_service_with_mock() { let mut mock_db = MockDatabaseService::new(); mock_db .expect_get_user() .with(eq(\"test_user\")) .times(1) .returning(|_| Ok(create_test_user())); let user_service = UserService::new(Box::new(mock_db)); let result = user_serv",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 204,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "ice.get_user(\"test_user\").await; assert!(result.is_ok()); } ` 🔗 Integration Testing API Integration Tests `rust // tests/api_tests.rs use actix_web::{test, web, App}; use pianorhythm::create_app; use test_env_helpers::*; #[actix_web::test] async fn test_user_registration_flow() { let app = test::in",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 205,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "it_service(create_app().await).await; // Test user registration let registration_data = json!({ \"username\": \"testuser\", \"email\": \"test@example.com\", \"password\": \"securepassword\" }); let req = test::TestRequest::post() .uri(\"/api/auth/register\") .set_json(&registration_data) .to_request(); let resp =",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 206,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": " test::call_service(&app, req).await; assert!(resp.status().is_success()); // Test user login let login_data = json!({ \"username\": \"testuser\", \"password\": \"securepassword\" }); let req = test::TestRequest::post() .uri(\"/api/auth/login\") .set_json(&login_data) .to_request(); let resp = test::call_serv",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 207,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "ice(&app, req).await; assert!(resp.status().is_success()); let body: serde_json::Value = test::read_body_json(resp).await; assert!(body[\"data\".is_string()); } ` WebSocket Integration Tests `rust // tests/websocket_tests.rs use actix_codec::Framed; use actix_web::{test, web, App}; use awc::ws::{Codec",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 208,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": ", Frame, Message}; use futures_util::{SinkExt, StreamExt}; #[actix_web::test] async fn test_websocket_connection() { let mut srv = actix_test::start(|| { App::new().service(web::resource(\"/ws\").route(web::get().to(websocket_handler))) }); let mut framed = srv.ws_at(\"/ws\").await.unwrap(); // Send tes",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 209,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "t message framed .send(Message::Text(\"test message\".into())) .await .unwrap(); // Receive response let item = framed.next().await.unwrap().unwrap(); match item { Frame::Text(txt) => { assert_eq!(txt, \"echo: test message\"); } _ => panic!(\"Unexpected frame type\"), } } ` Database Integration Tests `rus",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 210,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "t // tests/database_tests.rs use mongodb::{Client, options::ClientOptions}; use pianorhythm::connections::mongo_services::users_service::UsersService; #[tokio::test] async fn test_user_crud_operations() { let client_options = ClientOptions::parse(\"mongodb://localhost:27017\").await.unwrap(); let clie",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 211,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "nt = Client::with_options(client_options).unwrap(); let db = client.database(\"pianorhythm_test\"); let users_service = UsersService::new(client, &db); // Create user let user = create_test_user(); let result = users_service.create_user(&user).await; assert!(result.is_ok()); // Read user let retrieved",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 212,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "_user = users_service.get_user(&user.user_id).await.unwrap(); assert_eq!(retrieved_user.username, user.username); // Update user let mut updated_user = retrieved_user; updated_user.username = \"updated_username\".to_string(); let result = users_service.update_user(&updated_user).await; assert!(result.",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 213,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "is_ok()); // Delete user let result = users_service.delete_user(&user.user_id).await; assert!(result.is_ok()); } ` ⚡ Performance Testing Benchmark Tests `rust // benches/performance_benchmarks.rs use criterion::{black_box, criterion_group, criterion_main, Criterion}; use pianorhythm::actors::pianorh",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 214,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "ythm_state::PianoRhythmState; fn benchmark_user_operations(c: &mut Criterion) { let state = create_test_state(); let user = create_test_user(); c.bench_function(\"save_user\", |b| { b.iter(|| { state.save_user(black_box(&user)).unwrap(); }) }); c.bench_function(\"get_user\", |b| { state.save_user(&user)",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 215,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": ".unwrap(); b.iter(|| { state.get_user(black_box(&user.socket_id)).unwrap(); }) }); } criterion_group!(benches, benchmark_user_operations); criterion_main!(benches); ` Load Testing `rust // tests/load_tests.rs use std::time::Duration; use tokio::time::sleep; #[tokio::test] #[ignore] // Run with --ign",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 216,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "ored flag async fn test_concurrent_websocket_connections() { let server_url = \"ws://localhost:8080/api/websocket/test\"; let concurrent_connections = 100; let mut handles = Vec::new(); for i in 0..concurrent_connections { let handle = tokio::spawn(async move { let (ws_stream, _) = tokio_tungstenite::",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 217,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "connect_async(server_url) .await .expect(\"Failed to connect\"); // Simulate user activity sleep(Duration::from_secs(30)).await; }); handles.push(handle); } // Wait for all connections to complete for handle in handles { handle.await.unwrap(); } } ` 🛠️ Test Utilities Test Helpers `rust // tests/commo",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 218,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "n/test_helpers.rs use pianorhythm::models::*; use pianorhythm::config::*; use uuid::Uuid; pub fn create_test_user() -> UserDbo { UserDbo { user_id: Uuid::new_v4().to_string(), username: \"testuser\".to_string(), user_tag: \"testuser#1234\".to_string(), socket_id: Uuid::new_v4().to_string(), room_id: Non",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 219,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "e, status: UserStatus::Online, roles: UserRoles::default(), settings: UserSettings::default(), billing_settings: UserBillingSettings::default(), last_seen: chrono::Utc::now(), } } pub fn create_test_room() -> RoomStateDbo { RoomStateDbo { room_id: Uuid::new_v4().to_string(), room_name: \"Test Room\".t",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 220,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "o_string(), room_owner: \"testuser\".to_string(), room_type: RoomType::Public, settings: RoomSettings::default(), created_at: chrono::Utc::now(), last_activity: chrono::Utc::now(), } } pub fn get_test_configuration() -> PianoRhythmConfig { PianoRhythmConfig { server_name: \"test\".to_string(), redis_url",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 29
  },
  {
    "objectID": 221,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": ": \"redis://localhost:6379\".to_string(), redis_prefix: \"pianorhythm_test\".to_string(), // ... other test configuration } } ` Test Database Setup `rust // tests/common/test_db.rs use once_cell::sync::Lazy; use std::sync::Mutex; static TEST_DB_COUNTER: Lazy> = Lazy::new(|| Mutex::new(0)); pub fn get_te",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 30
  },
  {
    "objectID": 222,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "st_db_name() -> String { let mut counter = TEST_DB_COUNTER.lock().unwrap(); *counter += 1; format!(\"pianorhythm_test_{}\", *counter) } pub async fn setup_test_database() -> mongodb::Database { let client_options = mongodb::options::ClientOptions::parse(\"mongodb://localhost:27017\") .await .unwrap(); l",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 31
  },
  {
    "objectID": 223,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "et client = mongodb::Client::with_options(client_options).unwrap(); let db_name = get_test_db_name(); client.database(&db_name) } pub async fn cleanup_test_database(db: &mongodb::Database) { db.drop(None).await.unwrap(); } ` 🚀 Running Tests Test Commands `bash Run all tests cargo test Run unit test",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 32
  },
  {
    "objectID": 224,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "s only cargo test --lib Run integration tests only cargo test --test integration Run specific test cargo test test_user_authentication Run tests with output cargo test -- --nocapture Run ignored tests (like load tests) cargo test -- --ignored Run tests with coverage cargo tarpaulin --out Html Run be",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 33
  },
  {
    "objectID": 225,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "nchmarks cargo bench ` Test Scripts `bash #!/bin/bash scripts/run-tests.sh echo \"Starting test databases...\" docker run -d --name redis-test -p 6380:6379 redis:7-alpine docker run -d --name mongo-test -p 27018:27017 mongo:7 echo \"Waiting for databases to start...\" sleep 5 echo \"Running unit tests...",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 34
  },
  {
    "objectID": 226,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "\" cargo test --lib echo \"Running integration tests...\" MONGODB_URL=mongodb://localhost:27018/test \\ REDIS_URL=redis://localhost:6380 \\ cargo test --test integration echo \"Running performance tests...\" cargo bench echo \"Cleaning up test databases...\" docker stop redis-test mongo-test docker rm redis-",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 35
  },
  {
    "objectID": 227,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "test mongo-test echo \"All tests completed!\" ` 📊 Test Coverage Coverage Configuration `toml tarpaulin.toml [tool.tarpaulin.coverage] exclude = [ \"src/main.rs\", \"src/bin/*\", \"tests/*\", \"benches/*\" ] ignore-panics = true count = true line = true branch = true ` Coverage Reports `bash Generate HTML cov",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 36
  },
  {
    "objectID": 228,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "erage report cargo tarpaulin --out Html Generate XML coverage report (for CI) cargo tarpaulin --out Xml Upload to codecov bash <(curl -s https://codecov.io/bash) ` This testing guide provides a comprehensive framework for ensuring code quality and reliability in PianoRhythm Server through thorough t",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 37
  },
  {
    "objectID": 229,
    "title": "Testing Guide",
    "description": "Comprehensive testing strategy with unit tests, integration tests, and performance testing",
    "content": "esting at all levels.",
    "url": "/docs\\community\\technical-documentation\\server\\development\\testing",
    "type": "docs",
    "tags": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices"
    ],
    "keywords": [
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "development",
      "best-practices",
      "testing",
      "unit-tests",
      "integration-tests",
      "performance",
      "quality-assurance",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 38
  },
  {
    "objectID": 230,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "Development Setup Guide This guide will help you set up a local development environment for PianoRhythm Server, including all dependencies, tools, and configuration needed for development. 🛠️ Prerequisites System Requirements Operating System: Windows 10+, macOS 10.15+, or Linux (Ubuntu 20.04+) RAM",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 231,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": ": 8GB minimum, 16GB recommended Storage: 10GB free space Network: Stable internet connection for dependencies Required Software Rust Development Environment `bash Install Rust using rustup curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh Restart shell or source the environment source ~",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 232,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "/.cargo/env Verify installation rustc --version cargo --version Install required Rust version (see rust-toolchain.toml) rustup install 1.77 rustup default 1.77 ` Database Systems `bash Redis (using Docker) docker run -d --name redis-dev -p 6379:6379 redis:7-alpine MongoDB (using Docker) docker run -",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 233,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "d --name mongo-dev -p 27017:27017 \\ -e MONGO_INITDB_ROOT_USERNAME=admin \\ -e MONGO_INITDB_ROOT_PASSWORD=password \\ mongo:7 Or install locally: - Redis: https://redis.io/download - MongoDB: https://www.mongodb.com/try/download/community ` Development Tools `bash Git (if not already installed) Windows",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 234,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": ": https://git-scm.com/download/win macOS: brew install git Linux: sudo apt-get install git Docker (optional but recommended) https://docs.docker.com/get-docker/ VS Code (recommended IDE) https://code.visualstudio.com/ ` 📥 Project Setup Clone Repository `bash Clone the repository git clone https://g",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 235,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "ithub.com/PianoRhythm/pianorhythm-server.git cd pianorhythm-server Check out development branch (if applicable) git checkout develop ` Install Dependencies `bash Install Rust dependencies cargo build Install development dependencies cargo install cargo-watch # Auto-rebuild on file changes cargo inst",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 236,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "all cargo-audit # Security audit cargo install cargo-tarpaulin # Code coverage ` Environment Configuration `bash Copy environment template cp .env.example .env Edit environment variables Use your preferred editor (nano, vim, code, etc.) code .env ` Sample Development .env File `bash .env RUST_LOG=de",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 237,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "bug SERVER_NAME=development PORT=8080 HOST=127.0.0.1 Database URLs MONGODB_URL=mongodb://admin:password@localhost:27017/pianorhythm_dev REDIS_URL=redis://localhost:6379 Authentication JWT_SECRET=dev-jwt-secret-change-in-production SESSION_SECRET=dev-session-secret-change-in-production External Servi",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 238,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "ces (use test keys) STRIPE_SECRET_KEY=sk_test_your_test_key_here DISCORD_BOT_TOKEN=your_test_bot_token_here Logging SEQ_URL=http://localhost:5341 LOG_LEVEL=debug LOG_FORMAT=text Development flags ENABLE_CORS=true COOKIE_SECURE=false ` 🚀 Running the Development Server Start Required Services `bash S",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 239,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "tart Redis (if using Docker) docker start redis-dev Start MongoDB (if using Docker) docker start mongo-dev Optional: Start Seq for logging docker run -d --name seq-dev -p 5341:80 -e ACCEPT_EULA=Y datalust/seq:latest ` Run the Server `bash Standard run cargo run Run with auto-reload on file changes c",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 240,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "argo watch -x run Run with specific log level RUST_LOG=debug cargo run Run tests cargo test Run with release optimizations (slower compile, faster runtime) cargo run --release ` Verify Installation `bash Check server health curl http://localhost:8080/health Expected response: {\"status\":\"healthy\",\"ti",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 241,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "mestamp\":\"2024-01-01T00:00:00Z\"} ` 🔧 IDE Configuration VS Code Setup Install recommended extensions: `json // .vscode/extensions.json { \"recommendations\": [ \"rust-lang.rust-analyzer\", \"vadimcn.vscode-lldb\", \"serayuzgur.crates\", \"tamasfe.even-better-toml\", \"ms-vscode.vscode-json\" ] } ` VS Code Setti",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 242,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "ngs `json // .vscode/settings.json { \"rust-analyzer.cargo.features\": \"all\", \"rust-analyzer.checkOnSave.command\": \"clippy\", \"rust-analyzer.cargo.loadOutDirsFromCheck\": true, \"rust-analyzer.procMacro.enable\": true, \"files.watcherExclude\": { \"/target/\": true } } ` Debug Configuration `json // .vscode/l",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 243,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "aunch.json { \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"lldb\", \"request\": \"launch\", \"name\": \"Debug PianoRhythm Server\", \"cargo\": { \"args\": [\"build\", \"--bin=pianorhythm\"], \"filter\": { \"name\": \"pianorhythm\", \"kind\": \"bin\" } }, \"args\": [], \"cwd\": \"${workspaceFolder}\", \"env\": { \"RUST_LOG\": \"debu",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 244,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "g\" } } ] } ` 🧪 Development Workflow Code Quality Tools `bash Format code cargo fmt Lint code cargo clippy Check for security vulnerabilities cargo audit Run all tests cargo test Run tests with coverage cargo tarpaulin --out Html Check documentation cargo doc --open ` Git Hooks Setup `bash Install p",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 245,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "re-commit hooks cat > .git/hooks/pre-commit /dev/null || { echo \"Starting Docker services...\" docker run -d --name redis-dev -p 6379:6379 redis:7-alpine docker run -d --name mongo-dev -p 27017:27017 \\ -e MONGO_INITDB_ROOT_USERNAME=admin \\ -e MONGO_INITDB_ROOT_PASSWORD=password \\ mongo:7 docker run -",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 246,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "d --name seq-dev -p 5341:80 -e ACCEPT_EULA=Y datalust/seq:latest } Wait for services to be ready echo \"Waiting for services to start...\" sleep 5 Run database migrations/setup cargo run --bin setup-db echo \"Development environment ready!\" ` `bash scripts/test-all.sh #!/bin/bash echo \"Running comprehe",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 247,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "nsive tests...\" Format check cargo fmt --all -- --check || exit 1 Lint check cargo clippy -- -D warnings || exit 1 Unit tests cargo test --lib || exit 1 Integration tests cargo test --test integration || exit 1 Documentation tests cargo test --doc || exit 1 echo \"All tests passed!\" ` 🐛 Debugging Lo",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 248,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "gging Configuration `rust // For detailed debugging, set in your .env: RUST_LOG=debug,pianorhythm=trace,actix_web=debug // Or set specific modules: RUST_LOG=pianorhythm::websocket=trace,pianorhythm::actors=debug ` Common Debug Commands `bash Debug with specific log levels RUST_LOG=trace cargo run De",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 249,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "bug with backtrace on panic RUST_BACKTRACE=1 cargo run Debug with full backtrace RUST_BACKTRACE=full cargo run Profile memory usage cargo run --features=profiling Debug WebSocket connections websocat ws://localhost:8080/api/websocket/test_payload ` Database Debugging `bash Connect to MongoDB docker ",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 250,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "exec -it mongo-dev mongosh -u admin -p password Connect to Redis docker exec -it redis-dev redis-cli View Redis keys docker exec -it redis-dev redis-cli KEYS \"pianorhythm:*\" ` 🔄 Hot Reloading Cargo Watch Configuration `bash Watch for changes and restart cargo watch -x run Watch specific files cargo",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 251,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": " watch -w src -x run Clear screen on restart cargo watch -c -x run Run tests on change cargo watch -x test ` Custom Watch Script `bash scripts/watch.sh #!/bin/bash cargo watch \\ --clear \\ --watch src \\ --watch Cargo.toml \\ --shell 'cargo run || echo \"Build failed\"' ` 📊 Performance Profiling Develop",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 252,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "ment Profiling `bash Install profiling tools cargo install flamegraph cargo install cargo-profdata Generate flame graph cargo flamegraph --bin pianorhythm Profile with perf (Linux) perf record --call-graph=dwarf cargo run --release perf report ` 🧪 Testing Setup Test Database Setup `bash Create test",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 253,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": " database docker run -d --name mongo-test -p 27018:27017 \\ -e MONGO_INITDB_ROOT_USERNAME=admin \\ -e MONGO_INITDB_ROOT_PASSWORD=password \\ mongo:7 Test environment variables export MONGODB_URL_TEST=mongodb://admin:password@localhost:27018/pianorhythm_test export REDIS_URL_TEST=redis://localhost:6380 ",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 254,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "` Running Specific Tests `bash Run unit tests only cargo test --lib Run integration tests cargo test --test integration Run specific test cargo test test_user_authentication Run tests with output cargo test -- --nocapture Run tests in parallel cargo test -- --test-threads=4 ` This development setup ",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 255,
    "title": "Development Setup Guide",
    "description": "Local development environment setup with dependencies, tools, and configuration",
    "content": "guide provides everything needed to get started with PianoRhythm Server development, from initial setup to advanced debugging and profiling techniques.",
    "url": "/docs\\community\\technical-documentation\\server\\development\\setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "getting-started",
      "development",
      "setup",
      "environment",
      "rust",
      "dependencies",
      "tools",
      "configuration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 256,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "Contributing Guidelines Welcome to PianoRhythm Server! We appreciate your interest in contributing to our project. This guide outlines the process for contributing code, reporting issues, and collaborating effectively. 🤝 Code of Conduct Our Commitment We are committed to providing a welcoming and i",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 257,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "nclusive environment for all contributors, regardless of background, experience level, or identity. Expected Behavior Be respectful in all interactions Be constructive when providing feedback Be collaborative and help others learn Be patient with newcomers and questions Unacceptable Behavior Harassm",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 258,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "ent, discrimination, or offensive language Personal attacks or trolling Spam or off-topic discussions Sharing private information without consent 🐛 Reporting Issues Before Reporting Search existing issues to avoid duplicates Check documentation for known solutions Test with latest version if possib",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 259,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "le Gather relevant information (logs, environment, steps to reproduce) Issue Template `markdown Bug Report Description A clear description of the bug. Steps to Reproduce Step one Step two Step three Expected Behavior What should happen. Actual Behavior What actually happens. Environment OS: e.g., Wi",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 260,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "ndows 10, Ubuntu 20.04] Rust version: [e.g., 1.77.0] Server version: [e.g., v0.2.0] Additional Context Any other relevant information, logs, or screenshots. ` Feature Requests `markdown Feature Request Problem Statement What problem does this feature solve? Proposed Solution Describe your proposed s",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 261,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "olution. Alternatives Considered Other approaches you've considered. Additional Context Any other relevant information or examples. ` 🔧 Development Process Getting Started Fork the repository on GitHub Clone your fork locally Set up development environment (see [Development Setup) Create a feature ",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 262,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "branch from develop Make your changes following our coding standards Test thoroughly (see Testing Guide) Submit a pull request Branch Naming Convention feature/description - New features bugfix/description - Bug fixes hotfix/description - Critical production fixes docs/description - Documentation up",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 263,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "dates refactor/description - Code refactoring Commit Message Format ` type(scope): brief description Detailed explanation of the change, including: Why the change was made What was changed Any breaking changes or migration notes Closes #123 ` Types: feat - New feature fix - Bug fix docs - Documentat",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 264,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "ion changes style - Code style changes (formatting, etc.) refactor - Code refactoring test - Adding or updating tests chore - Maintenance tasks Examples: ` feat(websocket): add room password validation Add password validation for private rooms to ensure only authorized users can join protected rooms",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 265,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": ". Implement password hashing and verification Add validation middleware for room join requests Update WebSocket message handling for password errors Closes #456 ` 📝 Coding Standards Rust Style Guide We follow the official Rust style guide with these additions: Code Formatting `bash Format code befo",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 266,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "re committing cargo fmt Check formatting cargo fmt -- --check ` Linting `bash Run clippy for linting cargo clippy -- -D warnings Fix common issues automatically cargo clippy --fix ` Documentation `rust /// Authenticates a user with the provided credentials. /// /// # Arguments /// /// * credentials ",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 267,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "- The user's login credentials /// * state - The application state containing database connections /// /// # Returns /// /// Returns Ok(UserSession) on successful authentication, /// or Err(AuthError) if authentication fails. /// /// # Examples /// /// `rust /// let credentials = LoginCredentials { ",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 268,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "/// username: \"user123\".to_string(), /// password: \"secure_password\".to_string(), /// }; /// /// match authenticate_user(credentials, &state).await { /// Ok(session) => println!(\"User authenticated: {}\", session.user_id), /// Err(e) => eprintln!(\"Authentication failed: {}\", e), /// } /// ` pub async",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 269,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": " fn authenticate_user( credentials: LoginCredentials, state: &AppState, ) -> Result { // Implementation } ` Error Handling `rust // Use Result types for fallible operations pub fn parse_user_id(input: &str) -> Result { input.parse().map_err(ParseError::InvalidFormat) } // Use custom error types #[de",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 270,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "rive(Debug, thiserror::Error)] pub enum AuthError { #[error(\"Invalid credentials\")] InvalidCredentials, #[error(\"User not found: {user_id}\")] UserNotFound { user_id: String }, #[error(\"Database error: {0}\")] Database(#[from] DatabaseError), } ` Testing `rust #[cfg(test)] mod tests { use super::*; #[",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 271,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "tokio::test] async fn test_authenticate_user_success() { // Arrange let credentials = create_valid_credentials(); let state = create_test_state().await; // Act let result = authenticate_user(credentials, &state).await; // Assert assert!(result.is_ok()); let session = result.unwrap(); assert_eq!(sess",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 272,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "ion.user_id, \"expected_user_id\"); } #[tokio::test] async fn test_authenticate_user_invalid_credentials() { // Arrange let credentials = create_invalid_credentials(); let state = create_test_state().await; // Act let result = authenticate_user(credentials, &state).await; // Assert assert!(matches!(re",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 273,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "sult, Err(AuthError::InvalidCredentials))); } } ` Performance Guidelines Avoid unnecessary allocations - Use string slices when possible Use appropriate data structures - HashMap for lookups, Vec for sequences Profile critical paths - Use benchmarks for performance-sensitive code Minimize database q",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 274,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "ueries - Batch operations when possible Cache frequently accessed data - Use Redis for hot data Security Guidelines Validate all inputs - Never trust user input Use parameterized queries - Prevent SQL injection Hash passwords properly - Use bcrypt or similar Sanitize outputs - Prevent XSS attacks Lo",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 275,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "g security events - Track authentication attempts Follow principle of least privilege - Minimal required permissions 🔍 Pull Request Process Before Submitting Ensure tests pass - Run full test suite Update documentation - Include relevant docs updates Check code coverage - Maintain or improve covera",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 276,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "ge Verify formatting - Run cargo fmt and cargo clippy Test manually - Verify changes work as expected Pull Request Template `markdown Description Brief description of changes made. Type of Change [ ] Bug fix (non-breaking change that fixes an issue) [ ] New feature (non-breaking change that adds fun",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 277,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "ctionality) [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected) [ ] Documentation update Testing [ ] Unit tests added/updated [ ] Integration tests added/updated [ ] Manual testing completed [ ] Performance impact assessed Checklist [ ] Code follows p",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 278,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "roject style guidelines [ ] Self-review completed [ ] Code is commented where necessary [ ] Documentation updated [ ] Tests pass locally [ ] No new warnings introduced Related Issues Closes #123 Related to #456 ` Review Process Automated checks - CI/CD pipeline runs tests and checks Code review - Te",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 279,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "am members review code quality and design Testing - Reviewers may test changes locally Approval - At least one approval required from maintainers Merge - Squash and merge to maintain clean history Review Criteria Functionality - Does the code work as intended? Code Quality - Is the code clean, reada",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 280,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "ble, and maintainable? Performance - Are there any performance implications? Security - Are there any security concerns? Testing - Is the code adequately tested? Documentation - Is the code properly documented? 🏗️ Architecture Decisions Proposing Changes For significant architectural changes: Creat",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 281,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "e an RFC (Request for Comments) issue Discuss with maintainers before implementation Consider backwards compatibility Plan migration strategy if needed Update architecture documentation RFC Template `markdown RFC: [Title] Status: Draft | Under Review | Accepted | Rejected Summary Brief explanation o",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 282,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "f the proposed change. Motivation Why is this change needed? Detailed Design Technical details of the proposed solution. Alternatives Considered Other approaches that were considered. Migration Strategy How will existing systems be migrated? Unresolved Questions What questions remain to be resolved?",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 283,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": " ` 🎯 Contribution Areas High-Priority Areas Performance optimization - Improve server performance Test coverage - Increase test coverage Documentation - Improve and expand documentation Security - Enhance security measures Monitoring - Add better observability Good First Issues Look for issues labe",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 284,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "led good-first-issue for newcomer-friendly tasks: Documentation improvements Simple bug fixes Test additions Code cleanup Advanced Contributions New features - Major functionality additions Architecture improvements - System design enhancements Performance optimizations - Critical path improvements ",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 285,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "Security enhancements - Security feature additions 📞 Getting Help Communication Channels GitHub Issues - Bug reports and feature requests GitHub Discussions - General questions and discussions Discord - Real-time chat with the community Email - Direct contact with maintainers Mentorship New contrib",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 29
  },
  {
    "objectID": 286,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "utors can request mentorship: Pair programming sessions Code review guidance Architecture discussions Career advice in open source 🏆 Recognition Contributor Recognition Contributors list - All contributors acknowledged Release notes - Major contributions highlighted Community spotlight - Featured c",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 30
  },
  {
    "objectID": 287,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": "ontributor posts Swag - Stickers and merchandise for active contributors Becoming a Maintainer Active contributors may be invited to become maintainers: Consistent contributions over time Code quality and review skills Community involvement and helpfulness Technical expertise in relevant areas Thank",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 31
  },
  {
    "objectID": 288,
    "title": "Contributing Guidelines",
    "description": "Code standards, contribution workflow, and collaboration guidelines for PianoRhythm Server",
    "content": " you for contributing to PianoRhythm Server! Your contributions help make the platform better for everyone.",
    "url": "/docs\\community\\technical-documentation\\server\\development\\contributing",
    "type": "docs",
    "tags": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community"
    ],
    "keywords": [
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "development",
      "community",
      "contributing",
      "guidelines",
      "code-standards",
      "workflow",
      "collaboration",
      "open-source",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Contributing Guidelines",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 32
  },
  {
    "objectID": 289,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "Kubernetes Deployment Guide This guide covers deploying PianoRhythm Server on Kubernetes, including configuration, scaling, and production best practices. ☸️ Kubernetes Overview Architecture Components Deployments - Application pods and replica management Services - Internal and external service dis",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 290,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "covery Ingress - External traffic routing and SSL termination ConfigMaps - Configuration management Secrets - Sensitive data management StatefulSets - Database persistence Cluster Requirements Kubernetes Version: 1.24+ Node Resources: 2 CPU, 4GB RAM minimum per node Storage: Persistent volumes for d",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 291,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "atabases Networking: CNI plugin (Calico, Flannel, etc.) 📁 Kubernetes Manifests Structure The project includes comprehensive Kubernetes manifests in the kubernetes/ directory: ` kubernetes/ ├── namespaces/ │ └── pianorhythm.yaml ├── configs/ │ ├── app-config.yaml │ └── logging-config.yaml ├── secret",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 292,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "s/ │ ├── app-secrets.yaml │ └── tls-secrets.yaml ├── deployments/ │ ├── pianorhythm-server.yaml │ ├── redis.yaml │ └── mongodb.yaml ├── services/ │ ├── pianorhythm-service.yaml │ ├── redis-service.yaml │ └── mongodb-service.yaml ├── ingresses/ │ └── pianorhythm-ingress.yaml └── stateful-sets/ └── mo",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 293,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "ngodb-statefulset.yaml ` 🚀 Basic Deployment Namespace Creation `yaml kubernetes/namespaces/pianorhythm.yaml apiVersion: v1 kind: Namespace metadata: name: pianorhythm labels: name: pianorhythm environment: production ` Application Deployment `yaml kubernetes/deployments/pianorhythm-server.yaml apiV",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 294,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "ersion: apps/v1 kind: Deployment metadata: name: pianorhythm-server namespace: pianorhythm labels: app: pianorhythm-server spec: replicas: 3 selector: matchLabels: app: pianorhythm-server template: metadata: labels: app: pianorhythm-server spec: containers: name: pianorhythm-server image: pianorhyth",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 295,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "m-server:latest ports: containerPort: 8080 env: name: RUST_LOG value: \"info\" name: REDIS_URL value: \"redis://redis-service:6379\" name: MONGODB_URL valueFrom: secretKeyRef: name: app-secrets key: mongodb-url name: JWT_SECRET valueFrom: secretKeyRef: name: app-secrets key: jwt-secret resources: reques",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 296,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "ts: memory: \"256Mi\" cpu: \"250m\" limits: memory: \"512Mi\" cpu: \"500m\" livenessProbe: httpGet: path: /health port: 8080 initialDelaySeconds: 30 periodSeconds: 10 readinessProbe: httpGet: path: /health port: 8080 initialDelaySeconds: 5 periodSeconds: 5 ` Service Configuration `yaml kubernetes/services/p",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 297,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "ianorhythm-service.yaml apiVersion: v1 kind: Service metadata: name: pianorhythm-service namespace: pianorhythm spec: selector: app: pianorhythm-server ports: protocol: TCP port: 80 targetPort: 8080 type: ClusterIP ` 🗄️ Database Deployment Redis Deployment `yaml kubernetes/deployments/redis.yaml ap",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 298,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "iVersion: apps/v1 kind: Deployment metadata: name: redis namespace: pianorhythm spec: replicas: 1 selector: matchLabels: app: redis template: metadata: labels: app: redis spec: containers: name: redis image: redis:7-alpine ports: containerPort: 6379 command: redis-server --requirepass $(REDIS_PASSWO",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 299,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "RD) env: name: REDIS_PASSWORD valueFrom: secretKeyRef: name: app-secrets key: redis-password resources: requests: memory: \"128Mi\" cpu: \"100m\" limits: memory: \"256Mi\" cpu: \"200m\" volumeMounts: name: redis-data mountPath: /data volumes: name: redis-data persistentVolumeClaim: claimName: redis-pvc ` Mo",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 300,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "ngoDB StatefulSet `yaml kubernetes/stateful-sets/mongodb-statefulset.yaml apiVersion: apps/v1 kind: StatefulSet metadata: name: mongodb namespace: pianorhythm spec: serviceName: mongodb-service replicas: 1 selector: matchLabels: app: mongodb template: metadata: labels: app: mongodb spec: containers:",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 301,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": " name: mongodb image: mongo:7 ports: containerPort: 27017 env: name: MONGO_INITDB_ROOT_USERNAME value: \"admin\" name: MONGO_INITDB_ROOT_PASSWORD valueFrom: secretKeyRef: name: app-secrets key: mongo-password name: MONGO_INITDB_DATABASE value: \"pianorhythm\" resources: requests: memory: \"512Mi\" cpu: \"2",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 302,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "50m\" limits: memory: \"1Gi\" cpu: \"500m\" volumeMounts: name: mongodb-data mountPath: /data/db volumeClaimTemplates: metadata: name: mongodb-data spec: accessModes: [\"ReadWriteOnce\"] resources: requests: storage: 10Gi ` 🔧 Configuration Management ConfigMap `yaml kubernetes/configs/app-config.yaml apiV",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 303,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "ersion: v1 kind: ConfigMap metadata: name: app-config namespace: pianorhythm data: server-name: \"production\" rust-log: \"info\" heartbeat-interval: \"30s\" max-connections: \"1000\" app.toml: | [server] name = \"production\" port = 8080 [redis] prefix = \"pianorhythm\" [logging] level = \"info\" format = \"json\"",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 304,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": " ` Secrets Management `yaml kubernetes/secrets/app-secrets.yaml apiVersion: v1 kind: Secret metadata: name: app-secrets namespace: pianorhythm type: Opaque data: jwt-secret: mongodb-url: redis-password: mongo-password: stripe-secret-key: sentry-dsn: ` 🌐 Ingress Configuration NGINX Ingress `yaml kub",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 305,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "ernetes/ingresses/pianorhythm-ingress.yaml apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: pianorhythm-ingress namespace: pianorhythm annotations: kubernetes.io/ingress.class: nginx cert-manager.io/cluster-issuer: letsencrypt-prod nginx.ingress.kubernetes.io/proxy-read-timeout: \"3600\"",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 306,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": " nginx.ingress.kubernetes.io/proxy-send-timeout: \"3600\" nginx.ingress.kubernetes.io/websocket-services: pianorhythm-service spec: tls: hosts: api.pianorhythm.io secretName: pianorhythm-tls rules: host: api.pianorhythm.io http: paths: path: / pathType: Prefix backend: service: name: pianorhythm-servi",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 307,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "ce port: number: 80 ` 📊 Monitoring and Observability Prometheus ServiceMonitor `yaml apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata: name: pianorhythm-metrics namespace: pianorhythm spec: selector: matchLabels: app: pianorhythm-server endpoints: port: metrics path: /metrics inte",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 308,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "rval: 30s ` Grafana Dashboard ConfigMap `yaml apiVersion: v1 kind: ConfigMap metadata: name: pianorhythm-dashboard namespace: monitoring data: dashboard.json: | { \"dashboard\": { \"title\": \"PianoRhythm Server Metrics\", \"panels\": [ { \"title\": \"Active Connections\", \"type\": \"stat\", \"targets\": [ { \"expr\":",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 309,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": " \"pianorhythm_active_connections\" } ] } ] } } ` 🔄 Scaling and Updates Horizontal Pod Autoscaler `yaml apiVersion: autoscaling/v2 kind: HorizontalPodAutoscaler metadata: name: pianorhythm-hpa namespace: pianorhythm spec: scaleTargetRef: apiVersion: apps/v1 kind: Deployment name: pianorhythm-server m",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 310,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "inReplicas: 3 maxReplicas: 10 metrics: type: Resource resource: name: cpu target: type: Utilization averageUtilization: 70 type: Resource resource: name: memory target: type: Utilization averageUtilization: 80 ` Rolling Updates `bash Update deployment image kubectl set image deployment/pianorhythm-s",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 311,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "erver \\ pianorhythm-server=pianorhythm-server:v0.2.1 \\ -n pianorhythm Check rollout status kubectl rollout status deployment/pianorhythm-server -n pianorhythm Rollback if needed kubectl rollout undo deployment/pianorhythm-server -n pianorhythm ` 🚀 Deployment Commands Initial Deployment `bash Create",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 312,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": " namespace kubectl apply -f kubernetes/namespaces/ Apply secrets (create manually first) kubectl apply -f kubernetes/secrets/ Apply configurations kubectl apply -f kubernetes/configs/ Deploy databases kubectl apply -f kubernetes/stateful-sets/ kubectl apply -f kubernetes/deployments/redis.yaml Deplo",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 313,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "y application kubectl apply -f kubernetes/deployments/pianorhythm-server.yaml Create services kubectl apply -f kubernetes/services/ Configure ingress kubectl apply -f kubernetes/ingresses/ ` Monitoring Deployment `bash Check pod status kubectl get pods -n pianorhythm View logs kubectl logs -f deploy",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 314,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "ment/pianorhythm-server -n pianorhythm Check service endpoints kubectl get endpoints -n pianorhythm Describe resources kubectl describe deployment pianorhythm-server -n pianorhythm ` Maintenance Operations `bash Scale deployment kubectl scale deployment pianorhythm-server --replicas=5 -n pianorhythm",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 315,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": " Port forward for debugging kubectl port-forward service/pianorhythm-service 8080:80 -n pianorhythm Execute commands in pod kubectl exec -it deployment/pianorhythm-server -n pianorhythm -- /bin/bash Backup database kubectl exec -it statefulset/mongodb -n pianorhythm -- \\ mongodump --out /tmp/backup ",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 316,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "` 🔒 Security Best Practices Pod Security Standards `yaml apiVersion: v1 kind: Pod spec: securityContext: runAsNonRoot: true runAsUser: 1001 fsGroup: 1001 containers: name: pianorhythm-server securityContext: allowPrivilegeEscalation: false readOnlyRootFilesystem: true capabilities: drop: ALL ` Netw",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 317,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "ork Policies `yaml apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: pianorhythm-network-policy namespace: pianorhythm spec: podSelector: matchLabels: app: pianorhythm-server policyTypes: Ingress Egress ingress: from: namespaceSelector: matchLabels: name: ingress-nginx ports: prot",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 318,
    "title": "Kubernetes Deployment Guide",
    "description": "Scalable Kubernetes deployment with manifests, scaling, and production best practices",
    "content": "ocol: TCP port: 8080 ` This Kubernetes deployment guide provides a production-ready setup for PianoRhythm Server with proper scaling, monitoring, and security configurations.",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\kubernetes",
    "type": "docs",
    "tags": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops"
    ],
    "keywords": [
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "devops",
      "kubernetes",
      "k8s",
      "deployment",
      "scaling",
      "orchestration",
      "production",
      "manifests",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Kubernetes Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 29
  },
  {
    "objectID": 319,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "Environment Configuration Guide This guide covers all environment variables, configuration files, and deployment-specific settings for PianoRhythm Server across different environments. 🔧 Environment Variables Core Application Settings Server Configuration `bash Server identification and basic setti",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 320,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "ngs SERVER_NAME=production # Server instance name RUST_LOG=info # Logging level (error, warn, info, debug, trace) PORT=8080 # HTTP server port HOST=0.0.0.0 # Bind address Performance settings MAX_CONNECTIONS=1000 # Maximum concurrent connections HEARTBEAT_INTERVAL=30s # WebSocket heartbeat interval ",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 321,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "HEARTBEAT_TIMEOUT=60s # WebSocket timeout ` Database Configuration `bash MongoDB settings MONGODB_URL=mongodb://localhost:27017/pianorhythm MONGODB_DB=pianorhythm MONGODB_MAX_POOL_SIZE=10 MONGODB_MIN_POOL_SIZE=1 MONGODB_CONNECT_TIMEOUT=10s MONGODB_SERVER_SELECTION_TIMEOUT=30s Redis settings REDIS_UR",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 322,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "L=redis://localhost:6379 REDIS_PREFIX=pianorhythm REDIS_POOL_SIZE=20 REDIS_TIMEOUT=5s REDIS_RETRY_ATTEMPTS=3 ` Authentication & Security `bash JWT configuration JWT_SECRET=your-super-secret-jwt-signing-key JWT_EXPIRATION=24h JWT_REFRESH_EXPIRATION=7d Session configuration SESSION_SECRET=your-session",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 323,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "-secret-key SESSION_TIMEOUT=24h COOKIE_SECURE=true # HTTPS only cookies COOKIE_SAME_SITE=strict # CSRF protection ` External Service Integration Stripe Billing `bash Stripe configuration STRIPE_SECRET_KEY=sk_live_... # Live secret key STRIPE_PUBLISHABLE_KEY=pk_live_... # Live publishable key STRIPE_",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 324,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "WEBHOOK_SECRET=whsec_... # Webhook endpoint secret STRIPE_SUCCESS_URL=https://app.pianorhythm.io/success STRIPE_CANCEL_URL=https://app.pianorhythm.io/cancel ` Discord Integration `bash Discord bot configuration DISCORD_BOT_TOKEN=your-discord-bot-token DISCORD_GUILD_ID=your-discord-server-id DISCORD_",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 325,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "WEBHOOK_URL=https://discord.com/api/webhooks/... ` Email Service `bash SMTP configuration SMTP_HOST=smtp.gmail.com SMTP_PORT=587 SMTP_USERNAME=your-email@gmail.com SMTP_PASSWORD=your-app-password SMTP_FROM_ADDRESS=noreply@pianorhythm.io SMTP_FROM_NAME=PianoRhythm ` Cloud Storage (AWS S3) `bash S3 co",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 326,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "nfiguration AWS_ACCESS_KEY_ID=your-access-key AWS_SECRET_ACCESS_KEY=your-secret-key AWS_REGION=us-east-1 S3_BUCKET_NAME=pianorhythm-assets S3_PUBLIC_URL=https://assets.pianorhythm.io ` Monitoring & Observability Sentry Error Tracking `bash Sentry configuration SENTRY_DSN=https://...@sentry.io/... SE",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 327,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "NTRY_ENVIRONMENT=production SENTRY_RELEASE=v0.2.0 SENTRY_TRACES_SAMPLE_RATE=0.1 ` Structured Logging (Seq) `bash Seq logging configuration SEQ_URL=http://localhost:5341 SEQ_API_KEY=your-seq-api-key LOG_LEVEL=info LOG_FORMAT=json # json or text ` Prometheus Metrics `bash Metrics configuration METRICS",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 328,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "_ENABLED=true METRICS_PORT=9090 METRICS_PATH=/metrics ` 🌍 Environment-Specific Configurations Development Environment `bash .env.development RUST_LOG=debug SERVER_NAME=development MONGODB_URL=mongodb://localhost:27017/pianorhythm_dev REDIS_URL=redis://localhost:6379 JWT_SECRET=dev-jwt-secret-not-fo",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 329,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "r-production STRIPE_SECRET_KEY=sk_test_... COOKIE_SECURE=false SENTRY_ENVIRONMENT=development ` Staging Environment `bash .env.staging RUST_LOG=info SERVER_NAME=staging MONGODB_URL=mongodb://mongo-staging:27017/pianorhythm REDIS_URL=redis://redis-staging:6379 JWT_SECRET=${JWT_SECRET_STAGING} STRIPE_",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 330,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "SECRET_KEY=sk_test_... COOKIE_SECURE=true SENTRY_ENVIRONMENT=staging ` Production Environment `bash .env.production RUST_LOG=warn SERVER_NAME=production MONGODB_URL=${MONGODB_URL_PROD} REDIS_URL=${REDIS_URL_PROD} JWT_SECRET=${JWT_SECRET_PROD} STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY_PROD} COOKIE_SECURE",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 331,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "=true SENTRY_ENVIRONMENT=production ` 📁 Configuration Files Application Configuration (app.toml) `toml server] name = \"pianorhythm-server\" version = \"0.2.0\" port = 8080 host = \"0.0.0.0\" [database] mongodb_url = \"mongodb://localhost:27017/pianorhythm\" redis_url = \"redis://localhost:6379\" [auth] jwt_",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 332,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "expiration = \"24h\" session_timeout = \"24h\" [features] enable_analytics = true enable_billing = true enable_discord = true [limits] max_connections = 1000 max_room_users = 50 max_message_length = 500 rate_limit_requests = 100 rate_limit_window = \"1m\" [logging] level = \"info\" format = \"json\" ` Logging",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 333,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": " Configuration (logging.toml) `toml [appenders.stdout] kind = \"console\" encoder = \"json\" [appenders.file] kind = \"file\" path = \"logs/pianorhythm.log\" encoder = \"json\" [appenders.seq] kind = \"seq\" url = \"http://localhost:5341\" api_key = \"${SEQ_API_KEY}\" [root] level = \"info\" appenders = [\"stdout\", \"f",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 334,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "ile\", \"seq\" level = \"debug\" additive = false appenders = [\"stdout\"] ` 🐳 Docker Environment Configuration Docker Compose Environment `yaml docker-compose.yml version: '3.8' services: pianorhythm-server: environment: RUST_LOG=${RUST_LOG:-info} SERVER_NAME=${SERVER_NAME:-docker} MONGODB_URL=mongodb://",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 335,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "mongo:27017/pianorhythm REDIS_URL=redis://redis:6379 JWT_SECRET=${JWT_SECRET} STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY} env_file: .env ` Kubernetes ConfigMap `yaml apiVersion: v1 kind: ConfigMap metadata: name: pianorhythm-config data: RUST_LOG: \"info\" SERVER_NAME: \"kubernetes\" HEARTBEAT_INTERVAL: \"30s",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 336,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "\" MAX_CONNECTIONS: \"1000\" app.toml: | [server] name = \"kubernetes\" port = 8080 ` Kubernetes Secrets `yaml apiVersion: v1 kind: Secret metadata: name: pianorhythm-secrets type: Opaque data: JWT_SECRET: MONGODB_URL: STRIPE_SECRET_KEY: SENTRY_DSN: ` 🔒 Security Configuration TLS/SSL Configuration `bash",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 337,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": " TLS settings TLS_CERT_PATH=/etc/ssl/certs/server.crt TLS_KEY_PATH=/etc/ssl/private/server.key TLS_MIN_VERSION=1.2 TLS_CIPHER_SUITES=ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-GCM-SHA256 CORS settings CORS_ALLOWED_ORIGINS=https://app.pianorhythm.io,https://pianorhythm.io CORS_ALLOWED_METHODS=GET,P",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 338,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "OST,PUT,DELETE,OPTIONS CORS_ALLOWED_HEADERS=Authorization,Content-Type,X-Requested-With CORS_MAX_AGE=3600 ` Rate Limiting Configuration `bash Rate limiting RATE_LIMIT_ENABLED=true RATE_LIMIT_REQUESTS_PER_MINUTE=100 RATE_LIMIT_BURST=20 RATE_LIMIT_WHITELIST=127.0.0.1,::1 API-specific rate limits AUTH_",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 339,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "RATE_LIMIT=10 # Login attempts per minute UPLOAD_RATE_LIMIT=5 # File uploads per minute WEBSOCKET_RATE_LIMIT=1000 # Messages per minute ` 🔧 Configuration Validation Environment Validation Script `bash #!/bin/bash validate-env.sh required_vars=( \"JWT_SECRET\" \"MONGODB_URL\" \"REDIS_URL\" \"SERVER_NAME\" )",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 340,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": " for var in \"${required_vars[@]}\"; do if [ -z \"${!var}\" ]; then echo \"Error: $var is not set\" exit 1 fi done echo \"All required environment variables are set\" ` Configuration Testing `rust // src/config/validation.rs pub fn validate_config() -> Result { // Validate JWT secret length if env::var(\"JWT",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 341,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "_SECRET\")?.len() < 32 { return Err(ConfigError::InvalidJwtSecret); } // Validate database connections test_mongodb_connection()?; test_redis_connection()?; // Validate external services if env::var(\"STRIPE_SECRET_KEY\")?.starts_with(\"sk_live_\") { validate_stripe_connection()?; } Ok(()) } ` 📊 Configu",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 342,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "ration Management Best Practices Secret Management Never commit secrets to version control Use environment variables for sensitive data Rotate secrets regularly (JWT, API keys, passwords) Use secret management tools (HashiCorp Vault, AWS Secrets Manager) Environment Separation Separate configuration",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 343,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "s for each environment Use different databases for dev/staging/prod Different API keys for external services Environment-specific logging levels Configuration Deployment Validate configuration before deployment Use configuration templates for consistency Document all configuration options Monitor co",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 344,
    "title": "Environment Configuration Guide",
    "description": "Configuration management, environment variables, and secrets for all deployment scenarios",
    "content": "nfiguration changes This environment configuration guide ensures proper setup and security across all deployment scenarios for PianoRhythm Server.",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\environment",
    "type": "docs",
    "tags": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops"
    ],
    "keywords": [
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "devops",
      "environment",
      "configuration",
      "variables",
      "secrets",
      "settings",
      "deployment",
      "security",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Environment Configuration Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 345,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "Docker Deployment Guide This guide covers deploying PianoRhythm Server using Docker containers, including single-container deployment and multi-container orchestration with Docker Compose. 🐳 Docker Overview Container Architecture Application Container - PianoRhythm Server binary Redis Container - S",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 346,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "tate management and caching MongoDB Container - Persistent data storage Nginx Container - Reverse proxy and load balancing Image Information Base Image: rust:1.77-slim (build stage) Runtime Image: debian:bookworm-slim Final Size: ~50MB (optimized) Architecture: Multi-arch (amd64, arm64) 🏗️ Building",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 347,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": " the Docker Image Using the Dockerfile `bash Build the image docker build -t pianorhythm-server:latest . Build with specific tag docker build -t pianorhythm-server:v0.2.0 . Build for multiple architectures docker buildx build --platform linux/amd64,linux/arm64 -t pianorhythm-server:latest . ` Multi-",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 348,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "stage Build Process The Dockerfile uses multi-stage builds for optimization: Build Stage - Compile Rust application Runtime Stage - Create minimal runtime image Final Stage - Copy binary and set up runtime environment Build Arguments `bash Custom build arguments docker build \\ --build-arg RUST_VERSI",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 349,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "ON=1.77 \\ --build-arg BUILD_MODE=release \\ -t pianorhythm-server:latest . ` 🚀 Single Container Deployment Basic Container Run `bash Run with environment variables docker run -d \\ --name pianorhythm-server \\ -p 8080:8080 \\ -e REDIS_URL=redis://redis:6379 \\ -e MONGODB_URL=mongodb://mongo:27017/pianor",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 350,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "hythm \\ -e JWT_SECRET=your-secret-key \\ pianorhythm-server:latest ` With Volume Mounts `bash Mount configuration and logs docker run -d \\ --name pianorhythm-server \\ -p 8080:8080 \\ -v $(pwd)/config:/app/config \\ -v $(pwd)/logs:/app/logs \\ -v $(pwd)/secrets:/app/secrets \\ pianorhythm-server:latest ` ",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 351,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "Environment Variables `bash Complete environment setup docker run -d \\ --name pianorhythm-server \\ -p 8080:8080 \\ -e RUST_LOG=info \\ -e SERVER_NAME=production \\ -e REDIS_URL=redis://redis:6379 \\ -e MONGODB_URL=mongodb://mongo:27017/pianorhythm \\ -e JWT_SECRET=your-jwt-secret \\ -e STRIPE_SECRET_KEY=s",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 352,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "k_live_... \\ -e SENTRY_DSN=https://...@sentry.io/... \\ pianorhythm-server:latest ` 🐙 Docker Compose Deployment Basic Docker Compose Create docker-compose.yml: `yaml version: '3.8' services: pianorhythm-server: build: . ports: \"8080:8080\" environment: RUST_LOG=info REDIS_URL=redis://redis:6379 MONGO",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 353,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "DB_URL=mongodb://mongo:27017/pianorhythm JWT_SECRET=${JWT_SECRET} depends_on: redis mongo restart: unless-stopped redis: image: redis:7-alpine ports: \"6379:6379\" volumes: redis_data:/data restart: unless-stopped mongo: image: mongo:7 ports: \"27017:27017\" environment: MONGO_INITDB_ROOT_USERNAME=admin",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 354,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": " MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD} MONGO_INITDB_DATABASE=pianorhythm volumes: mongo_data:/data/db restart: unless-stopped volumes: redis_data: mongo_data: ` Production Docker Compose Create docker-compose.prod.yml: `yaml version: '3.8' services: nginx: image: nginx:alpine ports: \"80:80\" \"",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 355,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "443:443\" volumes: ./nginx.conf:/etc/nginx/nginx.conf ./ssl:/etc/nginx/ssl depends_on: pianorhythm-server restart: unless-stopped pianorhythm-server: image: pianorhythm-server:latest expose: \"8080\" environment: RUST_LOG=warn SERVER_NAME=production REDIS_URL=redis://redis:6379 MONGODB_URL=mongodb://mo",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 356,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "ngo:27017/pianorhythm JWT_SECRET=${JWT_SECRET} STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY} SENTRY_DSN=${SENTRY_DSN} depends_on: redis mongo restart: unless-stopped deploy: replicas: 3 resources: limits: memory: 512M cpus: '0.5' redis: image: redis:7-alpine command: redis-server --appendonly yes --require",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 357,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "pass ${REDIS_PASSWORD} volumes: redis_data:/data restart: unless-stopped mongo: image: mongo:7 environment: MONGO_INITDB_ROOT_USERNAME=admin MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD} MONGO_INITDB_DATABASE=pianorhythm volumes: mongo_data:/data/db ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-i",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 358,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "nit.js restart: unless-stopped volumes: redis_data: mongo_data: ` Environment File (.env) `bash Database MONGO_PASSWORD=secure_mongo_password REDIS_PASSWORD=secure_redis_password Application JWT_SECRET=your-super-secret-jwt-key SERVER_NAME=production External Services STRIPE_SECRET_KEY=sk_live_... S",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 359,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "ENTRY_DSN=https://...@sentry.io/... DISCORD_BOT_TOKEN=... Logging SEQ_URL=http://seq:5341 ` 🔧 Configuration Management Configuration Files Mount configuration files as volumes: `yaml volumes: ./config/app.toml:/app/config/app.toml:ro ./config/logging.toml:/app/config/logging.toml:ro ` Secrets Manag",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 360,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "ement Use Docker secrets for sensitive data: `yaml secrets: jwt_secret: file: ./secrets/jwt_secret.txt stripe_key: file: ./secrets/stripe_key.txt services: pianorhythm-server: secrets: jwt_secret stripe_key ` Health Checks `yaml services: pianorhythm-server: healthcheck: test: [\"CMD\", \"curl\", \"-f\", ",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 361,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "\"http://localhost:8080/health\"] interval: 30s timeout: 10s retries: 3 start_period: 40s ` 📊 Monitoring and Logging Logging Configuration `yaml services: pianorhythm-server: logging: driver: \"json-file\" options: max-size: \"10m\" max-file: \"3\" Centralized logging with Seq seq: image: datalust/seq:late",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 362,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "st ports: \"5341:80\" environment: ACCEPT_EULA=Y volumes: seq_data:/data ` Monitoring Stack `yaml services: prometheus: image: prom/prometheus:latest ports: \"9090:9090\" volumes: ./prometheus.yml:/etc/prometheus/prometheus.yml prometheus_data:/prometheus grafana: image: grafana/grafana:latest ports: \"3",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 363,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "000:3000\" environment: GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD} volumes: grafana_data:/var/lib/grafana ` 🔒 Security Considerations Network Security `yaml networks: frontend: driver: bridge backend: driver: bridge internal: true services: nginx: networks: frontend backend pianorhythm-server: n",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 364,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "etworks: backend ` Resource Limits `yaml services: pianorhythm-server: deploy: resources: limits: memory: 512M cpus: '0.5' reservations: memory: 256M cpus: '0.25' ` User Security `dockerfile In Dockerfile RUN addgroup --system --gid 1001 pianorhythm RUN adduser --system --uid 1001 --gid 1001 pianorh",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 365,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "ythm USER pianorhythm ` 🚀 Deployment Commands Development Deployment `bash Start development environment docker-compose up -d View logs docker-compose logs -f pianorhythm-server Stop environment docker-compose down ` Production Deployment `bash Deploy production stack docker-compose -f docker-compo",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 366,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "se.prod.yml up -d Scale application docker-compose -f docker-compose.prod.yml up -d --scale pianorhythm-server=3 Rolling update docker-compose -f docker-compose.prod.yml pull docker-compose -f docker-compose.prod.yml up -d --no-deps pianorhythm-server ` Maintenance Commands `bash Backup data docker ",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 367,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "run --rm -v mongo_data:/data -v $(pwd):/backup mongo:7 \\ mongodump --host mongo --out /backup/mongo-backup Restore data docker run --rm -v mongo_data:/data -v $(pwd):/backup mongo:7 \\ mongorestore --host mongo /backup/mongo-backup Clean up docker system prune -a docker volume prune ` This Docker dep",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 368,
    "title": "Docker Deployment Guide",
    "description": "Containerized deployment with Docker and Docker Compose for PianoRhythm Server",
    "content": "loyment guide provides a solid foundation for containerized deployment of PianoRhythm Server in both development and production environments.",
    "url": "/docs\\community\\technical-documentation\\server\\deployment\\docker",
    "type": "docs",
    "tags": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops"
    ],
    "keywords": [
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "devops",
      "docker",
      "containers",
      "deployment",
      "docker-compose",
      "containerization",
      "orchestration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Docker Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 369,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "State Management Architecture PianoRhythm Server implements a sophisticated state management system using Redis as the primary state store, with MongoDB for persistent data. This document details the state management architecture, data models, and caching strategies. 🎯 State Management Overview Des",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 370,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "ign Principles Single Source of Truth - Redis serves as the authoritative state store Performance First - In-memory operations for real-time requirements Persistence - MongoDB backup for data durability Consistency - Atomic operations and transactions where needed State Categories Session State - Us",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 371,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "er connections and temporary data Game State - Room data, user positions, real-time interactions Social State - Friend relationships, chat messages, user status Configuration State - Server settings, room configurations 🏗️ Redis Architecture Data Structure Strategy ` pianorhythm: ├── users:{user_id",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 372,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "} # Hash - User session data ├── rooms:{room_id} # Hash - Room configuration ├── rooms:online # Sorted Set - Active rooms ├── rooms:users:{room_id} # Sorted Set - Users in room ├── rooms:chat:{room_id} # Sorted Set - Chat messages ├── users:friends:{user_id} # Set - Friend relationships ├── users:on",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 373,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "line # Sorted Set - Online users └── server:settings # Hash - Server configuration ` Key Naming Conventions Prefix: pianorhythm: - Namespace isolation Entity Types: users:, rooms:, server: - Clear categorization Relationships: rooms:users:, users:friends: - Relationship mapping Collections: online, ",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 374,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "chat, typing - Collection suffixes 📊 Data Models User State Model `rust pub struct UserDbo { pub user_id: UserId, pub username: String, pub user_tag: String, pub socket_id: SocketId, pub room_id: Option, pub status: UserStatus, pub roles: UserRoles, pub settings: UserSettings, pub billing_settings:",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 375,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": " UserBillingSettings, pub last_seen: DateTime, } ` Redis Storage: Key: pianorhythm:users:{user_id} Type: Hash TTL: Session-based (extends on activity) Room State Model `rust pub struct RoomStateDbo { pub room_id: RoomId, pub room_name: String, pub room_owner: String, pub room_type: RoomType, pub set",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 376,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "tings: RoomSettings, pub created_at: DateTime, pub last_activity: DateTime, } ` Redis Storage: Key: pianorhythm:rooms:{room_id} Type: Hash Additional: Sorted set entries for discovery Chat Message Model `rust pub struct ChatMessageDbo { pub message_id: String, pub user_id: UserId, pub username: Stri",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 377,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "ng, pub message: String, pub timestamp: DateTime, pub message_type: ChatMessageType, } ` Redis Storage: Key: pianorhythm:rooms:chat:{room_id} Type: Sorted Set (scored by timestamp) Retention: Configurable message history limit 🔄 State Operations User State Operations User Login `rust pub fn save_us",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 378,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "er(&self, user_dbo: &UserDbo) -> Result { let mut pipeline = self.store.create_pipeline(); // Save user data pipeline.hset_multiple(&user_key, &user_hash_data); // Add to online users pipeline.zadd(\"pianorhythm:users:online\", &user_dbo.user_id, timestamp); // Set expiration pipeline.expire(&user_key",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 379,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": ", SESSION_TTL); pipeline.execute() } ` User Room Assignment `rust pub fn add_user_to_room(&self, room_id: &RoomId, socket_id: &SocketId) -> Result, Option), StateError> { let mut pipeline = self.store.create_pipeline(); // Remove from previous room if let Some(prev_room) = self.get_user_room(socket_",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 380,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "id)? { pipeline.zrem(&format!(\"pianorhythm:rooms:users:{}\", prev_room), socket_id); } // Add to new room pipeline.zadd(&format!(\"pianorhythm:rooms:users:{}\", room_id), socket_id, timestamp); // Update user's room assignment pipeline.hset(&format!(\"pianorhythm:users:{}\", socket_id), \"room_id\", room_i",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 381,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "d); pipeline.execute() } ` Room State Operations Room Creation `rust pub fn save_room(&self, room_dbo: &RoomStateDbo) -> Result { let mut pipeline = self.store.create_pipeline(); // Save room data pipeline.hset_multiple(&room_key, &room_hash_data); // Add to online rooms pipeline.zadd(\"pianorhythm:r",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 382,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "ooms:online\", &room_dbo.room_id, timestamp); // Add name mapping if named room if !room_dbo.room_name.is_empty() { pipeline.hset(\"pianorhythm:rooms:name-map\", &room_dbo.room_name, &room_dbo.room_id); } pipeline.execute() } ` Chat Message Storage `rust pub fn save_chat_message(&self, room_id: &RoomId",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 383,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": ", message: &ChatMessageDbo) -> Result { let chat_key = format!(\"pianorhythm:rooms:chat:{}\", room_id); let message_json = serde_json::to_string(message)?; let score = message.timestamp.timestamp_millis() as f64; // Add message to sorted set self.store.zadd(&chat_key, &message_json, score)?; // Trim o",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 384,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "ld messages (keep last 100) self.store.zremrangebyrank(&chat_key, 0, -101)?; Ok(true) } ` 🚀 Performance Optimizations Connection Pooling `rust pub struct RedisDBStore { pool: r2d2::Pool, config: Arc, } impl RedisDBStore { pub fn new(pool: r2d2::Pool) -> Self { Self { pool, config } } fn get_connect",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 385,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "ion(&self) -> Result, StateError> { self.pool.get().map_err(|e| StateError::ConnectionError(e.to_string())) } } ` Pipeline Operations `rust pub fn create_pipeline(&self) -> RedisPipeline { RedisPipeline::new(self.get_connection()?) } // Batch multiple operations let mut pipeline = state.create_pipel",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 386,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "ine(); pipeline.hset(\"key1\", \"field1\", \"value1\"); pipeline.zadd(\"key2\", \"member1\", 1.0); pipeline.expire(\"key1\", 3600); pipeline.execute()?; // Single round-trip ` Caching Strategies Hot Data Caching User Sessions - Cached for session duration Active Rooms - Cached with activity-based TTL Friend Lis",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 387,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "ts - Cached with manual invalidation Cache Invalidation `rust pub fn invalidate_user_cache(&self, user_id: &UserId) { // Remove from cache self.store.del(&format!(\"pianorhythm:cache:user:{}\", user_id)); // Publish invalidation event self.publish_cache_invalidation(\"user\", user_id); } ` 🔄 Data Synch",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 388,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "ronization Redis to MongoDB Sync `rust pub async fn sync_user_to_mongodb(&self, user_dbo: &UserDbo) -> Result { // Update MongoDB with current Redis state self.users_service.update_user(user_dbo).await?; // Log sync operation debug!(\"Synced user {} to MongoDB\", user_dbo.user_id); Ok(()) } ` Cross-Se",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 389,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "rver Synchronization `rust pub fn publish_state_change(&self, change: StateChange) { let channel = format!(\"pianorhythm:state-changes:{}\", self.config.server_name); let message = serde_json::to_string(&change).unwrap(); self.store.publish(&channel, message); } ` 🛡️ Data Consistency Atomic Operation",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 390,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "s `rust pub fn atomic_room_join(&self, user_id: &UserId, room_id: &RoomId) -> Result { let mut pipeline = self.store.create_pipeline(); pipeline.atomic(); // Start transaction // Check room capacity let current_users = pipeline.zcard(&format!(\"pianorhythm:rooms:users:{}\", room_id)); // Conditional o",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 391,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "perations based on capacity pipeline.execute_conditional(|results| { let user_count: i64 = results[0]; user_count < MAX_ROOM_CAPACITY }) } ` Conflict Resolution Last Write Wins - For user preferences and settings Merge Strategy - For complex state objects Version Vectors - For distributed conflict d",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 392,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "etection 📊 Monitoring and Metrics Redis Metrics Connection Pool Usage - Monitor pool exhaustion Command Latency - Track operation performance Memory Usage - Monitor Redis memory consumption Hit/Miss Ratios - Cache effectiveness metrics State Metrics `rust pub struct StateMetrics { pub active_users:",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 393,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": " i64, pub active_rooms: i64, pub total_connections: i64, pub cache_hit_rate: f64, pub average_response_time: Duration, } ` 🔧 Configuration Redis Configuration `toml [redis] url = \"redis://localhost:6379\" pool_size = 20 timeout = 5000 retry_attempts = 3 ` State Management Configuration `rust pub str",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 394,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "uct StateConfig { pub session_ttl: Duration, pub room_ttl: Duration, pub chat_history_limit: usize, pub cache_size_limit: usize, } ` This state management architecture provides high-performance, consistent, and scalable data operations while maintaining data integrity and supporting real-time multip",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 395,
    "title": "State Management Architecture",
    "description": "Redis-based state management, data models, and performance optimizations",
    "content": "layer gaming requirements.",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\state-management",
    "type": "docs",
    "tags": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server"
    ],
    "keywords": [
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "server",
      "state-management",
      "redis",
      "mongodb",
      "caching",
      "data-models",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "State Management Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 396,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "Architecture Overview PianoRhythm Server is designed as a high-performance, real-time multiplayer gaming server built with modern Rust technologies. This document provides a comprehensive overview of the system architecture, design principles, and key components. 🎯 Design Principles Real-time First",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 397,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": " Low-latency communication through WebSocket connections Event-driven architecture for immediate response to user actions Optimized message serialization using Protocol Buffers Scalability Horizontal scaling through stateless server instances Actor-based concurrency for efficient resource utilizatio",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 398,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "n Distributed state management using Redis clustering Reliability Fault tolerance through supervisor patterns Graceful degradation when external services are unavailable Comprehensive error handling and recovery mechanisms Performance Zero-copy operations where possible Connection pooling for databa",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 399,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "se and cache connections Efficient memory management with Rust's ownership system 🏗️ High-Level Architecture ` ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐ │ Load Balancer │ │ Load Balancer │ │ Load Balancer │ │ (Ingress) │ │ (Ingress) │ │ (Ingress) │ └─────────┬───────┘ └─────────┬─",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 400,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "──────┘ └─────────┬───────┘ │ │ │ ▼ ▼ ▼ ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐ │ Server Instance │ │ Server Instance │ │ Server Instance │ │ (Pod) │ │ (Pod) │ │ (Pod) │ └─────────┬───────┘ └─────────┬───────┘ └─────────┬───────┘ │ │ │ └──────────┬───────────┴──────────┬─────────",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 401,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "──┘ │ │ ▼ ▼ ┌─────────────────┐ ┌─────────────────┐ │ Redis Cluster │ │ MongoDB Cluster │ │ (State/Cache) │ │ (Persistence) │ └─────────────────┘ └─────────────────┘ ` 🔧 Core Components 1. Web Server Layer (Actix Web) HTTP/HTTPS endpoints for REST API WebSocket upgrade handling for real-time connec",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 402,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "tions Middleware stack for authentication, CORS, rate limiting Static file serving for assets and documentation 2. Actor System (Actix) The server uses an actor-based architecture for concurrent processing: Core Actors PianoRhythmState - Central state management actor UserManager - User session and ",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 403,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "authentication management RoomManager - Room lifecycle and user assignment ConnectionManager - WebSocket connection handling Specialized Actors AnalyticsTracker - Event tracking and metrics collection UserStatsTracker - User statistics and achievements SheetMusicStatsTracker - Music performance anal",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 404,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "ytics StatusPageMonitor - System health monitoring SentryActor - Error reporting and alerting SeqLoggerActor - Structured logging aggregation 3. State Management Layer Redis - Primary state store for real-time data MongoDB - Persistent storage for user data, rooms, and history In-memory caches - Hot",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 405,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": " data caching for performance 4. Communication Layer WebSocket Protocol - Real-time bidirectional communication Protocol Buffers - Efficient binary message serialization Redis Pub/Sub - Inter-server messaging for scaling 📊 Data Flow Architecture Client Connection Flow ` Client → Load Balancer → Ser",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 406,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "ver Instance → WebSocket Handler → Actor System ` Message Processing Flow ` WebSocket Message → Deserialization → Actor Routing → Business Logic → State Update → Response ` State Synchronization Flow ` State Change → Redis Update → Pub/Sub Notification → Other Instances → Client Updates ` 🔐 Securit",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 407,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "y Architecture Authentication Layer JWT tokens with Ed25519 signatures Session management with secure cookies OAuth2 integration for third-party authentication Authorization Layer Role-based access control (RBAC) Resource-level permissions for rooms and features Rate limiting per user and endpoint D",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 408,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "ata Protection Input validation and sanitization SQL injection prevention through parameterized queries XSS protection through content security policies 🚀 Performance Characteristics Concurrency Model Async/await throughout the application Actor isolation prevents shared mutable state Connection po",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 409,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "oling for database and Redis connections Memory Management Zero-copy operations for message passing Efficient serialization with Protocol Buffers Automatic memory management through Rust's ownership system Scalability Metrics Horizontal scaling - Add more server instances Vertical scaling - Increase",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 410,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": " resources per instance Database scaling - MongoDB sharding and Redis clustering 🔄 Event-Driven Architecture Event Types User Events - Login, logout, profile updates Room Events - Creation, updates, user joins/leaves Game Events - MIDI messages, chat messages, commands System Events - Health checks",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 411,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": ", metrics, alerts Event Processing Event Reception - WebSocket or HTTP endpoint Validation - Input validation and authentication Actor Routing - Message sent to appropriate actor Business Logic - Event processing and state updates State Persistence - Updates saved to Redis/MongoDB Notification - Oth",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 412,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "er clients notified of changes 🔧 Configuration Management Environment-Based Configuration Development - Local development settings Staging - Pre-production testing environment Production - Live production configuration Configuration Sources Environment variables - Runtime configuration Configuratio",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 413,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "n files - Static application settings Kubernetes ConfigMaps - Container orchestration config Kubernetes Secrets - Sensitive configuration data 📈 Monitoring and Observability Metrics Collection Prometheus metrics - Performance and business metrics Custom metrics - Application-specific measurements S",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 414,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "ystem metrics - CPU, memory, network usage Logging Strategy Structured logging - JSON-formatted log entries Log levels - Debug, info, warn, error categorization Centralized logging - Seq aggregation and analysis Error Tracking Sentry integration - Automatic error reporting Error context - Rich error",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 415,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": " information and stack traces Performance monitoring - Transaction tracing and profiling 🔮 Future Architecture Considerations Microservices Evolution Service decomposition - Breaking monolith into services API gateway - Centralized API management Service mesh - Inter-service communication Advanced ",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 416,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "Scaling Auto-scaling - Dynamic resource allocation Multi-region deployment - Global distribution Edge computing - Reduced latency through edge nodes Technology Evolution WebAssembly - Client-side performance improvements GraphQL - More flexible API queries Event sourcing - Complete event history tra",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 417,
    "title": "Architecture Overview",
    "description": "High-level system architecture and design principles for PianoRhythm Server",
    "content": "cking This architecture provides a solid foundation for a scalable, real-time multiplayer gaming platform while maintaining flexibility for future enhancements and optimizations.",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "server",
      "architecture",
      "system design",
      "rust",
      "actix",
      "real-time",
      "scalability",
      "performance",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 418,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "Actor System Architecture PianoRhythm Server uses the Actix actor framework to implement a robust, concurrent, and scalable architecture. This document details the actor system design, individual actors, and their interactions. 🎭 Actor Model Overview Core Principles Message Passing - Actors communi",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 419,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "cate exclusively through messages Isolation - Each actor has its own state and memory space Supervision - Actors can supervise and restart child actors Location Transparency - Actors can be local or distributed Benefits Concurrency - Natural concurrent processing without locks Fault Tolerance - Acto",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 420,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "r failures don't affect other actors Scalability - Easy to distribute across multiple threads/machines Maintainability - Clear separation of concerns 🏗️ Actor Hierarchy ` System ├── PianoRhythmState (Central State Manager) ├── UserManager (User Session Management) ├── RoomManager (Room Lifecycle Ma",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 421,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "nagement) ├── ConnectionManager (WebSocket Connections) ├── Analytics Actors │ ├── AnalyticsTracker │ ├── UserStatsTracker │ └── SheetMusicStatsTracker ├── Monitoring Actors │ ├── StatusPageMonitor │ ├── SentryActor │ └── SeqLoggerActor └── Utility Actors ├── SearchProviderAPI └── GhostActorTracker ",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 422,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "` 🎯 Core Actors PianoRhythmState Purpose: Central state management and Redis operations Responsibilities: User state management (online status, room assignments) Room state management (room data, user lists, settings) Chat message storage and retrieval Friend relationships and social features Serve",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 423,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "r-wide configuration and settings Key Messages: GetUser(socket_id) - Retrieve user information SaveUser(user_dbo) - Persist user data AddUserToRoom(room_id, socket_id) - Room assignment SaveChatMessage(room_id, message) - Chat persistence State Storage: Redis for real-time data and caching MongoDB f",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 424,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "or persistent data backup UserManager Purpose: User authentication, session management, and lifecycle Responsibilities: User authentication and JWT validation Session creation and management User profile updates Friend request processing User role and permission management Key Messages: Authenticate",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 425,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "User(credentials) - User login UpdateUserProfile(user_id, profile_data) - Profile updates ProcessFriendRequest(from_user, to_user) - Social features ValidateUserPermissions(user_id, action) - Authorization Integration Points: MongoDB Users Service for persistent data JWT token validation and generat",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 426,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "ion OAuth2 providers (Discord, etc.) RoomManager Purpose: Room lifecycle management and user assignment Responsibilities: Room creation and deletion User joining and leaving rooms Room settings and configuration Room password validation Room type enforcement (public, private, pro-only) Key Messages:",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 427,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": " CreateRoom(room_settings) - New room creation JoinRoom(user_id, room_id, password) - User room entry LeaveRoom(user_id, room_id) - User room exit UpdateRoomSettings(room_id, settings) - Room configuration Business Logic: Room capacity limits Pro membership validation Password protection Maintenance",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 428,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": " mode handling ConnectionManager Purpose: WebSocket connection lifecycle and message routing Responsibilities: WebSocket connection establishment Message serialization/deserialization Connection health monitoring Message routing to appropriate actors Connection cleanup on disconnect Key Messages: Ne",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 429,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "wConnection(websocket, user_info) - Connection establishment MessageReceived(connection_id, message) - Incoming message SendMessage(connection_id, message) - Outgoing message ConnectionClosed(connection_id) - Cleanup handling 📊 Analytics Actors AnalyticsTracker Purpose: General event tracking and m",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 430,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "etrics collection Responsibilities: User action tracking Performance metrics collection Business intelligence data gathering Event aggregation and reporting Tracked Events: User login/logout events Room creation and joining Feature usage statistics Error rates and performance metrics UserStatsTracke",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 431,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "r Purpose: Individual user statistics and achievements Responsibilities: User performance tracking Achievement calculation Leaderboard maintenance Progress tracking Metrics Tracked: Total notes played Accuracy percentages Time spent in rooms Social interaction metrics SheetMusicStatsTracker Purpose:",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 432,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": " Music-specific analytics and performance data Responsibilities: Song popularity tracking Difficulty analysis Performance statistics per song Music recommendation data 🔍 Monitoring Actors StatusPageMonitor Purpose: System health monitoring and status reporting Responsibilities: Health check executi",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 433,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "on Service availability monitoring Performance threshold monitoring Status page updates Monitored Services: Redis connectivity and performance MongoDB connectivity and performance External API availability Server resource utilization SentryActor Purpose: Error tracking and alerting Responsibilities:",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 434,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": " Error capture and reporting Performance monitoring Alert generation for critical issues Error context enrichment Integration: Sentry.io service integration Automatic error reporting Performance transaction tracking SeqLoggerActor Purpose: Structured logging aggregation Responsibilities: Log message",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 435,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": " formatting Log level filtering Centralized log shipping Log correlation and context 🔄 Message Flow Patterns Request-Response Pattern `rust // User requests room information let room_info = room_manager .send(GetRoomInfo { room_id }) .await?; ` Fire-and-Forget Pattern `rust // Analytics tracking (n",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 436,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "o response needed) analytics_tracker.do_send(TrackEvent { event_type: EventType::UserLogin, user_id, timestamp: Utc::now(), }); ` Publish-Subscribe Pattern `rust // State changes broadcast to interested actors state_manager.do_send(PublishStateChange { change_type: StateChangeType::UserJoinedRoom, d",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 437,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "ata: room_update, }); ` 🛡️ Error Handling and Supervision Supervision Strategy One-for-One - Individual actor restart on failure All-for-One - Restart all actors if critical actor fails Rest-for-One - Restart failed actor and dependents Error Recovery Automatic Restart - Failed actors restart autom",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 438,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "atically State Recovery - Actors restore state from persistent storage Circuit Breaker - Prevent cascading failures Monitoring and Alerting Actor Health Checks - Regular health monitoring Performance Metrics - Actor processing time and throughput Error Rate Tracking - Monitor and alert on error spik",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 439,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "es 🚀 Performance Optimization Message Optimization Message Pooling - Reuse message objects Batch Processing - Group related messages Priority Queues - Critical messages processed first Actor Optimization Actor Pooling - Multiple instances for high-load actors Load Balancing - Distribute messages ac",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 440,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "ross actor instances Resource Management - Monitor and limit actor resource usage Scaling Strategies Horizontal Scaling - Add more actor instances Vertical Scaling - Increase actor processing capacity Geographic Distribution - Deploy actors closer to users 🔧 Configuration and Tuning Actor Configura",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 441,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "tion `rust // Example actor configuration UserManager::start_in_arbiter(&arbiter, |_| { UserManager::new(config.clone()) .with_mailbox_capacity(1000) .with_timeout(Duration::from_secs(30)) }); ` Performance Tuning Mailbox Size - Balance memory usage and message throughput Timeout Settings - Prevent ",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 442,
    "title": "Actor System Architecture",
    "description": "Detailed actor system documentation with message flows and supervision strategies",
    "content": "hanging operations Thread Pool Size - Optimize for CPU core count The actor system provides a robust foundation for concurrent, fault-tolerant processing while maintaining clear separation of concerns and enabling horizontal scalability.",
    "url": "/docs\\community\\technical-documentation\\server\\architecture\\actors",
    "type": "docs",
    "tags": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server"
    ],
    "keywords": [
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "server",
      "actors",
      "actix",
      "concurrency",
      "message-passing",
      "supervision",
      "rust",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Actor System Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 443,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "WebSocket API Documentation The PianoRhythm WebSocket API enables real-time, bidirectional communication between clients and the server. This document details the WebSocket protocol, message types, and usage patterns. 🔌 Connection Establishment WebSocket Endpoint ` wss://api.pianorhythm.io/api/webs",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 444,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "ocket/{encrypted_payload} ` Encrypted Payload The connection requires an encrypted payload containing user authentication data: `javascript const payload = { username: \"user123\", uuid: \"user-uuid-here\", socket_id: \"unique-socket-id\", is_member: true, token: \"jwt-token-here\" }; const encryptedPayload",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 445,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": " = encrypt(JSON.stringify(payload)); const ws = new WebSocket(wss://api.pianorhythm.io/api/websocket/${encryptedPayload}); ` Connection Lifecycle WebSocket Handshake - HTTP upgrade to WebSocket Payload Decryption - Server decrypts authentication data User Authentication - JWT token validation Sessio",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 446,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "n Initialization - User session created Welcome Message - Server sends user data Ready State - Connection ready for messages 📨 Message Protocol Message Format All messages use Protocol Buffers for efficient binary serialization: `protobuf message ServerMessage { ServerMessageType messageType = 1; o",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 447,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "neof message { CreateRoomCommand createRoomCommand = 2; UpdateRoomCommand updateRoomCommand = 3; JoinRoomByName joinRoomByName = 4; RoomChatMessage roomChatMessage = 5; MidiMessage midiMessage = 6; ServerCommand serverCommand = 7; AvatarCommand avatarCommand = 8; // ... additional message types } } ",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 448,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "` Message Types Room Management Messages CreateRoomCommand - Create a new room UpdateRoomCommand - Update room settings JoinRoomByName - Join room by name JoinNextAvailableLobby - Join any available lobby LeaveRoom - Leave current room Communication Messages RoomChatMessage - Send chat message RoomC",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 449,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "hatServerCommand - Server chat commands PrivateMessage - Direct user messaging Game Messages MidiMessage - Musical note data AvatarCommand - Avatar updates UserStatusUpdate - Status changes System Messages ServerCommand - General server commands HeartbeatMessage - Connection keep-alive ErrorMessage ",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 450,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "- Error notifications 🎮 Room Management Creating a Room `protobuf message CreateRoomCommand { string room_name = 1; RoomType room_type = 2; string password = 3; RoomSettings settings = 4; } ` Example Usage: `javascript const createRoomMessage = { messageType: 'CreateRoomCommand', createRoomCommand:",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 451,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": " { room_name: 'My Piano Room', room_type: 'PUBLIC', password: '', settings: { max_users: 10, allow_chat: true, allow_guests: true } } }; ws.send(encodeProtobuf(createRoomMessage)); ` Joining a Room `protobuf message JoinRoomByName { string room_name = 1; string password = 2; } ` Server Response: `pr",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 452,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "otobuf message RoomJoinedResponse { bool success = 1; RoomInfo room_info = 2; repeated UserInfo current_users = 3; string error_message = 4; } ` Room Settings `protobuf message RoomSettings { int32 max_users = 1; bool allow_chat = 2; bool allow_guests = 3; bool auto_moderation = 4; bool require_pro ",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 453,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "= 5; string welcome_message = 6; } ` 💬 Chat System Sending Chat Messages `protobuf message RoomChatMessage { string message = 1; ChatMessageType message_type = 2; } ` Message Types: USER_MESSAGE - Regular user message SYSTEM_MESSAGE - System notification BOT_MESSAGE - Bot-generated message MODERATO",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 454,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "R_MESSAGE - Moderator announcement Chat Commands Special commands prefixed with /: /help - Show available commands /users - List users in room /kick - Kick user (moderators only) /ban - Ban user (moderators only) /mute - Mute user (moderators only) Chat Moderation `protobuf message RoomChatServerCom",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 455,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "mand { string command = 1; string target_user = 2; string reason = 3; } ` 🎵 MIDI Messages MIDI Data Format `protobuf message MidiMessage { bytes midi_data = 1; int64 timestamp = 2; string user_id = 3; } ` MIDI Event Types Note On - Key press events Note Off - Key release events Control Change - Ped",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 456,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "al and other controls Program Change - Instrument selection Real-time Synchronization Timestamp Sync - Server timestamps for synchronization Latency Compensation - Client-side prediction Jitter Buffer - Smooth playback despite network variations 👤 User Management Avatar Updates `protobuf message Av",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 457,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "atarCommand { AvatarAction action = 1; AvatarData avatar_data = 2; } enum AvatarAction { UPDATE_POSITION = 0; UPDATE_APPEARANCE = 1; UPDATE_STATUS = 2; } ` User Status `protobuf enum UserStatus { ONLINE = 0; AWAY = 1; BUSY = 2; INVISIBLE = 3; } ` Friend System `protobuf message FriendRequest { strin",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 458,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "g target_user_id = 1; FriendAction action = 2; } enum FriendAction { SEND_REQUEST = 0; ACCEPT_REQUEST = 1; DECLINE_REQUEST = 2; REMOVE_FRIEND = 3; } ` 🔄 Server Commands General Commands `protobuf message ServerCommand { ServerCommandType commandType = 1; map parameters = 2; } enum ServerCommandType",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 459,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": " { JOIN = 0; LEAVE = 1; CREATE_OR_JOIN_ROOM = 2; ENTER_LOBBY = 3; UPDATE_SETTINGS = 4; } ` System Commands HEARTBEAT - Connection keep-alive RECONNECT - Request reconnection SYNC_STATE - Synchronize client state UPDATE_PERMISSIONS - Refresh user permissions 📡 Client-Server Communication Patterns Re",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 460,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "quest-Response Pattern `javascript // Client sends request const requestId = generateUniqueId(); const message = { messageType: 'GetRoomInfo', requestId: requestId, getRoomInfo: { room_id: 'room123' } }; ws.send(encodeProtobuf(message)); // Server responds with matching requestId ws.onmessage = (eve",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 461,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "nt) => { const response = decodeProtobuf(event.data); if (response.requestId === requestId) { // Handle response } }; ` Event Broadcasting `javascript // Server broadcasts to all room members const broadcastMessage = { messageType: 'UserJoinedRoom', userJoinedRoom: { user_info: userInfo, room_id: 'r",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 462,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "oom123' } }; // All clients in room receive this message ` Heartbeat Mechanism `javascript // Client sends heartbeat every 30 seconds setInterval(() => { const heartbeat = { messageType: 'HeartbeatMessage', heartbeatMessage: { timestamp: Date.now() } }; ws.send(encodeProtobuf(heartbeat)); }, 30000);",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 463,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": " // Server responds with heartbeat acknowledgment ` 🛡️ Error Handling Connection Errors Authentication Failed - Invalid credentials Connection Timeout - Network issues Rate Limited - Too many messages Server Unavailable - Maintenance mode Message Errors `protobuf message ErrorMessage { ErrorType er",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 464,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "ror_type = 1; string error_code = 2; string error_message = 3; map error_details = 4; } enum ErrorType { VALIDATION_ERROR = 0; PERMISSION_ERROR = 1; RESOURCE_ERROR = 2; SYSTEM_ERROR = 3; } ` Reconnection Strategy `javascript class WebSocketClient { constructor(url) { this.url = url; this.reconnectAt",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 465,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "tempts = 0; this.maxReconnectAttempts = 5; this.reconnectDelay = 1000; } connect() { this.ws = new WebSocket(this.url); this.ws.onclose = (event) => { if (this.reconnectAttempts { this.reconnectAttempts++; this.connect(); }, this.reconnectDelay * Math.pow(2, this.reconnectAttempts)); } }; } } ` 📊 P",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 466,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "erformance Considerations Message Optimization Binary Protocol - Protocol Buffers for efficiency Message Batching - Group related messages Compression - WebSocket compression enabled Connection Management Connection Pooling - Reuse connections where possible Graceful Degradation - Handle partial con",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 467,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "nectivity Resource Cleanup - Proper connection disposal Monitoring Message Rates - Track messages per second Connection Count - Monitor active connections Error Rates - Track connection and message errors Latency Metrics - Measure round-trip times The WebSocket API provides the foundation for real-t",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 468,
    "title": "WebSocket API Documentation",
    "description": "Real-time WebSocket communication protocol, message types, and usage patterns",
    "content": "ime multiplayer piano gaming, enabling synchronized musical collaboration and social interaction.",
    "url": "/docs\\community\\technical-documentation\\server\\api\\websocket",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "api",
      "websocket",
      "real-time",
      "protocol-buffers",
      "messaging",
      "communication",
      "midi",
      "chat",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 469,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "REST API Endpoints This document provides a comprehensive reference for all REST API endpoints available in the PianoRhythm Server. 🔐 Authentication Endpoints POST /api/auth/login Authenticate user and receive JWT token. Request Body: `json { \"username\": \"string\", \"password\": \"string\", \"remember_me",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 470,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "\": \"boolean\" } ` Response: `json { \"success\": true, \"data\": { \"token\": \"jwt_token_here\", \"refresh_token\": \"refresh_token_here\", \"expires_in\": 3600, \"user\": { \"user_id\": \"uuid\", \"username\": \"string\", \"roles\": [\"member\"] } } } ` POST /api/auth/register Register new user account. Request Body: `json { ",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 471,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "\"username\": \"string\", \"email\": \"string\", \"password\": \"string\", \"confirm_password\": \"string\" } ` POST /api/auth/refresh Refresh JWT token using refresh token. Request Body: `json { \"refresh_token\": \"string\" } ` GET /api/auth/validate-token Validate current JWT token. Headers: Authorization: Bearer Re",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 472,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "sponse: `json { \"success\": true, \"data\": { \"valid\": true, \"expires_at\": \"2024-01-01T00:00:00Z\" } } ` 👤 User Endpoints GET /api/users/profile Get current user's profile information. Headers: Authorization: Bearer Response: `json { \"success\": true, \"data\": { \"user_id\": \"uuid\", \"username\": \"string\", \"",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 473,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "email\": \"string\", \"avatar_url\": \"string\", \"is_member\": \"boolean\", \"is_pro\": \"boolean\", \"roles\": [\"string\"], \"settings\": { \"theme\": \"dark\", \"notifications\": true }, \"stats\": { \"total_notes\": 12345, \"time_played\": 7200, \"rooms_created\": 5 } } } ` PUT /api/users/profile Update user profile information.",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 474,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": " Headers: Authorization: Bearer Request Body: `json { \"username\": \"string\", \"email\": \"string\", \"settings\": { \"theme\": \"dark|light\", \"notifications\": \"boolean\" } } ` GET /api/users/:user_id Get public user information. Parameters: user_id (path) - User ID or username Response: `json { \"success\": true",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 475,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": ", \"data\": { \"user_id\": \"uuid\", \"username\": \"string\", \"avatar_url\": \"string\", \"is_member\": \"boolean\", \"is_pro\": \"boolean\", \"last_seen\": \"2024-01-01T00:00:00Z\", \"public_stats\": { \"total_notes\": 12345, \"time_played\": 7200 } } } ` POST /api/users/avatar Upload user avatar image. Headers: Authorization: ",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 476,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "Bearer Content-Type: multipart/form-data Request Body: Form data with avatar file field GET /api/users/friends Get user's friends list. Headers: Authorization: Bearer Response: `json { \"success\": true, \"data\": { \"friends\": [ { \"user_id\": \"uuid\", \"username\": \"string\", \"avatar_url\": \"string\", \"status\"",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 477,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": ": \"online|away|busy|offline\", \"current_room\": \"string\" } ], \"pending_requests\": [ { \"user_id\": \"uuid\", \"username\": \"string\", \"sent_at\": \"2024-01-01T00:00:00Z\" } ] } } ` 🏠 Room Endpoints GET /api/rooms List public rooms. Query Parameters: page (optional) - Page number (default: 1) limit (optional) -",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 478,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": " Items per page (default: 20, max: 100) room_type (optional) - Filter by room type has_users (optional) - Only rooms with users Response: `json { \"success\": true, \"data\": { \"rooms\": [ { \"room_id\": \"string\", \"room_name\": \"string\", \"room_owner\": \"string\", \"room_type\": \"public|private|pro\", \"current_us",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 479,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "ers\": 5, \"max_users\": 10, \"has_password\": false, \"created_at\": \"2024-01-01T00:00:00Z\", \"last_activity\": \"2024-01-01T00:00:00Z\" } ], \"pagination\": { \"page\": 1, \"limit\": 20, \"total\": 150, \"pages\": 8 } } } ` POST /api/rooms Create new room. Headers: Authorization: Bearer Request Body: `json { \"room_nam",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 480,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "e\": \"string\", \"room_type\": \"public|private|pro\", \"password\": \"string\", \"max_users\": 10, \"settings\": { \"allow_chat\": true, \"allow_guests\": true, \"auto_moderation\": false, \"welcome_message\": \"string\" } } ` GET /api/rooms/:room_id Get room details. Parameters: room_id (path) - Room identifier Response:",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 481,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": " `json { \"success\": true, \"data\": { \"room_id\": \"string\", \"room_name\": \"string\", \"room_owner\": \"string\", \"room_type\": \"public|private|pro\", \"current_users\": 5, \"max_users\": 10, \"has_password\": false, \"created_at\": \"2024-01-01T00:00:00Z\", \"settings\": { \"allow_chat\": true, \"allow_guests\": true, \"auto_m",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 482,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "oderation\": false }, \"users\": [ { \"user_id\": \"uuid\", \"username\": \"string\", \"avatar_url\": \"string\", \"joined_at\": \"2024-01-01T00:00:00Z\" } ] } } ` PUT /api/rooms/:room_id Update room settings (owner only). Headers: Authorization: Bearer Parameters: room_id (path) - Room identifier Request Body: `json ",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 483,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "{ \"room_name\": \"string\", \"password\": \"string\", \"max_users\": 10, \"settings\": { \"allow_chat\": true, \"allow_guests\": true, \"auto_moderation\": false, \"welcome_message\": \"string\" } } ` DELETE /api/rooms/:room_id Delete room (owner only). Headers: Authorization: Bearer Parameters: room_id (path) - Room id",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 484,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "entifier 💳 Billing Endpoints (Pro Features) GET /api/billing/products Get available subscription products. Response: `json { \"success\": true, \"data\": { \"products\": [ { \"product_id\": \"pro_monthly\", \"name\": \"Pro Monthly\", \"description\": \"Monthly pro subscription\", \"price\": 999, \"currency\": \"usd\", \"in",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 485,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "terval\": \"month\", \"features\": [ \"Pro rooms access\", \"Advanced features\", \"Priority support\" ] } ] } } ` POST /api/billing/checkout Create Stripe checkout session. Headers: Authorization: Bearer Request Body: `json { \"product_id\": \"pro_monthly\", \"success_url\": \"string\", \"cancel_url\": \"string\" } ` Res",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 486,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "ponse: `json { \"success\": true, \"data\": { \"checkout_url\": \"https://checkout.stripe.com/...\", \"session_id\": \"cs_...\" } } ` POST /api/billing/portal Create customer portal session. Headers: Authorization: Bearer Request Body: `json { \"return_url\": \"string\" } ` POST /api/billing/cancel Cancel subscript",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 487,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "ion. Headers: Authorization: Bearer 🔧 Utility Endpoints GET /api/scrape-url Scrape webpage metadata. Query Parameters: url (required) - URL to scrape Response: `json { \"success\": true, \"data\": { \"title\": \"string\", \"description\": \"string\", \"image\": \"string\", \"url\": \"string\" } } ` GET /health Basic h",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 488,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "ealth check. Response: `json { \"status\": \"healthy\", \"timestamp\": \"2024-01-01T00:00:00Z\" } ` GET /health/detailed Detailed system health check. Response: `json { \"status\": \"healthy\", \"timestamp\": \"2024-01-01T00:00:00Z\", \"services\": { \"database\": \"healthy\", \"redis\": \"healthy\", \"external_apis\": \"health",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 489,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "y\" }, \"metrics\": { \"active_connections\": 150, \"memory_usage\": \"45%\", \"cpu_usage\": \"23%\" } } ` 📊 Error Responses Common Error Codes VALIDATION_ERROR - Invalid request parameters AUTHENTICATION_ERROR - Invalid or missing authentication AUTHORIZATION_ERROR - Insufficient permissions RESOURCE_NOT_FOUND",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 490,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": " - Requested resource doesn't exist RATE_LIMIT_EXCEEDED - Too many requests SERVER_ERROR - Internal server error Error Response Format `json { \"success\": false, \"error\": { \"code\": \"VALIDATION_ERROR\", \"message\": \"Invalid input parameters\", \"details\": { \"field\": \"username\", \"issue\": \"Username already ",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 491,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "exists\" } } } ` 📝 Request/Response Headers Common Request Headers Authorization: Bearer - JWT authentication Content-Type: application/json - JSON request body Accept: application/json - JSON response preferred User-Agent: - Client identification Common Response Headers Content-Type: application/js",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 492,
    "title": "REST API Endpoints",
    "description": "Comprehensive reference for all REST API endpoints in PianoRhythm Server",
    "content": "on - JSON response X-RateLimit-Limit - Rate limit maximum X-RateLimit-Remaining - Remaining requests X-RateLimit-Reset - Rate limit reset time All endpoints support standard HTTP methods and return appropriate status codes. For real-time features, use the WebSocket API documented separately.",
    "url": "/docs\\community\\technical-documentation\\server\\api\\rest-endpoints",
    "type": "docs",
    "tags": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference"
    ],
    "keywords": [
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "rest-api",
      "endpoints",
      "http",
      "authentication",
      "users",
      "rooms",
      "billing",
      "reference",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "REST API Endpoints",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 493,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": "API Documentation PianoRhythm Server provides both REST and WebSocket APIs for comprehensive client integration. This document covers the API architecture, authentication, and general usage patterns. 🔌 API Overview API Types REST API - HTTP endpoints for standard operations WebSocket API - Real-tim",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 494,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": "e bidirectional communication GraphQL - (Future) Flexible query interface Base URLs Production: https://api.pianorhythm.io Staging: https://staging-api.pianorhythm.io Development: http://localhost:8080 🔐 Authentication JWT Token Authentication All authenticated endpoints require a valid JWT token i",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 495,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": "n the Authorization header: `http Authorization: Bearer ` Token Structure `json { \"sub\": \"user_id\", \"username\": \"user123\", \"roles\": \"member\", \"pro\"], \"exp\": 1640995200, \"iat\": 1640908800 } ` Authentication Flow Login - POST /api/auth/login with credentials Token Receipt - Server returns JWT token To",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 496,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": "ken Usage - Include token in subsequent requests Token Refresh - Use refresh token before expiration Role-Based Access Control Guest - Limited read-only access Member - Standard user features Pro - Premium features and rooms Moderator - Moderation capabilities Admin - Full system access 📡 REST API ",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 497,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": "General Patterns Request Format `http POST /api/endpoint Content-Type: application/json Authorization: Bearer { \"parameter\": \"value\" } ` Response Format `json { \"success\": true, \"data\": { \"result\": \"data\" }, \"message\": \"Operation completed successfully\" } ` Error Response Format `json { \"success\": f",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 498,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": "alse, \"error\": { \"code\": \"VALIDATION_ERROR\", \"message\": \"Invalid input parameters\", \"details\": { \"field\": \"username\", \"issue\": \"Username already exists\" } } } ` Core Endpoints Authentication POST /api/auth/login - User login POST /api/auth/register - User registration POST /api/auth/refresh - Token ",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 499,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": "refresh POST /api/auth/logout - User logout GET /api/auth/validate-token - Token validation Users GET /api/users/profile - Get user profile PUT /api/users/profile - Update user profile GET /api/users/{user_id} - Get public user info POST /api/users/avatar - Upload avatar image GET /api/users/friends",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 500,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": " - Get friends list Rooms GET /api/rooms - List public rooms POST /api/rooms - Create new room GET /api/rooms/{room_id} - Get room details PUT /api/rooms/{room_id} - Update room settings DELETE /api/rooms/{room_id} - Delete room Billing (Pro Members) GET /api/billing/products - Available products PO",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 501,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": "ST /api/billing/checkout - Create checkout session POST /api/billing/portal - Customer portal access POST /api/billing/cancel - Cancel subscription Rate Limiting General Endpoints: 100 requests per minute Authentication: 10 requests per minute File Uploads: 5 requests per minute Billing: 20 requests",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 502,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": " per minute Rate limit headers: `http X-RateLimit-Limit: 100 X-RateLimit-Remaining: 95 X-RateLimit-Reset: 1640995200 ` 🔄 WebSocket API Connection Establishment `javascript const ws = new WebSocket('wss://api.pianorhythm.io/api/websocket/{encrypted_payload}'); ` Message Format All WebSocket messages",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 503,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": " use Protocol Buffers for efficient serialization: `protobuf message ServerMessage { ServerMessageType messageType = 1; oneof message { CreateRoomCommand createRoomCommand = 2; JoinRoomCommand joinRoomCommand = 3; ChatMessage chatMessage = 4; MidiMessage midiMessage = 5; // ... other message types }",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 504,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": " } ` Message Types Room Management - Create, join, leave rooms Chat Messages - Text communication MIDI Messages - Musical note data User Commands - Avatar, settings, etc. System Messages - Heartbeat, errors, notifications Connection Lifecycle Connection - WebSocket established Authentication - User ",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 505,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": "credentials validated Session Start - User session initialized Message Exchange - Bidirectional communication Heartbeat - Keep-alive mechanism Disconnection - Graceful or unexpected closure 📊 Data Models User Model `json { \"user_id\": \"uuid\", \"username\": \"string\", \"user_tag\": \"string\", \"email\": \"str",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 506,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": "ing\", \"roles\": [\"string\"], \"is_member\": \"boolean\", \"is_pro\": \"boolean\", \"avatar_url\": \"string\", \"created_at\": \"datetime\", \"last_seen\": \"datetime\" } ` Room Model `json { \"room_id\": \"string\", \"room_name\": \"string\", \"room_owner\": \"string\", \"room_type\": \"public|private|pro\", \"max_users\": \"number\", \"curr",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 507,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": "ent_users\": \"number\", \"has_password\": \"boolean\", \"created_at\": \"datetime\", \"settings\": { \"allow_chat\": \"boolean\", \"allow_guests\": \"boolean\", \"auto_moderation\": \"boolean\" } } ` Chat Message Model `json { \"message_id\": \"string\", \"user_id\": \"string\", \"username\": \"string\", \"message\": \"string\", \"timestam",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 508,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": "p\": \"datetime\", \"message_type\": \"user|system|bot\" } ` 🔍 Error Handling HTTP Status Codes 200 OK - Successful operation 201 Created - Resource created successfully 400 Bad Request - Invalid request parameters 401 Unauthorized - Authentication required 403 Forbidden - Insufficient permissions 404 Not",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 509,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": " Found - Resource not found 429 Too Many Requests - Rate limit exceeded 500 Internal Server Error - Server error Error Categories Validation Errors - Invalid input data Authentication Errors - Login/token issues Authorization Errors - Permission denied Resource Errors - Not found or unavailable Rate",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 510,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": " Limit Errors - Too many requests Server Errors - Internal system issues Error Response Examples `json { \"success\": false, \"error\": { \"code\": \"ROOM_NOT_FOUND\", \"message\": \"The specified room does not exist\", \"details\": { \"room_id\": \"invalid_room_123\" } } } ` 📈 API Versioning Version Strategy URL Ve",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 511,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": "rsioning - /api/v1/endpoint Header Versioning - API-Version: v1 Backward Compatibility - Maintain previous versions Current Versions v1 - Current stable version v2 - (Future) Enhanced features 🔧 SDK and Libraries Official SDKs JavaScript/TypeScript - Web and Node.js C# - Unity and .NET applications",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 512,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": " Python - Server integrations Rust - High-performance clients Community Libraries React Hooks - React integration Vue Composables - Vue.js integration Angular Services - Angular integration 📊 API Monitoring Metrics Tracked Request Volume - Requests per second/minute Response Times - Average and per",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 513,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": "centile latencies Error Rates - Error percentage by endpoint Authentication Success - Login success rates Health Endpoints GET /health - Basic health check GET /health/detailed - Comprehensive system status GET /metrics - Prometheus metrics endpoint 🔮 Future API Features Planned Enhancements GraphQ",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 514,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": "L API - Flexible query interface Webhook Support - Event notifications Batch Operations - Multiple operations in single request Real-time Subscriptions - Server-sent events API Evolution Breaking Changes - Communicated 90 days in advance Deprecation Policy - 6-month deprecation period Migration Guid",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 515,
    "title": "API Documentation",
    "description": "API architecture, authentication, and general usage patterns for PianoRhythm Server",
    "content": "es - Detailed upgrade instructions For detailed endpoint documentation, see: [REST Endpoints WebSocket API",
    "url": "/docs\\community\\technical-documentation\\server\\api\\README",
    "type": "docs",
    "tags": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server"
    ],
    "keywords": [
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "server",
      "api",
      "rest",
      "websocket",
      "authentication",
      "jwt",
      "endpoints",
      "integration",
      "pianorhythm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "API Documentation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 516,
    "title": "UI Components & Design System",
    "description": "",
    "content": "UI Components & Design System PianoRhythm uses a custom fork of Hope UI, a comprehensive component library for SolidJS that provides a consistent design system, theming capabilities, and accessible UI components optimized for real-time musical applications. Architecture Overview `mermaid graph TB su",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 517,
    "title": "UI Components & Design System",
    "description": "",
    "content": "bgraph \"Design System\" DSDesign Tokens] TC[Theme Configuration] CC[Component Customization] end subgraph \"Hope UI Core\" HUI[Hope UI Library] ST[Stitches CSS-in-JS] FUI[Floating UI] FT[Focus Trap] end subgraph \"Custom Components\" BC[Base Components] CC2[Composite Components] SC[Specialized Components",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 518,
    "title": "UI Components & Design System",
    "description": "",
    "content": "] end subgraph \"Application Layer\" PC[Page Components] LC[Layout Components] UC[Utility Components] end DS --> TC TC --> HUI HUI --> ST HUI --> FUI HUI --> FT HUI --> BC BC --> CC2 CC2 --> SC SC --> PC PC --> LC LC --> UC ` Hope UI Integration 1. Custom Fork Configuration ``json { \"dependencies\": { ",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 519,
    "title": "UI Components & Design System",
    "description": "",
    "content": "\"@hope-ui/solid\": \"github:PianoRhythm/hope-ui#main&path:packages/solid\" } } `` Key Features: Custom fork with PianoRhythm-specific modifications Enhanced theming capabilities for dark mode Optimized for real-time audio applications Extended component variants and styling options 2. Provider Setup ``",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 520,
    "title": "UI Components & Design System",
    "description": "",
    "content": "typescript import { HopeProvider } from \"@hope-ui/solid\"; import ThemeConfig from \"./util/theme-config\"; export default function App() { return ( {/* Application content */} ); } `` Theme System 1. Theme Configuration ``typescript const ThemeConfig: HopeThemeConfig = { initialColorMode: \"dark\", dark",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 521,
    "title": "UI Components & Design System",
    "description": "",
    "content": "Theme: { colors: { // Primary color palette primary1: \"#363942\", primary2: \"#434650\", primaryDark1: \"#1f2126\", primaryDark2: \"#2b2d34\", // Accent colors accent1: \"#00d1b2\", accent2: \"#15d6b6\", // Semantic colors tooltipContent: \"#2b2d34\", tooltipArrow: \"#2b2d34\", } }, components: { Button: { baseSty",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 522,
    "title": "UI Components & Design System",
    "description": "",
    "content": "le: { root: { backgroundColor: \"$primary1\", color: \"$neutral12\", transition: \"color 0.1s ease, background-color 0.1s ease\", _hover: { color: \"$neutral1\", backgroundColor: \"$accent2\", } } } } } }; `` 2. Dynamic Theme Switching ``typescript export default function AppThemesService() { const [themeColo",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 523,
    "title": "UI Components & Design System",
    "description": "",
    "content": "rs, setThemeColors] = createStore({ primary: \"#363942\", accent: \"#00d1b2\", tertiary: \"#ef9e08\" }); const setTheme = (selectedTheme: AppThemes) => { let root = document.querySelector(\".hope-ui-dark\") as HTMLElement; switch (selectedTheme) { case AppThemes.THEME_1: setThemeColors(setUIThemeColors(\"#1B",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 524,
    "title": "UI Components & Design System",
    "description": "",
    "content": "2430\")); break; case AppThemes.THEME_2: setThemeColors(setUIThemeColors(\"#16213E\")); break; // ... additional themes } }; } `` Core Components 1. Layout Components Box & Container `typescript import { Box, Container, Center, VStack, HStack } from \"@hope-ui/solid\"; // Flexible layout building blocks ",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 525,
    "title": "UI Components & Design System",
    "description": "",
    "content": "Content ` Responsive Grid `typescript import { SimpleGrid, Grid, GridItem } from \"@hope-ui/solid\"; Item 1 Item 2 Item 3 ` 2. Form Components Input Components ``typescript Input: { baseStyle: { input: { backgroundColor: \"$primary1\", border: \"1px solid var(--hope-colors-neutral9)\", _hover: { border: \"",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 526,
    "title": "UI Components & Design System",
    "description": "",
    "content": "1px solid var(--hope-colors-neutral11)\", }, _focus: { boxShadow: \"none\", }, } } } `` Select Components `typescript import { Select, SelectTrigger, SelectContent, SelectOption } from \"@hope-ui/solid\"; Choose option Option 1 ` 3. Interactive Components Button System ``typescript Button: { baseStyle: {",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 527,
    "title": "UI Components & Design System",
    "description": "",
    "content": " root: { backgroundColor: \"$primary1\", color: \"$neutral12\", transition: \"color 0.1s ease, background-color 0.1s ease\", _focus: { boxShadow: \"none\", }, _active: { transform: \"scale(1.025)\", }, _hover: { color: \"$neutral1\", backgroundColor: \"$accent2\", }, _disabled: { opacity: 0.4, pointerEvents: \"non",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 528,
    "title": "UI Components & Design System",
    "description": "",
    "content": "e\" } } } } `` Modal System ``typescript Modal: { baseStyle: { header: { background: \"$neutral12\", color: \"$primary1\", borderTopRadius: 5, }, body: { backgroundColor: \"$primary1\", }, footer: { background: \"$primary1\", borderTop: \"solid 1px gray\", borderBottomRadius: 5, } } } `` Custom Components 1. S",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 529,
    "title": "UI Components & Design System",
    "description": "",
    "content": "pecialized UI Components Tooltip Help Component ``typescript interface ToolTipHelpProps extends IconProps { tooltipLabel: JSXElement; tooltipSize?: string | number; tooltipPlacement?: string; } const ToolTipHelp_: Component = (props) => { return ( ); }; `` Button with Tooltip ``typescript const Butt",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 530,
    "title": "UI Components & Design System",
    "description": "",
    "content": "onToolTip_: Component void; }> = (props) => { return ( {props.label} ); }; `` 2. Pagination Component ``typescript export const Pagination: Component; totalPages: Accessor; handlePage: (page: number) => void; }> = (props) => { return ( props.handlePage(props.currentPage() - 1)} /> {v => ( props.hand",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 531,
    "title": "UI Components & Design System",
    "description": "",
    "content": "lePage(v + 1)} > {v + 1} )} props.handlePage(props.currentPage() + 1)} /> ); }; `` Design Tokens 1. Color System `typescript // Primary color palette primary1: \"#363942\" // Base primary primary2: \"#434650\" // Lighter primary primaryDark1: \"#1f2126\" // Darker primary primaryDark2: \"#2b2d34\" // Darkes",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 532,
    "title": "UI Components & Design System",
    "description": "",
    "content": "t primary // Accent colors accent1: \"#00d1b2\" // Primary accent (teal) accent2: \"#15d6b6\" // Secondary accent // Semantic colors success: \"#48bb78\" // Success states warning: \"#ed8936\" // Warning states danger: \"#f56565\" // Error states info: \"#4299e1\" // Information states ` 2. Spacing System `type",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 533,
    "title": "UI Components & Design System",
    "description": "",
    "content": "script // Spacing scale (based on 4px base unit) $1: \"0.25rem\" // 4px $2: \"0.5rem\" // 8px $3: \"0.75rem\" // 12px $4: \"1rem\" // 16px $5: \"1.25rem\" // 20px $6: \"1.5rem\" // 24px $8: \"2rem\" // 32px $10: \"2.5rem\" // 40px $12: \"3rem\" // 48px ` 3. Typography Scale `typescript // Font sizes xs: \"0.75rem\" // ",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 534,
    "title": "UI Components & Design System",
    "description": "",
    "content": "12px sm: \"0.875rem\" // 14px base: \"1rem\" // 16px lg: \"1.125rem\" // 18px xl: \"1.25rem\" // 20px \"2xl\": \"1.5rem\" // 24px \"3xl\": \"1.875rem\" // 30px \"4xl\": \"2.25rem\" // 36px ` Responsive Design 1. Breakpoint System `typescript const breakpoints = { \"@initial\": \"0px\", \"@sm\": \"640px\", \"@md\": \"768px\", \"@lg\"",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 535,
    "title": "UI Components & Design System",
    "description": "",
    "content": ": \"1024px\", \"@xl\": \"1280px\", \"@2xl\": \"1536px\" }; ` 2. Responsive Props `typescript // Responsive spacing and sizing Responsive content ` Accessibility Features 1. Focus Management `typescript // Automatic focus trap in modals import { focus-trap } from \"@hope-ui/solid\"; // Keyboard navigation suppor",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 536,
    "title": "UI Components & Design System",
    "description": "",
    "content": "t { if (e.key === 'Enter' || e.key === ' ') { handleClick(); } }}> Accessible Button ` 2. ARIA Support `typescript // Built-in ARIA attributes Close ` Performance Optimizations 1. CSS-in-JS Optimization `typescript // Stitches provides automatic CSS optimization // - Dead code elimination // - Atomi",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 537,
    "title": "UI Components & Design System",
    "description": "",
    "content": "c CSS generation // - Runtime style injection // - Critical CSS extraction ` 2. Component Lazy Loading `typescript // Lazy load heavy components const HeavyModal = lazy(() => import('./HeavyModal')); }> ` Testing Components 1. Component Testing `typescript import { render, screen } from \"@solidjs/te",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 538,
    "title": "UI Components & Design System",
    "description": "",
    "content": "sting-library\"; import { Button } from \"@hope-ui/solid\"; test(\"button renders correctly\", () => { render(() => Click me); expect(screen.getByRole(\"button\")).toHaveTextContent(\"Click me\"); }); ` 2. Theme Testing `typescript test(\"theme colors are applied\", () => { const { container } = render(() => T",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 539,
    "title": "UI Components & Design System",
    "description": "",
    "content": "est ); expect(container.firstChild).toHaveStyle({ backgroundColor: \"rgb(54, 57, 66)\" }); }); ` Next Steps [Frontend Architecture - Overall frontend structure Audio System - Audio-reactive UI components Testing Guide - Component testing strategies",
    "url": "/docs\\community\\technical-documentation\\frontend\\ui-components",
    "type": "docs",
    "tags": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs"
    ],
    "keywords": [
      "hope-ui",
      "design-system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "hope ui",
      "design system",
      "components",
      "theming",
      "styling",
      "solidjs",
      "ui library"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "UI Components & Design System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 540,
    "title": "MIDI Integration",
    "description": "",
    "content": "MIDI Integration PianoRhythm's MIDI integration provides comprehensive support for MIDI devices across web and desktop platforms, enabling real-time musical input and output through the Web MIDI API and native MIDI libraries. Architecture Overview `mermaid graph TB subgraph \"MIDI Input Sources\" WMWe",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 541,
    "title": "MIDI Integration",
    "description": "",
    "content": "b MIDI API] NM[Native MIDI - midir] VM[Virtual MIDI] end subgraph \"MIDI Processing Layer\" WMS[WebMidiService] MP[MIDI Parser] MR[MIDI Router] end subgraph \"Core Engine\" CE[Core Engine] PS[PianoRhythm Synth] AS[Audio System] end subgraph \"Output Destinations\" AO[Audio Output] UI[UI Updates] WS[WebSoc",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 542,
    "title": "MIDI Integration",
    "description": "",
    "content": "ket Sync] end WM --> WMS NM --> WMS VM --> WMS WMS --> MP MP --> MR MR --> CE CE --> PS PS --> AO CE --> UI CE --> WS ` Core Components 1. WebMidiService (src/services/webmidi.service.ts) The main service that coordinates MIDI functionality across platforms: `typescript export default function WebMi",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 543,
    "title": "MIDI Integration",
    "description": "",
    "content": "diService() { const [initialized, setInitialized] = createSignal(false); const [hasMidiPermission, setHasMidiPermission] = createSignal(false); const [midiInputs, setMidiInputs] = createImmerSignal[]>([]); const [midiOutputs, setMidiOutputs] = createImmerSignal[]>([]); const initialize = async (): P",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 544,
    "title": "MIDI Integration",
    "description": "",
    "content": "romise => { if (COMMON.IS_WEB_APP) { const midiAccess = await window.navigator.requestMIDIAccess({ sysex: false }); // Handle MIDI device state changes midiAccess.onstatechange = async () => { await stateChange(); }; } // ... platform-specific initialization }; } ` Key Responsibilities: Cross-platfo",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 545,
    "title": "MIDI Integration",
    "description": "",
    "content": "rm MIDI device detection MIDI permission management Device connection state tracking MIDI message routing Persistent connection preferences 2. MIDI Device Management Web Platform (Web MIDI API) `typescript // Request MIDI access with proper error handling const midiAccess = await window.navigator.re",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 546,
    "title": "MIDI Integration",
    "description": "",
    "content": "questMIDIAccess({ sysex: false }); function stateChange(firstTimeLoad: boolean = false) { return onMidiStateChange_Inputs(Array.from(midiAccess.inputs.values())) .then(() => onMidiStateChange_Outputs(Array.from(midiAccess.outputs.values()), firstTimeLoad)); } midiAccess.onstatechange = async () => {",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 547,
    "title": "MIDI Integration",
    "description": "",
    "content": " await stateChange(); }; ` Desktop Platform (Native MIDI) `rust use midir::{MidiInput, MidiInputConnection, MidiOutput}; pub fn open_midi_input_connection(midi_id: String) -> Result { let midi_in = MidiInput::new(\"pianorhythm-input\"); let port = midi_in.ports().get(midi_id.parse::().unwrap_or(0)); m",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 548,
    "title": "MIDI Integration",
    "description": "",
    "content": "atch port { Some(port) => { let device_id = hash_device_id(midi_id.to_string()); let midi_in_conn = midi_in.connect( &port, \"midir\", move |us, message, _| unsafe { if let Some(x) = SYNTH.get_mut() { _ = x.parse_midi_data(message, &None, Some(NoteSourceType::Midi.to_u8()), Some(device_id)); } }, (), ",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 549,
    "title": "MIDI Integration",
    "description": "",
    "content": "); } None => Err(\"No port found at index.\".to_string()) } } ` 3. MIDI Message Processing MIDI Event Types `typescript export type WebMidiParseEvent = | \"note-on\" | \"note-off\" | \"damper-on\" | \"damper-off\" | \"bank-select\" | \"program-change\" | \"volume\" | \"pitch-bend\" | \"pan\" | \"expression-controller\" |",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 550,
    "title": "MIDI Integration",
    "description": "",
    "content": " \"all-sound-off\" | \"all-notes-off\" | \"mod-wheel\" | \"reverb-depth\"; export enum MIDIChannelMessages { noteoff = 0x8, noteon = 0x9, keyaftertouch = 0xA, controlchange = 0xB, programchange = 0xC, channelaftertouch = 0xD, pitchbend = 0xE, } ` Real-time MIDI Processing `rust pub fn handle_ws_midi_message",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 551,
    "title": "MIDI Integration",
    "description": "",
    "content": "(message: &MidiMessageOutputDto, state: Rc) -> Option> { let midi_message = message.clone(); let message_socket_id = midi_message.get_socketID(); let socket_id_hash = hash_socket_id(&message_socket_id); for buffer in midi_message.get_data().into_iter().filter(|buffer| buffer.data.is_some()) { match ",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 552,
    "title": "MIDI Integration",
    "description": "",
    "content": "buffer_data.messageType { MidiDtoType::NoteOn if buffer_data.has_noteOn() => { let event = PianoRhythmWebSocketMidiNoteOn { channel: value.get_channel() as u8, note: value.get_note() as u8, velocity: value.get_velocity() as u8, program: Some(value.get_program() as u8), // ... additional fields }; pi",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 553,
    "title": "MIDI Integration",
    "description": "",
    "content": "anorhythm_synth::synth_ws_socket_note_on(event, socket_id_hash); } // ... handle other MIDI message types } } } ` Device Connection Management 1. Input Device Handling `typescript const toggleMidiInput = async (input: WebMidiIO) => { if (COMMON.IS_DESKTOP_APP) { let command = input.active ? \"open_mi",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 554,
    "title": "MIDI Integration",
    "description": "",
    "content": "di_input_connection\" : \"close_midi_input_connection\"; await invoke(command, { midiId: input.name }); } else { if (input.active) { appService().coreService()?.open_midi_input_connection(input.name); } else { appService().coreService()?.close_midi_input_connection(input.name); } } }; ` 2. Connection S",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 555,
    "title": "MIDI Integration",
    "description": "",
    "content": "tate Persistence `typescript // Save inactive device preferences await dbService().put(\"inactive-midi-inputs\", midiInputs().filter(x => !x.active).map(x => x.id), savedConnectionsStore ); // Restore connection preferences on startup const inactiveMidiInputs = await dbService().get(\"inactive-midi-inp",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 556,
    "title": "MIDI Integration",
    "description": "",
    "content": "uts\", savedConnectionsStore) || []; ` 3. Device Hot-plugging Support `typescript // Automatic device detection and reconnection midiAccess.onstatechange = async (event) => { const port = event.port; if (port.state === 'connected') { console.log(MIDI device connected: ${port.name}); await addMidiDevi",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 557,
    "title": "MIDI Integration",
    "description": "",
    "content": "ce(port); } else if (port.state === 'disconnected') { console.log(MIDI device disconnected: ${port.name}); await removeMidiDevice(port); } }; ` MIDI Message Routing 1. Channel-based Routing `rust pub(crate) fn handle_event(synth: &mut Core, event: MidiEvent, user: &mut PianoRhythmSocketUser) -> Resu",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 558,
    "title": "MIDI Integration",
    "description": "",
    "content": "lt { match event.check()? { MidiEvent::NoteOn { channel, key, vel } => { if channel as usize > MAX_MIDI_CHANNEL { return Err(OxiError::ChannelOutOfRange); } let gain = if user.is_client { synth.settings.gain } else { map_f32(user.gain, 0.0, 1.0, 0.0, synth.settings.gain) }; if let Ok(user_channel) =",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 559,
    "title": "MIDI Integration",
    "description": "",
    "content": " synth.channels.get_by_user_id_and_channel_id(user.socket_id, channel as usize) { _ = self::noteon(user_channel, &mut synth.voices, /* ... */); } } // ... handle other MIDI events } } ` 2. Multi-user MIDI Support `rust // Each user gets their own MIDI channel mapping pub struct PianoRhythmSocketUser",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 560,
    "title": "MIDI Integration",
    "description": "",
    "content": " { pub socket_id: u32, pub channel: u8, pub volume: f32, pub muted: bool, pub instrument: u8, } // Route MIDI events to appropriate user channels impl PianoRhythmSynthesizer { pub fn route_midi_event(&mut self, event: MidiEvent, device_id: Option) { if let Some(user) = self.get_user_by_device(device",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 561,
    "title": "MIDI Integration",
    "description": "",
    "content": "_id) { self.process_user_midi_event(user, event); } } } ` Error Handling & Recovery 1. Permission Handling `typescript const requestMidiAccess = async (): Promise => { try { const midiAccess = await window.navigator.requestMIDIAccess({ sysex: false }); setHasMidiPermission(true); return true; } catc",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 562,
    "title": "MIDI Integration",
    "description": "",
    "content": "h (ex) { if (typeof ex == \"object\" && (ex as Error)?.name?.includes(\"NotAllowedError\")) { setHasMidiPermission(false); notificationService.show({ type: \"warning\", title: \"MIDI Access Denied\", description: \"MIDI functionality will be limited without device access.\" }); } return false; } }; ` 2. Devic",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 563,
    "title": "MIDI Integration",
    "description": "",
    "content": "e Connection Errors `rust // Graceful handling of device connection failures pub fn open_midi_input_connection(midi_id: String) -> Result { match MidiInput::new(\"pianorhythm-input\") { Ok(midi_in) => { // Attempt connection with retry logic match connect_with_retry(&midi_in, &midi_id, 3) { Ok(_) => O",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 564,
    "title": "MIDI Integration",
    "description": "",
    "content": "k(()), Err(e) => { log::error!(\"Failed to connect to MIDI device: {}\", e); Err(format!(\"Connection failed: {}\", e)) } } } Err(e) => { log::error!(\"Failed to initialize MIDI input: {}\", e); Err(\"MIDI initialization failed\".to_string()) } } } ` Next Steps [Audio System - Audio processing and synthesis",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 565,
    "title": "MIDI Integration",
    "description": "",
    "content": " 3D Rendering - Audio-reactive 3D visualization Core Business Logic - Rust engine deep dive",
    "url": "/docs\\community\\technical-documentation\\frontend\\midi-integration",
    "type": "docs",
    "tags": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices"
    ],
    "keywords": [
      "midi",
      "web-midi-api",
      "real-time",
      "cross-platform",
      "input-devices",
      "midi",
      "web midi api",
      "midi devices",
      "midi input",
      "midi output",
      "real-time",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "MIDI Integration",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 566,
    "title": "Frontend Architecture",
    "description": "",
    "content": "Frontend Architecture PianoRhythm's frontend is built with SolidJS, providing a reactive, high-performance user interface with server-side rendering capabilities. The architecture emphasizes modularity, type safety, and real-time responsiveness. Technology Stack Core Framework SolidJS 1.9.7: Reactiv",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 567,
    "title": "Frontend Architecture",
    "description": "",
    "content": "e UI framework with fine-grained reactivity TypeScript 5.7.3: Type-safe development with strict mode Vinxi 0.5.1: Build system and SSR framework Hope UI: Custom fork of Hope UI component library State Management Solid Services 4.3.2: Dependency injection and service management Solid Immer 0.1.1: Imm",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 568,
    "title": "Frontend Architecture",
    "description": "",
    "content": "utable state updates with Immer RxJS 7.8.1: Reactive programming for complex async operations Routing & Navigation SolidJS Router 0.15.3: File-based routing with SSR support SolidJS Start 1.0.11: Full-stack SolidJS framework Project Structure ` src/ ├── app.tsx # Root application component ├── entry",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 569,
    "title": "Frontend Architecture",
    "description": "",
    "content": "-client.tsx # Client-side entry point ├── entry-server.tsx # Server-side entry point ├── components/ # Reusable UI components ├── contexts/ # React-style contexts (legacy) ├── directives/ # SolidJS directives ├── hooks/ # Custom hooks and utilities ├── i18n/ # Internationalization ├── lib/ # Core bu",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 570,
    "title": "Frontend Architecture",
    "description": "",
    "content": "siness logic ├── models/ # Data models and types ├── packages/ # Internal packages ├── proto/ # Protocol Buffer definitions ├── routes/ # File-based routing ├── sass/ # Styling and themes ├── server/ # Server-side utilities ├── services/ # Application services ├── types/ # TypeScript type definition",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 571,
    "title": "Frontend Architecture",
    "description": "",
    "content": "s ├── util/ # Utility functions ├── workers/ # Web Workers └── worklet.d.ts # Audio Worklet types ` Service Architecture Service Registry Pattern The frontend uses a service-oriented architecture with dependency injection: `typescript // Service registration and injection export default function App",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 572,
    "title": "Frontend Architecture",
    "description": "",
    "content": "() { return ( {/* routes */} ); } // Service usage in components const MyComponent = () => { const appService = useService(AppService); const audioService = useService(AudioService); return {/* component content */}; }; ` Core Services 1. AppService (src/services/app.service.ts) Central application ",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 573,
    "title": "Frontend Architecture",
    "description": "",
    "content": "state management: `typescript export default function AppService() { const clientLoaded, _setClientLoaded] = createSignal(false); const [sceneMode, setSceneMode] = createSignal(PianoRhythmSceneMode.THREE_D); const [client, _setClient] = createSignal(new UserClientDomain()); const [roomID, setRoomID]",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 574,
    "title": "Frontend Architecture",
    "description": "",
    "content": " = createSignal(); const [currentPage, setCurrentPage] = createSignal(CurrentPage.Home); // Event buses for cross-service communication const appStateEvents = createEventBus(); const appStateEffects = createEventBus(); return { // State accessors clientLoaded, client, roomID, currentPage, // State m",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 575,
    "title": "Frontend Architecture",
    "description": "",
    "content": "utators setClient, setRoomID, setCurrentPage, // Event buses appStateEvents, appStateEffects, // Core service integration coreService: () => coreWasmService?.getWasmInstance(), // ... additional methods }; } ` 2. AudioService (src/services/audio.service.ts) Audio processing and synthesis management:",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 576,
    "title": "Frontend Architecture",
    "description": "",
    "content": " `typescript export default function AudioService() { const [initialized, setInitialized] = createSignal(false); const [clientAdded, setClientAdded] = createSignal(false); const [loadedSoundfontName, setLoadedSoundfontName] = createSignal(); const initialize = async () => { // Initialize audio conte",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 577,
    "title": "Frontend Architecture",
    "description": "",
    "content": "xt and synthesizer await initializeAudioContext(); await createSynthesizer(); setInitialized(true); }; return { initialized, clientAdded, loadedSoundfontName, initialize, playNote, stopNote, loadSoundfont, // ... additional audio methods }; } ` 3. WebsocketService (src/services/websocket.service.ts)",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 578,
    "title": "Frontend Architecture",
    "description": "",
    "content": " Real-time communication management: `typescript export default function WebsocketService() { const [connected, setConnected] = createSignal(false); const [initialized, setInitialized] = createSignal(false); const websocketEvents = createEventBus(); const connect = async (wsIdentity: string) => { co",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 579,
    "title": "Frontend Architecture",
    "description": "",
    "content": "nst apiServer = await getApiServerHost(); const webSocketURL = ${apiServer.replace(\"http\", \"ws\")}/api/websocket; await appService().coreService()?.websocket_connect( ${webSocketURL}/${wsIdentity}, onConnect, onError, onClose ); }; return { connected, initialize, connect, disconnect, emitServerComman",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 580,
    "title": "Frontend Architecture",
    "description": "",
    "content": "d, emitChatMessage, websocketEvents, // ... additional websocket methods }; } ` Component Architecture Component Hierarchy `mermaid graph TD A[App.tsx] --> B[ServiceRegistry] B --> C[I18nProvider] C --> D[AppInitialization] C --> E[Router] E --> F[Route Components] F --> G[Page Components] G --> H[U",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 581,
    "title": "Frontend Architecture",
    "description": "",
    "content": "I Components] H --> I[Hope UI Components] D --> J[InitializationService] J --> K[Various Services] ` Component Patterns 1. Service-Aware Components `typescript const RoomComponent = () => { const appService = useService(AppService); const roomsService = useService(RoomsService); const websocketServi",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 582,
    "title": "Frontend Architecture",
    "description": "",
    "content": "ce = useService(WebsocketService); const currentRoom = createMemo(() => appService().currentRoom()); createEffect(() => { if (currentRoom()) { // React to room changes } }); return ( ); }; ` 2. Reactive State Management `typescript const UserList = () => { const usersService = useService(UsersServic",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 583,
    "title": "Frontend Architecture",
    "description": "",
    "content": "e); // Reactive derived state const onlineUsers = createMemo(() => usersService().users().filter(user => user.status === UserStatus.Online) ); const userCount = createMemo(() => onlineUsers().length); return ( Online Users: {userCount()} {(user) => } ); }; ` 3. Event-Driven Communication `typescript",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 584,
    "title": "Frontend Architecture",
    "description": "",
    "content": " const ChatComponent = () => { const chatService = useService(ChatService); const appService = useService(AppService); // Listen to chat events createEffect(() => { const unsubscribe = chatService().addedMessagesEvents.subscribe((message) => { // Handle new message if (message.isSystemMessage) { app",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 585,
    "title": "Frontend Architecture",
    "description": "",
    "content": "Service().showNotification(message.content); } }); onCleanup(unsubscribe); }); return ; }; ` State Management Patterns 1. Immutable Updates with Immer `typescript const [users, setUsers] = createImmerSignal([]); // Immutable state updates setUsers(users => { const existingUser = users.find(u => u.so",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 586,
    "title": "Frontend Architecture",
    "description": "",
    "content": "cketID === newUser.socketID); if (existingUser) { Object.assign(existingUser, newUser); } else { users.push(newUser); } }); ` 2. Reactive Derived State `typescript const AppService = () => { const [users, setUsers] = createSignal([]); const [currentRoomID, setCurrentRoomID] = createSignal(); // Deri",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 587,
    "title": "Frontend Architecture",
    "description": "",
    "content": "ved state const currentRoomUsers = createMemo(() => users().filter(user => user.currentRoomID === currentRoomID()) ); const isRoomEmpty = createMemo(() => currentRoomUsers().length === 0); return { users, currentRoomUsers, isRoomEmpty }; }; ` 3. Cross-Service Communication `typescript // Event bus p",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 588,
    "title": "Frontend Architecture",
    "description": "",
    "content": "attern for loose coupling const appStateEvents = createEventBus(); // Service A emits event appStateEvents.emit(AppStateEvents.UserJoined, userData); // Service B listens to event appStateEvents.listen((event, data) => { if (event === AppStateEvents.UserJoined) { handleUserJoined(data); } }); ` Rout",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 589,
    "title": "Frontend Architecture",
    "description": "",
    "content": "ing Architecture File-Based Routing ` src/routes/ ├── index.tsx # Home page (/) ├── login.tsx # Login page (/login) ├── app-loading.tsx # App loading (/app-loading) ├── room/ │ └── [name].tsx # Dynamic room routes (/room/[name]) ├── sheet-music/ │ └── [[id]].tsx # Optional dynamic routes (/sheet-mus",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 590,
    "title": "Frontend Architecture",
    "description": "",
    "content": "ic/[id?]) └── api/ └── v1/ └── *.ts # API endpoints ` Route Components `typescript // Route with data loading export const route = { async preload(props) { if (props.intent == \"initial\") { await onSessionRestore(); } else { await getMemberSessionInfo(); } } } satisfies RouteDefinition; export defaul",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 591,
    "title": "Frontend Architecture",
    "description": "",
    "content": "t function AppLoading(): JSX.Element { const navigate = useNavigate(); const [searchParams] = useSearchParams(); // Component implementation return ; } ` Navigation Patterns `typescript // Programmatic navigation const navigate = useNavigate(); navigate(/room/${roomName}, { replace: true }); // Rout",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 592,
    "title": "Frontend Architecture",
    "description": "",
    "content": "e parameters const params = useParams(); const roomName = params.name; // Search parameters const [searchParams] = useSearchParams(); const roomId = searchParams.roomId; ` Styling Architecture SASS Module System `scss // Component-specific styles .room-container { display: flex; flex-direction: colu",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 593,
    "title": "Frontend Architecture",
    "description": "",
    "content": "mn; height: 100vh; .room-header { background: var(--hope-colors-primary-500); padding: 1rem; } .room-content { flex: 1; overflow: auto; } } ` Theme System `typescript // Theme configuration const ThemeConfig: HopeThemeConfig = { initialColorMode: \"dark\", useSystemColorMode: true, components: { Butto",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 594,
    "title": "Frontend Architecture",
    "description": "",
    "content": "n: { baseStyle: { borderRadius: \"md\", }, variants: { primary: { bg: \"primary.500\", color: \"white\", }, }, }, }, }; ` Performance Optimizations 1. Fine-Grained Reactivity `typescript // SolidJS automatically optimizes updates const UserCard = (props: { user: UserClientDomain }) => { // Only re-renders",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 595,
    "title": "Frontend Architecture",
    "description": "",
    "content": " when user.name changes return {props.user.name}; }; ` 2. Lazy Loading `typescript // Lazy load heavy components const PianoRenderer = lazy(() => import('~/components/piano-renderer')); const RoomComponent = () => { return ( }> ); }; ` 3. Web Workers `typescript // Offload heavy computations to work",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 29
  },
  {
    "objectID": 596,
    "title": "Frontend Architecture",
    "description": "",
    "content": "ers const audioWorker = new Worker('/workers/audio-processor.js'); audioWorker.postMessage({ type: 'process-audio', data: audioBuffer }); audioWorker.onmessage = (event) => { const processedAudio = event.data; // Handle processed audio }; ` Error Handling Error Boundaries `typescript const App = () ",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 30
  },
  {
    "objectID": 597,
    "title": "Frontend Architecture",
    "description": "",
    "content": "=> { return ( }> ); }; ` Service Error Handling `typescript const AudioService = () => { const handleAudioError = (error: Error) => { console.error('[AudioService] Error:', error); toast.error('Audio initialization failed'); // Attempt recovery setTimeout(() => { initialize().catch(console.error); }",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 31
  },
  {
    "objectID": 598,
    "title": "Frontend Architecture",
    "description": "",
    "content": ", 5000); }; return { handleAudioError }; }; ` Testing Strategy Component Testing `typescript import { render } from '@solidjs/testing-library'; import { ServiceRegistry } from 'solid-services'; import UserCard from './UserCard'; test('renders user information', () => { const mockUser = { name: 'Test",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 32
  },
  {
    "objectID": 599,
    "title": "Frontend Architecture",
    "description": "",
    "content": " User', status: UserStatus.Online }; const { getByText } = render(() => ( )); expect(getByText('Test User')).toBeInTheDocument(); }); ` Service Testing `typescript import { createRoot } from 'solid-js'; import AppService from './app.service'; test('app service manages client state', () => { createRo",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 33
  },
  {
    "objectID": 600,
    "title": "Frontend Architecture",
    "description": "",
    "content": "ot(() => { const service = AppService(); expect(service.clientLoaded()).toBe(false); service.setClientLoaded(true); expect(service.clientLoaded()).toBe(true); }); }); ` Next Steps [Audio System - Audio processing and synthesis MIDI Integration - MIDI device handling and Web MIDI API UI Components - ",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 34
  },
  {
    "objectID": 601,
    "title": "Frontend Architecture",
    "description": "",
    "content": "Hope UI components and design system Testing Guide - Comprehensive testing strategies",
    "url": "/docs\\community\\technical-documentation\\frontend\\frontend-architecture",
    "type": "docs",
    "tags": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture"
    ],
    "keywords": [
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "architecture",
      "frontend",
      "solidjs",
      "typescript",
      "components",
      "services",
      "state management",
      "reactive",
      "ssr"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Frontend Architecture",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 35
  },
  {
    "objectID": 602,
    "title": "Audio System",
    "description": "",
    "content": "Audio System PianoRhythm's audio system is a sophisticated, multi-layered architecture that combines a custom Rust-based synthesizer with Web Audio API integration to deliver low-latency, high-quality audio synthesis for real-time musical collaboration. Architecture Overview `mermaid graph TB subgra",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 603,
    "title": "Audio System",
    "description": "",
    "content": "ph \"Frontend (JavaScript/TypeScript)\" ASAudioService] WA[Web Audio API] AW[Audio Worklet] UI[UI Components] end subgraph \"Core Engine (Rust/WASM)\" PS[PianoRhythm Synthesizer] OS[OxiSynth Engine] SF[Soundfont Manager] FX[Effects Processing] end subgraph \"Audio Pipeline\" MIDI[MIDI Events] BUF[Audio Bu",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 604,
    "title": "Audio System",
    "description": "",
    "content": "ffers] OUT[Audio Output] end UI --> AS AS --> WA WA --> AW AW --> PS PS --> OS PS --> SF PS --> FX MIDI --> PS PS --> BUF BUF --> OUT ` Core Components 1. AudioService (src/services/audio.service.ts) The main frontend service that coordinates audio functionality: `typescript export default function ",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 605,
    "title": "Audio System",
    "description": "",
    "content": "AudioService() { const [initialized, setInitialized] = createSignal(false); const [clientAdded, setClientAdded] = createSignal(false); const [loadedSoundfontName, setLoadedSoundfontName] = createSignal(); const [audioContext, setAudioContext] = createSignal(); const initialize = async () => { // Ini",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 606,
    "title": "Audio System",
    "description": "",
    "content": "tialize Web Audio API context const context = new AudioContext(); setAudioContext(context); // Create synthesizer instance await createSynthesizer(); // Set up audio worklet if supported if (appSettingsService().getSetting(\"AUDIO_USE_WORKLET\")) { await setupAudioWorklet(context); } setInitialized(tr",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 607,
    "title": "Audio System",
    "description": "",
    "content": "ue); }; return { initialized, clientAdded, loadedSoundfontName, initialize, playNote, stopNote, loadSoundfont, // ... additional methods }; } ` Key Responsibilities: Web Audio API context management Synthesizer lifecycle management Audio worklet coordination Soundfont loading and management MIDI eve",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 608,
    "title": "Audio System",
    "description": "",
    "content": "nt processing 2. PianoRhythm Synthesizer (Rust) The core audio engine implemented in Rust: `rust pub struct PianoRhythmSynthesizer { synth: oxisynth::Synth, socket_users: HashMap, client_socket_id: Option, soundfont_loaded: bool, sample_rate: f32, audio_channels: usize, // ... additional fields } im",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 609,
    "title": "Audio System",
    "description": "",
    "content": "pl PianoRhythmSynthesizer { pub fn process(&mut self, output: &mut [f32]) { let mut chunks = output.chunks_exact_mut(2); for chunk in &mut chunks { let (mut l, mut r) = self.read_next(); self.equalize(&mut l); self.equalize(&mut r); chunk[0] = l; chunk[1] = r; } } } ` Key Features: Multi-user audio ",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 610,
    "title": "Audio System",
    "description": "",
    "content": "synthesis Real-time audio processing Built-in effects (reverb, chorus, EQ) Soundfont support Low-latency performance 3. OxiSynth Engine Custom fork of FluidSynth for high-performance synthesis: `rust pub struct Synth { ticks: usize, pub font_bank: FontBank, pub channels: ChannelPool, pub voices: Voi",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 611,
    "title": "Audio System",
    "description": "",
    "content": "cePool, pub reverb: Reverb, pub chorus: Chorus, pub settings: Settings, output: OutputBuffer, } ` Features: SoundFont 2.0 support Real-time voice allocation Advanced effects processing Memory-efficient voice management Cross-platform compatibility Audio Processing Pipeline 1. MIDI Event Flow `mermai",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 612,
    "title": "Audio System",
    "description": "",
    "content": "d sequenceDiagram participant UI as UI Component participant AS as AudioService participant Core as Core Engine participant Synth as Synthesizer participant Audio as Audio Output UI->>AS: playNote(note, velocity) AS->>Core: send_app_action(NoteOn) Core->>Synth: process_midi_event() Synth->>Synth: ge",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 613,
    "title": "Audio System",
    "description": "",
    "content": "nerate_audio() Synth->>Audio: output_samples() ` 2. Audio Buffer Management `typescript // Audio worklet processor class WasmAudioProcessor extends AudioWorkletProcessor { process(inputs: Float32Array[, outputs: Float32Array) { const output = outputs0]; // Process audio through WASM synthesizer this",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 614,
    "title": "Audio System",
    "description": "",
    "content": ".wasmProcessor.process_stereo( output[0], // Left channel output[1] // Right channel ); return true; } } ` 3. Real-time Processing `rust // High-performance audio processing in Rust impl PianoRhythmSynthesizer { pub fn process_stereo(&mut self, buffer_l: &mut [f32], buffer_r: &mut [f32]) { let len =",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 615,
    "title": "Audio System",
    "description": "",
    "content": " buffer_l.len().min(buffer_r.len()); for i in 0..len { let (mut l, mut r) = self.read_next(); // Apply effects processing self.equalize(&mut l); self.equalize(&mut r); buffer_l[i] = l; buffer_r[i] = r; } } } ` Soundfont Management 1. Dynamic Soundfont Loading `typescript const loadSoundfont = async ",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 616,
    "title": "Audio System",
    "description": "",
    "content": "(soundfontUrl: string) => { try { // Fetch soundfont data const response = await fetch(soundfontUrl); const soundfontData = await response.arrayBuffer(); // Load into synthesizer const result = appService().coreService()?.synth_load_soundfont( new Uint8Array(soundfontData) ); if (result) { setLoaded",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 617,
    "title": "Audio System",
    "description": "",
    "content": "SoundfontName(extractSoundfontName(soundfontUrl)); toast.success('Soundfont loaded successfully'); } } catch (error) { console.error('Failed to load soundfont:', error); // Fallback to default soundfont await loadDefaultSoundfont(); } }; ` 2. Soundfont Validation `rust pub fn load_soundfont(&mut sel",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 618,
    "title": "Audio System",
    "description": "",
    "content": "f, soundfont_data: &[u8]) -> Result { // Validate soundfont format if soundfont_data.len() { self.soundfont_loaded = true; Ok(()) } Err(e) => Err(format!(\"Failed to load soundfont: {}\", e)) } } ` 3. Fallback System `typescript const onLoadClientSoundfont = async (): Promise => { const soundfontSetti",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 619,
    "title": "Audio System",
    "description": "",
    "content": "ng = appSettingsService().getSetting(\"SOUNDFONT\"); // Try user-selected soundfont first if (soundfontSetting && soundfontSetting !== \"default\") { const success = await loadSoundfont(soundfontSetting); if (success) return true; } // Fallback to default soundfont const defaultSoundfont = await getDefa",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 620,
    "title": "Audio System",
    "description": "",
    "content": "ultSoundfontUrl(); return await loadSoundfont(defaultSoundfont); }; ` Effects Processing 1. Built-in Effects `rust pub struct EffectsChain { pub reverb: Reverb, pub chorus: Chorus, pub equalizer: Equalizer, } impl EffectsChain { pub fn process(&mut self, left: &mut f32, right: &mut f32) { // Apply r",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 621,
    "title": "Audio System",
    "description": "",
    "content": "everb if self.reverb.is_active() { self.reverb.process(left, right); } // Apply chorus if self.chorus.is_active() { self.chorus.process(left, right); } // Apply EQ self.equalizer.process(left, right); } } ` 2. Real-time Parameter Control `typescript const updateReverbLevel = (level: number) => { app",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 622,
    "title": "Audio System",
    "description": "",
    "content": "Service().coreService()?.send_app_action(AppStateActions.create({ action: AppStateActions_Action.SynthAction, audioSynthAction: AudioSynthActions.create({ action: AudioSynthActions_Action.SetReverbLevel, floatValue: level }) })); }; ` 3. Effect Presets `typescript const EFFECT_PRESETS = { hall: { re",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 623,
    "title": "Audio System",
    "description": "",
    "content": "verb: 0.8, chorus: 0.2, eq: [0, 2, 1, 0, -1] }, room: { reverb: 0.4, chorus: 0.1, eq: [1, 1, 0, 0, 0] }, studio: { reverb: 0.2, chorus: 0.3, eq: [0, 0, 1, 1, 0] }, dry: { reverb: 0.0, chorus: 0.0, eq: [0, 0, 0, 0, 0] } }; ` Multi-User Audio 1. User Channel Management `rust pub struct PianoRhythmSock",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 624,
    "title": "Audio System",
    "description": "",
    "content": "etUser { pub socket_id: u32, pub channel: u8, pub volume: f32, pub muted: bool, pub instrument: u8, } impl PianoRhythmSynthesizer { pub fn add_user(&mut self, socket_id: u32) -> Option { let user = PianoRhythmSocketUser { socket_id, channel: self.get_next_available_channel(), volume: 1.0, muted: fal",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 625,
    "title": "Audio System",
    "description": "",
    "content": "se, instrument: 0, // Piano }; self.socket_users.insert(socket_id, user); Some(socket_id) } } ` 2. Audio Mixing `rust impl PianoRhythmSynthesizer { fn mix_user_audio(&mut self, output: &mut [f32]) { for user in self.socket_users.values() { if !user.muted { let user_audio = self.get_user_audio(user.s",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 626,
    "title": "Audio System",
    "description": "",
    "content": "ocket_id); for (i, sample) in user_audio.iter().enumerate() { if i { appService().coreService()?.send_app_action(AppStateActions.create({ action: AppStateActions_Action.SynthAction, audioSynthAction: AudioSynthActions.create({ action: AudioSynthActions_Action.SetUserVolume, socketId: socketId, float",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 627,
    "title": "Audio System",
    "description": "",
    "content": "Value: volume }) })); }; ` Performance Optimizations 1. Audio Worklet Integration `typescript // Register audio worklet await audioContext.audioWorklet.addModule('/worklet/wasm-processor.worklet.js'); // Create worklet node const workletNode = new AudioWorkletNode(audioContext, 'wasm-audio-processor",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 628,
    "title": "Audio System",
    "description": "",
    "content": "', { numberOfInputs: 0, numberOfOutputs: 1, outputChannelCount: [2] }); // Connect to audio output workletNode.connect(audioContext.destination); ` 2. Buffer Size Optimization `rust // Optimized buffer sizes for different scenarios pub const BUFFER_SIZE_LOW_LATENCY: usize = 64; // ~1.5ms at 44.1kHz ",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 629,
    "title": "Audio System",
    "description": "",
    "content": "pub const BUFFER_SIZE_BALANCED: usize = 128; // ~3ms at 44.1kHz pub const BUFFER_SIZE_HIGH_QUALITY: usize = 256; // ~6ms at 44.1kHz impl PianoRhythmSynthesizer { pub fn set_buffer_size(&mut self, size: usize) { self.buffer_size = size; self.output_buffer.resize(size * 2); // Stereo } } ` 3. Voice Ma",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 630,
    "title": "Audio System",
    "description": "",
    "content": "nagement `rust pub struct VoicePool { voices: Vec, active_voices: usize, max_voices: usize, } impl VoicePool { pub fn allocate_voice(&mut self) -> Option { if self.active_voices { if (audioContext()?.state === 'suspended') { try { await audioContext()?.resume(); console.log('Audio context resumed');",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 631,
    "title": "Audio System",
    "description": "",
    "content": " } catch (error) { console.error('Failed to resume audio context:', error); // Reinitialize audio system await initialize(); } } }; ` 2. Synthesizer Error Recovery `rust impl PianoRhythmSynthesizer { pub fn handle_error(&mut self, error: SynthError) -> Result { match error { SynthError::VoiceAllocat",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 29
  },
  {
    "objectID": 632,
    "title": "Audio System",
    "description": "",
    "content": "ionFailed => { // Clear all voices and restart self.reset_all_voices(); Ok(()) } SynthError::SoundfontCorrupted => { // Reload default soundfont self.load_default_soundfont() } SynthError::AudioBufferUnderrun => { // Increase buffer size self.increase_buffer_size(); Ok(()) } } } } ` 3. Graceful Degr",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 30
  },
  {
    "objectID": 633,
    "title": "Audio System",
    "description": "",
    "content": "adation `typescript const initializeAudioWithFallback = async () => { try { // Try modern audio worklet approach await initializeWithWorklet(); } catch (error) { console.warn('Audio worklet not supported, falling back to script processor'); try { // Fallback to script processor await initializeWithS",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 31
  },
  {
    "objectID": 634,
    "title": "Audio System",
    "description": "",
    "content": "criptProcessor(); } catch (fallbackError) { console.error('All audio initialization methods failed'); // Disable audio features setAudioEnabled(false); } } }; ` Testing & Debugging 1. Audio Testing `typescript describe('AudioService', () => { it('should initialize audio context', async () => { const",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 32
  },
  {
    "objectID": 635,
    "title": "Audio System",
    "description": "",
    "content": " service = AudioService(); await service.initialize(); expect(service.initialized()).toBe(true); expect(service.audioContext()).toBeInstanceOf(AudioContext); }); it('should handle note events', async () => { const service = AudioService(); await service.initialize(); const spy = vi.spyOn(service, 'p",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 33
  },
  {
    "objectID": 636,
    "title": "Audio System",
    "description": "",
    "content": "layNote'); service.playNote(60, 127); // Middle C, full velocity expect(spy).toHaveBeenCalledWith(60, 127); }); }); ` 2. Performance Monitoring `typescript const monitorAudioPerformance = () => { const startTime = performance.now(); // Process audio synthesizer.process(audioBuffer); const processing",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 34
  },
  {
    "objectID": 637,
    "title": "Audio System",
    "description": "",
    "content": "Time = performance.now() - startTime; if (processingTime > AUDIO_DEADLINE) { console.warn(Audio processing took ${processingTime}ms (deadline: ${AUDIO_DEADLINE}ms)); } }; ` Next Steps [MIDI Integration - MIDI device handling and Web MIDI API 3D Rendering - Audio-reactive 3D visualization Core Busine",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 35
  },
  {
    "objectID": 638,
    "title": "Audio System",
    "description": "",
    "content": "ss Logic - Rust engine deep dive",
    "url": "/docs\\community\\technical-documentation\\frontend\\audio-system",
    "type": "docs",
    "tags": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance"
    ],
    "keywords": [
      "audio",
      "synthesizer",
      "web-audio-api",
      "rust",
      "real-time",
      "performance",
      "audio",
      "synthesizer",
      "web audio api",
      "rust",
      "low-latency",
      "real-time",
      "audio processing",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Audio System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 36
  },
  {
    "objectID": 639,
    "title": "3D Rendering",
    "description": "",
    "content": "3D Rendering PianoRhythm's 3D rendering system is built on the Bevy game engine, providing high-performance, audio-reactive 3D visualizations that run seamlessly across web and desktop platforms through WebGL2/WebGPU and native rendering backends. Architecture Overview `mermaid graph TB subgraph \"Fr",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 640,
    "title": "3D Rendering",
    "description": "",
    "content": "ontend Layer\" CCCanvas Component] ER[Event Router] CM[Canvas Manager] end subgraph \"Rendering Backends\" WG[WebGPU Backend] WGL[WebGL2 Backend] NR[Native Renderer] end subgraph \"Bevy Engine (Rust/WASM)\" BA[Bevy App] ECS[Entity Component System] RS[Rendering Systems] PS[Plugin System] end subgraph \"Au",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 641,
    "title": "3D Rendering",
    "description": "",
    "content": "dio Integration\" AS[Audio Service] SE[Synth Events] AV[Audio Visualization] end subgraph \"3D Scene\" PM[Piano Model] DM[Drum Model] PE[Particle Effects] CAM[Camera System] end CC --> CM CM --> WG CM --> WGL CM --> NR WG --> BA WGL --> BA NR --> BA BA --> ECS ECS --> RS ECS --> PS AS --> SE SE --> AV ",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 642,
    "title": "3D Rendering",
    "description": "",
    "content": "AV --> ECS ECS --> PM ECS --> DM ECS --> PE ECS --> CAM ` Core Components 1. Canvas3D Component (src/components/canvas/piano.canvas3D.tsx) The main React component that manages 3D rendering: ``typescript export default function Canvas3D() { const [canvasMounted, setCanvasMounted] = createSignal(fals",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 643,
    "title": "3D Rendering",
    "description": "",
    "content": "e); const [useWebGPU, setUseWebGPU] = createSignal(true); const [renderer, setRenderer] = createSignal(); function mount3DCanvas(mountedCanvas: HTMLCanvasElement) { if (!mountedCanvas || canvasMounted()) return; setCanvasMounted(true); setCanvasID(mountedCanvas.parentElement?.id ?? mountedCanvas.id)",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 644,
    "title": "3D Rendering",
    "description": "",
    "content": "; // Determine rendering approach let shouldUseOffscreenCanvas = determineCanvasMode(); if (shouldUseOffscreenCanvas) { loadViaOffscreenCanvas(mountedCanvas); } else { loadRenderingEngine(true); } } } `` Key Responsibilities: Canvas lifecycle management Rendering backend selection (WebGPU/WebGL2) Of",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 645,
    "title": "3D Rendering",
    "description": "",
    "content": "fscreen canvas coordination Event handling setup Performance monitoring 2. Bevy Rendering Engine Core App Structure ``rust pub fn create_app(headless: bool) -> App { let mut app = App::new(); app.insert_resource(ClearColor(Color::NONE)) .add_plugins((default_plugins, MeshPickingPlugin)) .add_plugins",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 646,
    "title": "3D Rendering",
    "description": "",
    "content": "(bevy_sequential_actions::SequentialActionsPlugin) .add_plugins(bevy_tweening::TweeningPlugin) .add_plugins(crate::core::CorePlugin::default()); #[cfg(debug_assertions)] { // Development plugins for debugging } app } `` Plugin System ``rust impl Plugin for CorePlugin { fn build(&self, app: &mut App)",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 647,
    "title": "3D Rendering",
    "description": "",
    "content": " { app.add_plugins(LookTransformPlugin) .add_plugins(OrbitCameraPlugin { override_input_system: true }) .add_plugins(plugins::stages::StagesPlugin::default()) .add_plugins(plugins::piano::PianoModelPlugin::default()) .add_plugins(plugins::drums::DrumsModelPlugin::default()); } } `` 3. Rendering Back",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 648,
    "title": "3D Rendering",
    "description": "",
    "content": "end Selection WebGPU vs WebGL2 Detection ``typescript async function setupMainThreadRenderer(devicePixelRatio: number) { const bevyRenderer = useWebGPU() ? webgpuRenderer : webgl2Renderer; logDebug(Using ${useWebGPU() ? \"WebGPU\" : \"WebGL2\"} renderer.); if (!bevyRenderer) { errorHandler.handleError(\"",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 649,
    "title": "3D Rendering",
    "description": "",
    "content": "Bevy renderer not found\"); throw new Error(\"Bevy renderer not found.\"); } await bevyRenderer.default(); if (useWebGPU()) { appHandle = bevyRenderer.create_app(false); setRendererPtr(appHandle); bevyRenderer?.create_window_by_canvas(appHandle, canvasID()!, devicePixelRatio); animFram = requestAnimati",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 650,
    "title": "3D Rendering",
    "description": "",
    "content": "onFrame(enterFrame); } } `` Fallback Strategy `typescript const initializeRenderingWithFallback = async () => { try { // Try WebGPU first setUseWebGPU(true); await loadRenderingEngine(true); } catch (webgpuError) { console.warn('WebGPU failed, falling back to WebGL2:', webgpuError); try { // Fallbac",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 651,
    "title": "3D Rendering",
    "description": "",
    "content": "k to WebGL2 setUseWebGPU(false); await loadRenderingEngine(true, true); } catch (webglError) { console.error('All rendering backends failed:', webglError); // Fallback to 2D mode setIs2DMode(true); } } }; ` Audio-Reactive Visualization 1. Piano Key Animation ``rust pub fn receiving_events( mut comma",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 652,
    "title": "3D Rendering",
    "description": "",
    "content": "nds: Commands, mut event_reader: EventReader, mut query: Query, With)>, ) { for my_event in event_reader.read() { match &my_event { ECSSynthEventsAction::NoteOn(data) if data.channel != DRUM_CHANNEL => { for (entity, , mut state) in query.iter_mut().filter(|(, midi, ..)| midi.0 == data.note) { comma",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 653,
    "title": "3D Rendering",
    "description": "",
    "content": "nds.entity(entity) .remove::() .insert(OnActiveNote(data.clone())); state.is_down = true; } } // ... handle other events } } } `` 2. Real-time Animation Systems ``rust pub(super) fn on_base_mesh_color_changed( mut commands: Commands, query: Query, mut materials: ResMut>, ) { for item in query.iter()",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 654,
    "title": "3D Rendering",
    "description": "",
    "content": " { if let Some(material) = materials.get_mut(&item.material_handle.0) { // Apply color animation based on audio events let tween = Tween::new( EaseFunction::QuadraticInOut, Duration::from_millis(150), StandardMaterialBaseColorLens { start: material.base_color, end: item.base_mesh_color.0, }, ); comm",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 655,
    "title": "3D Rendering",
    "description": "",
    "content": "ands.entity(item.key.entity).insert(AssetAnimator::new(tween)); } } } `` 3. Particle Effects System `rust // Audio-reactive particle effects (commented code from core/mod.rs) fn setup_particle_effects( mut commands: Commands, mut effects: ResMut>, ) { let writer = ExprWriter::new(); // Create note-t",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 656,
    "title": "3D Rendering",
    "description": "",
    "content": "riggered particle effect let init_pos = SetPositionSphereModifier { center: writer.lit(Vec3::ZERO).expr(), radius: writer.lit(2.0).expr(), dimension: ShapeDimension::Surface, }; let init_vel = SetVelocitySphereModifier { center: writer.lit(Vec3::ZERO).expr(), speed: writer.lit(5.0).expr(), }; let ef",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 657,
    "title": "3D Rendering",
    "description": "",
    "content": "fect = EffectAsset::new( 32, Spawner::rate(3.0.into()), writer.finish(), ) .with_name(\"note-particles\") .with_alpha_mode(bevy_hanabi::AlphaMode::Blend); commands.spawn(ParticleEffectBundle { effect: ParticleEffect::new(effects.add(effect)), transform: Transform::from_translation(Vec3::new(0.0, 1.0, ",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 658,
    "title": "3D Rendering",
    "description": "",
    "content": "0.0)), ..default() }); } ` Camera System 1. Orbit Camera Setup ``rust pub fn setup_camera(mut commands: Commands, app_settings: Res) { let mut entity_commands = commands.spawn(( Camera3d::default(), Camera { order: 0, hdr: app_settings.0.GRAPHICS_ENABLE_HDR, ..default() }, Tonemapping::AgX, crate::c",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 659,
    "title": "3D Rendering",
    "description": "",
    "content": "omponents::MainCamera, )); #[cfg(feature = \"desktop\")] { entity_commands .insert(bevy::pbr::ClusterConfig::Single) .insert(bevy::render::view::NoCpuCulling); } } `` 2. Smooth Camera Controls `rust // Orbit camera with smooth transitions pub fn setup_orbit_camera( mut commands: Commands, mut look_tra",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 660,
    "title": "3D Rendering",
    "description": "",
    "content": "nsform: ResMut, ) { // Set initial camera position look_transform.target = Vec3::new(0.0, 0.0, 0.0); look_transform.eye = Vec3::new(0.0, 5.0, 10.0); look_transform.up = Vec3::Y; commands.spawn(( Camera3dBundle::default(), LookTransformBundle { transform: *look_transform, smoother: Smoother::new(0.9)",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 661,
    "title": "3D Rendering",
    "description": "",
    "content": ", }, OrbitCameraBundle::new( OrbitCameraController::default(), Vec3::new(-2.0, 5.0, 5.0), Vec3::new(0., 0., 0.), Vec3::Y, ), )); } ` Performance Optimizations 1. Offscreen Canvas Support ``typescript function loadViaOffscreenCanvas(mountedCanvas: HTMLCanvasElement) { if (!supportsOffscreenCanvas()) ",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 662,
    "title": "3D Rendering",
    "description": "",
    "content": "{ return loadRenderingEngine(true); } const offscreenCanvas = mountedCanvas.transferControlToOffscreen(); const worker = new Worker('/workers/canvas-worker.js'); worker.postMessage({ type: 'init', canvas: offscreenCanvas, devicePixelRatio: window.devicePixelRatio }, [offscreenCanvas]); setCanvasWork",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 663,
    "title": "3D Rendering",
    "description": "",
    "content": "er(worker); } `` 2. LOD (Level of Detail) System `rust // Dynamic mesh quality based on distance pub fn update_lod_system( mut query: Query, &LODComponent)>, camera_query: Query, Without)>, mut meshes: ResMut>, ) { if let Ok(camera_transform) = camera_query.get_single() { for (transform, mut mesh_ha",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 664,
    "title": "3D Rendering",
    "description": "",
    "content": "ndle, lod) in query.iter_mut() { let distance = camera_transform.translation.distance(transform.translation); let lod_level = match distance { d if d LODLevel::High, d if d LODLevel::Medium, _ => LODLevel::Low, }; if lod.current_level != lod_level { *mesh_handle = lod.get_mesh_for_level(lod_level); ",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 665,
    "title": "3D Rendering",
    "description": "",
    "content": "} } } } ` 3. Frustum Culling `rust // Automatic culling of off-screen objects #[cfg(feature = \"desktop\")] entity_commands .insert(bevy::pbr::ClusterConfig::Single) .insert(bevy::render::view::NoCpuCulling); ` Cross-Platform Considerations 1. Desktop vs Web Rendering `typescript // Platform-specific ",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 666,
    "title": "3D Rendering",
    "description": "",
    "content": "renderer setup if (COMMON.IS_DESKTOP_APP) { setupDesktopRenderer(); } else if (mainThread) { await setupMainThreadRenderer(devicePixelRatio); } else { await setupWorkerRenderer(); } ` 2. Mobile Optimization `rust // Mobile-specific optimizations #[cfg(target_os = \"android\")] fn setup_mobile_optimiza",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 667,
    "title": "3D Rendering",
    "description": "",
    "content": "tions(app: &mut App) { app.insert_resource(MobileSettings { max_lights: 4, shadow_quality: ShadowQuality::Low, particle_count: 16, }); } ` Error Handling & Recovery 1. Rendering Error Recovery ``typescript export class RendererErrorHandler { handleError(error: string) { console.error('Renderer error",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 668,
    "title": "3D Rendering",
    "description": "",
    "content": ":', error); // Attempt recovery strategies if (error.includes('WebGPU')) { this.fallbackToWebGL(); } else if (error.includes('WebGL')) { this.fallbackTo2D(); } else { this.showErrorMessage(error); } } private fallbackToWebGL() { setUseWebGPU(false); loadRenderingEngine(true, true); } private fallbac",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 29
  },
  {
    "objectID": 669,
    "title": "3D Rendering",
    "description": "",
    "content": "kTo2D() { setIs2DMode(true); notificationService.show({ type: 'warning', title: '3D Rendering Unavailable', description: 'Falling back to 2D mode due to graphics limitations.' }); } } `` 2. Memory Management `rust // Automatic cleanup of unused resources pub fn cleanup_unused_meshes( mut commands: C",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 30
  },
  {
    "objectID": 670,
    "title": "3D Rendering",
    "description": "",
    "content": "ommands, query: Query, Without)>, time: Res, ) { for entity in query.iter() { // Remove meshes that haven't been used recently commands.entity(entity).despawn_recursive(); } } ` Testing & Debugging 1. Performance Monitoring `typescript const monitorRenderingPerformance = () => { const stats = { fps:",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 31
  },
  {
    "objectID": 671,
    "title": "3D Rendering",
    "description": "",
    "content": " 0, frameTime: 0, drawCalls: 0, triangles: 0 }; // Monitor frame rate let lastTime = performance.now(); const measureFrame = () => { const now = performance.now(); stats.frameTime = now - lastTime; stats.fps = 1000 / stats.frameTime; lastTime = now; if (stats.fps >, mut materials: ResMut>, ) { if in",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 32
  },
  {
    "objectID": 672,
    "title": "3D Rendering",
    "description": "",
    "content": "put.just_pressed(KeyCode::F1) { for (_, material) in materials.iter_mut() { material.cull_mode = match material.cull_mode { Some(Face::Back) => None, _ => Some(Face::Back), }; } } } ` Next Steps [Audio System - Audio processing and synthesis MIDI Integration - MIDI device handling and Web MIDI API C",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 33
  },
  {
    "objectID": 673,
    "title": "3D Rendering",
    "description": "",
    "content": "ore Business Logic - Rust engine deep dive",
    "url": "/docs\\community\\technical-documentation\\frontend\\3d-rendering",
    "type": "docs",
    "tags": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time"
    ],
    "keywords": [
      "3d-rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio-visualization",
      "real-time",
      "3d rendering",
      "bevy",
      "webgl",
      "webgpu",
      "wasm",
      "audio visualization",
      "real-time graphics"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "3D Rendering",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 34
  },
  {
    "objectID": 674,
    "title": "Testing Guide",
    "description": "",
    "content": "Testing Guide PianoRhythm employs a comprehensive testing strategy that ensures reliability, performance, and maintainability across the entire application stack. This guide covers unit testing, integration testing, end-to-end testing, and specialized testing for audio and real-time features. Testin",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 675,
    "title": "Testing Guide",
    "description": "",
    "content": "g Architecture `mermaid graph TB subgraph \"Testing Pyramid\" E2EEnd-to-End TestsCypress] INT[Integration TestsVitest + Testing Library] UNIT[Unit TestsVitest + Mocks] end subgraph \"Specialized Testing\" AUDIO[Audio TestingMock Audio Context] RT[Real-time TestingWebSocket Mocks] RUST[Rust TestingCargo ",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 676,
    "title": "Testing Guide",
    "description": "",
    "content": "Test] end subgraph \"Test Infrastructure\" MOCK[Mock Services] FIX[Test Fixtures] UTIL[Test Utilities] end UNIT --> MOCK INT --> FIX E2E --> UTIL AUDIO --> MOCK RT --> MOCK RUST --> UTIL ` Testing Stack Core Testing Tools Vitest 2.1.8: Fast unit test runner with native TypeScript support @solidjs/test",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 677,
    "title": "Testing Guide",
    "description": "",
    "content": "ing-library 0.8.10: SolidJS-specific testing utilities Cypress 13.17.0: End-to-end testing framework @testing-library/jest-dom 6.5.0: Custom DOM matchers @testing-library/user-event 14.5.2: User interaction simulation Testing Configuration `typescript // vitest.config.ts export default defineConfig(",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 678,
    "title": "Testing Guide",
    "description": "",
    "content": "{ test: { globals: true, setupFiles: [ '@vitest/web-worker', 'fake-indexeddb/auto', './tests/vitest.setup.ts' ], server: { deps: { inline: [\"solid-markdown\"] } }, exclude: [ '/pianorhythm_core/', '/cypress/', '/build/', '/node_modules/' ] } }); ` Unit Testing 1. Service Testing Services are the core",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 679,
    "title": "Testing Guide",
    "description": "",
    "content": " business logic units and require comprehensive testing: `typescript // Example: AudioService test import { createRoot } from 'solid-js'; import { describe, it, expect, vi, beforeEach } from 'vitest'; import AudioService from '~/services/audio.service'; import { MockCoreService } from '@test/mocks/s",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 680,
    "title": "Testing Guide",
    "description": "",
    "content": "ervice.mocks'; describe('AudioService', () => { let audioService: ReturnType; beforeEach(() => { createRoot(() => { audioService = AudioService(); }); }); it('should initialize audio context', async () => { const mockAudioContext = { state: 'running', sampleRate: 44100, destination: {} }; global.Aud",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 681,
    "title": "Testing Guide",
    "description": "",
    "content": "ioContext = vi.fn(() => mockAudioContext); await audioService.initialize(); expect(audioService.initialized()).toBe(true); expect(audioService.audioContext()).toBe(mockAudioContext); }); it('should handle note events', () => { const mockCoreService = MockCoreService(); const spy = vi.spyOn(mockCoreS",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 682,
    "title": "Testing Guide",
    "description": "",
    "content": "ervice, 'send_app_action'); audioService.playNote(60, 127); expect(spy).toHaveBeenCalledWith( expect.objectContaining({ action: expect.any(Number), audioSynthAction: expect.objectContaining({ action: expect.any(Number), note: 60, velocity: 127 }) }) ); }); }); ` 2. Component Testing Components are t",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 683,
    "title": "Testing Guide",
    "description": "",
    "content": "ested for rendering, user interactions, and state management: `typescript // Example: UserCard component test import { render, screen } from '@solidjs/testing-library'; import { ServiceRegistry } from 'solid-services'; import UserCard from '~/components/UserCard'; import { UserStatus } from '~/proto",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 684,
    "title": "Testing Guide",
    "description": "",
    "content": "/user-renditions'; describe('UserCard', () => { const mockUser = { socketID: 'test-socket', userDto: { usertag: 'testuser', username: 'Test User', status: UserStatus.Online } }; it('renders user information correctly', () => { render(() => ( )); expect(screen.getByText('Test User')).toBeInTheDocumen",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 685,
    "title": "Testing Guide",
    "description": "",
    "content": "t(); expect(screen.getByText('@testuser')).toBeInTheDocument(); expect(screen.getByTestId('user-status')).toHaveClass('online'); }); it('handles user interaction', async () => { const onUserClick = vi.fn(); render(() => ( )); const userCard = screen.getByRole('button'); await userEvent.click(userCar",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 686,
    "title": "Testing Guide",
    "description": "",
    "content": "d); expect(onUserClick).toHaveBeenCalledWith(mockUser); }); }); ` 3. Utility Testing Utility functions require focused testing for edge cases: `typescript // Example: Utility function test import { describe, it, expect } from 'vitest'; import { formatDuration, parseZipzon } from '~/util/helpers'; de",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 687,
    "title": "Testing Guide",
    "description": "",
    "content": "scribe('Utility Functions', () => { describe('formatDuration', () => { it('formats seconds correctly', () => { expect(formatDuration(0)).toBe('0:00'); expect(formatDuration(65)).toBe('1:05'); expect(formatDuration(3661)).toBe('1:01:01'); }); it('handles edge cases', () => { expect(formatDuration(-1)",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 688,
    "title": "Testing Guide",
    "description": "",
    "content": ").toBe('0:00'); expect(formatDuration(Infinity)).toBe('∞'); expect(formatDuration(NaN)).toBe('0:00'); }); }); describe('parseZipzon', () => { it('parses valid zipzon data', () => { const data = { test: 'value', number: 42 }; const compressed = zipson.stringify(data); expect(parseZipzon(compressed)).",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 689,
    "title": "Testing Guide",
    "description": "",
    "content": "toEqual(data); }); it('handles invalid data gracefully', () => { expect(parseZipzon('invalid')).toBeNull(); expect(parseZipzon('')).toBeNull(); }); }); }); ` Integration Testing 1. Service Integration Testing how services work together: `typescript // Example: Service integration test import { creat",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 690,
    "title": "Testing Guide",
    "description": "",
    "content": "eRoot } from 'solid-js'; import { describe, it, expect, beforeEach } from 'vitest'; import AppService from '~/services/app.service'; import WebsocketService from '~/services/websocket.service'; import AudioService from '~/services/audio.service'; describe('Service Integration', () => { let appServic",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 691,
    "title": "Testing Guide",
    "description": "",
    "content": "e: ReturnType; let websocketService: ReturnType; let audioService: ReturnType; beforeEach(() => { createRoot(() => { appService = AppService(); websocketService = WebsocketService(); audioService = AudioService(); }); }); it('should coordinate initialization properly', async () => { // Test initiali",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 692,
    "title": "Testing Guide",
    "description": "",
    "content": "zation sequence await audioService.initialize(); expect(audioService.initialized()).toBe(true); websocketService.initialize(); expect(websocketService.initialized()).toBe(true); // Test cross-service communication appService.appStateEvents.emit('UserJoined', { socketId: 'test' }); // Verify services",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 693,
    "title": "Testing Guide",
    "description": "",
    "content": " respond to events expect(audioService.clientAdded()).toBe(true); }); }); ` 2. API Integration Testing API endpoints with database integration: `typescript // Example: API integration test import { describe, it, expect, beforeEach, afterEach } from 'vitest'; import { Database } from '~/lib/db/db-sto",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 694,
    "title": "Testing Guide",
    "description": "",
    "content": "re'; import { POST } from '~/routes/api/v1/sheet_music/search'; describe('Sheet Music API', () => { beforeEach(async () => { // Set up test database Database.getInstance().init('mongodb://localhost:27017', 'test_db'); // Insert test data const collection = Database.getInstance().getDb().collection('",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 695,
    "title": "Testing Guide",
    "description": "",
    "content": "sheet_music'); await collection.insertMany([ { title: 'Test Song 1', category: 'classical' }, { title: 'Test Song 2', category: 'jazz' } ]); }); afterEach(async () => { // Clean up test data const collection = Database.getInstance().getDb().collection('sheet_music'); await collection.deleteMany({});",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 696,
    "title": "Testing Guide",
    "description": "",
    "content": " }); it('should search sheet music correctly', async () => { const request = new Request('http://localhost/api/v1/sheet_music/search', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ query: 'Test', limit: 10, skip: 0 }) }); const response = await POST({ requ",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 697,
    "title": "Testing Guide",
    "description": "",
    "content": "est } as any); const data = await response.json(); expect(response.status).toBe(200); expect(data.data).toHaveLength(2); expect(data.data[0].title).toContain('Test'); }); }); ` End-to-End Testing 1. Cypress Configuration `typescript // cypress.config.ts export default defineConfig({ projectId: \"j5xw",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 698,
    "title": "Testing Guide",
    "description": "",
    "content": "8i\", video: false, screenshotOnRunFailure: false, env: { \"browserPermissions\": { \"notifications\": \"allow\", \"midi\": \"allow\" } }, e2e: { baseUrl: 'http://localhost:4000', setupNodeEvents(on, config) { // Custom commands and plugins on('task', { protobufEncode: ({ fixtureBody, message, protoFilePath })",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 699,
    "title": "Testing Guide",
    "description": "",
    "content": " => { // Protocol buffer encoding for tests } }); } } }); ` 2. User Journey Testing `typescript // cypress/e2e/user-journey.cy.ts describe('Complete User Journey', () => { beforeEach(() => { cy.visit('/'); cy.mockAudioContext(); cy.mockWebSocket(); }); it('should complete full user flow', () => { //",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 700,
    "title": "Testing Guide",
    "description": "",
    "content": " Login cy.get('[data-testid=\"login-button\"]').click(); cy.get('[data-testid=\"guest-login\"]').click(); // Wait for app initialization cy.get('[data-testid=\"app-loading\"]').should('be.visible'); cy.get('[data-testid=\"app-loading\"]').should('not.exist', { timeout: 30000 }); // Join room cy.get('[data-t",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 701,
    "title": "Testing Guide",
    "description": "",
    "content": "estid=\"room-list\"]').should('be.visible'); cy.get('[data-testid=\"room-item\"]').first().click(); // Interact with piano cy.get('[data-testid=\"piano-key-60\"]').click(); cy.get('[data-testid=\"audio-visualizer\"]').should('be.visible'); // Send chat message cy.get('[data-testid=\"chat-input\"]').type('Hell",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 702,
    "title": "Testing Guide",
    "description": "",
    "content": "o, world!{enter}'); cy.get('[data-testid=\"chat-messages\"]').should('contain', 'Hello, world!'); // Leave room cy.get('[data-testid=\"leave-room\"]').click(); cy.get('[data-testid=\"room-list\"]').should('be.visible'); }); }); ` 3. Custom Cypress Commands `typescript // cypress/support/commands.ts declar",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 703,
    "title": "Testing Guide",
    "description": "",
    "content": "e global { namespace Cypress { interface Chainable { mockAudioContext(): Chainable; mockWebSocket(): Chainable; loginAsGuest(): Chainable; } } } Cypress.Commands.add('mockAudioContext', () => { cy.window().then((win) => { win.AudioContext = class MockAudioContext { state = 'running'; sampleRate = 44",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 29
  },
  {
    "objectID": 704,
    "title": "Testing Guide",
    "description": "",
    "content": "100; destination = {}; createGain() { return { connect: cy.stub(), gain: { value: 1 } }; } resume() { return Promise.resolve(); } }; }); }); Cypress.Commands.add('mockWebSocket', () => { cy.window().then((win) => { win.WebSocket = class MockWebSocket { readyState = 1; onopen = null; onmessage = null",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 30
  },
  {
    "objectID": 705,
    "title": "Testing Guide",
    "description": "",
    "content": "; onclose = null; onerror = null; constructor(url: string) { setTimeout(() => this.onopen?.({}), 100); } send(data: string) { // Mock WebSocket send } close() { setTimeout(() => this.onclose?.({}), 100); } }; }); }); ` Specialized Testing 1. Audio Testing `typescript // Audio-specific testing utilit",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 31
  },
  {
    "objectID": 706,
    "title": "Testing Guide",
    "description": "",
    "content": "ies import { describe, it, expect, vi, beforeEach } from 'vitest'; describe('Audio System Testing', () => { beforeEach(() => { // Mock Web Audio API global.AudioContext = vi.fn(() => ({ state: 'running', sampleRate: 44100, destination: {}, createGain: vi.fn(() => ({ connect: vi.fn(), gain: { value: ",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 32
  },
  {
    "objectID": 707,
    "title": "Testing Guide",
    "description": "",
    "content": "1 } })), createOscillator: vi.fn(() => ({ connect: vi.fn(), start: vi.fn(), stop: vi.fn(), frequency: { value: 440 } })) })); // Mock AudioWorklet global.AudioWorkletNode = vi.fn(); }); it('should handle audio latency requirements', async () => { const audioService = AudioService(); await audioServi",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 33
  },
  {
    "objectID": 708,
    "title": "Testing Guide",
    "description": "",
    "content": "ce.initialize(); const startTime = performance.now(); audioService.playNote(60, 127); const endTime = performance.now(); // Audio processing should be under 10ms expect(endTime - startTime).toBeLessThan(10); }); }); ` 2. Real-time Testing `typescript // WebSocket and real-time feature testing descri",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 34
  },
  {
    "objectID": 709,
    "title": "Testing Guide",
    "description": "",
    "content": "be('Real-time Communication', () => { it('should handle WebSocket message flow', async () => { const mockWebSocket = { send: vi.fn(), close: vi.fn(), readyState: 1 }; const websocketService = WebsocketService(); websocketService.setWebSocket(mockWebSocket); // Test message sending websocketService.e",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 35
  },
  {
    "objectID": 710,
    "title": "Testing Guide",
    "description": "",
    "content": "mitServerCommand(['JoinRoom', 'test-room']); expect(mockWebSocket.send).toHaveBeenCalledWith( expect.any(ArrayBuffer) ); }); it('should handle connection failures gracefully', async () => { const websocketService = WebsocketService(); // Simulate connection failure const errorSpy = vi.spyOn(console,",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 36
  },
  {
    "objectID": 711,
    "title": "Testing Guide",
    "description": "",
    "content": " 'error').mockImplementation(() => {}); await expect( websocketService.connect('invalid-identity') ).rejects.toThrow(); expect(errorSpy).toHaveBeenCalled(); errorSpy.mockRestore(); }); }); ` 3. Rust Testing `rust // pianorhythm_core/core/src/lib.rs #[cfg(test)] mod tests { use super::*; #[test] fn t",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 37
  },
  {
    "objectID": 712,
    "title": "Testing Guide",
    "description": "",
    "content": "est_synthesizer_creation() { let options = PianoRhythmSynthesizerDescriptor::default(); let synth = PianoRhythmSynthesizer::new(options, None, None, None); assert!(!synth.has_soundfont_loaded()); } #[test] fn test_audio_processing() { let mut synth = create_test_synthesizer(); let mut output = vec![",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 38
  },
  {
    "objectID": 713,
    "title": "Testing Guide",
    "description": "",
    "content": "0.0f32; 128]; // Process audio synth.process(&mut output); // Verify output is within expected range for sample in output { assert!(sample >= -1.0 && sample ({ clientLoaded: vi.fn().mockReturnValue(true), getSocketID: vi.fn().mockReturnValue('mock-socket-id'), currentRoom: vi.fn().mockReturnValue(nu",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 39
  },
  {
    "objectID": 714,
    "title": "Testing Guide",
    "description": "",
    "content": "ll), setCurrentRoom: vi.fn(), appStateEvents: MockEventBus(), coreService: vi.fn().mockReturnValue(MockCoreService()) }); export const MockAudioService = () => ({ initialized: vi.fn().mockReturnValue(true), clientAdded: vi.fn().mockReturnValue(true), loadedSoundfontName: vi.fn().mockReturnValue('def",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 40
  },
  {
    "objectID": 715,
    "title": "Testing Guide",
    "description": "",
    "content": "ault'), initialize: vi.fn().mockResolvedValue(undefined), playNote: vi.fn(), stopNote: vi.fn() }); ` 2. Test Fixtures `typescript // tests/fixtures/user.fixtures.ts export const createMockUser = (overrides: Partial = {}): UserClientDomain => ({ socketID: 'test-socket-id', userDto: { usertag: 'testus",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 41
  },
  {
    "objectID": 716,
    "title": "Testing Guide",
    "description": "",
    "content": "er', username: 'Test User', status: UserStatus.Online, roles: ['user'], ...overrides.userDto }, currentRoomID: 'test-room', isTyping: false, lastSeen: new Date(), ...overrides }); export const createMockRoom = (overrides: Partial = {}): RoomDto => ({ id: 'test-room-id', name: 'Test Room', type: Room",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 42
  },
  {
    "objectID": 717,
    "title": "Testing Guide",
    "description": "",
    "content": "Type.Public, activeUsers: [], maxUsers: 16, settings: {}, createdAt: new Date(), updatedAt: new Date(), ...overrides }); ` Performance Testing 1. Load Testing `typescript // Performance testing for critical paths describe('Performance Tests', () => { it('should handle rapid note events', async () =>",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 43
  },
  {
    "objectID": 718,
    "title": "Testing Guide",
    "description": "",
    "content": " { const audioService = AudioService(); await audioService.initialize(); const startTime = performance.now(); // Simulate rapid note playing for (let i = 0; i { const audioService = AudioService(); await audioService.initialize(); let frameCount = 0; const startTime = performance.now(); const proces",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 44
  },
  {
    "objectID": 719,
    "title": "Testing Guide",
    "description": "",
    "content": "sFrame = () => { frameCount++; if (performance.now() - startTime setTimeout(resolve, 1000)); // Should maintain at least 30 FPS expect(frameCount).toBeGreaterThan(30); }); }); ` Continuous Integration 1. GitHub Actions Workflow `yaml .github/workflows/test.yml name: Test Suite on: [push, pull_reques",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 45
  },
  {
    "objectID": 720,
    "title": "Testing Guide",
    "description": "",
    "content": "t] jobs: test: runs-on: ubuntu-latest steps: uses: actions/checkout@v3 name: Setup Node.js uses: actions/setup-node@v3 with: node-version: '19' name: Setup Rust uses: actions-rs/toolchain@v1 with: toolchain: nightly target: wasm32-unknown-unknown name: Install dependencies run: pnpm install name: Bu",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 46
  },
  {
    "objectID": 721,
    "title": "Testing Guide",
    "description": "",
    "content": "ild core run: | cd pianorhythm_core ./build-core-wasm-debug.cmd name: Run unit tests run: pnpm test name: Run Rust tests run: | cd pianorhythm_core cargo test name: Run E2E tests run: | pnpm cy:vite & pnpm cy:run ` Best Practices 1. Test Organization Arrange-Act-Assert: Structure tests clearly Singl",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 47
  },
  {
    "objectID": 722,
    "title": "Testing Guide",
    "description": "",
    "content": "e Responsibility: One test per behavior Descriptive Names: Test names should explain what they verify Independent Tests: Tests should not depend on each other 2. Mock Strategy Mock External Dependencies: APIs, databases, third-party services Keep Mocks Simple: Don't over-engineer mock implementation",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 48
  },
  {
    "objectID": 723,
    "title": "Testing Guide",
    "description": "",
    "content": "s Verify Interactions: Test that mocks are called correctly Reset Mocks: Clean up between tests 3. Coverage Goals Unit Tests: 90%+ coverage for services and utilities Integration Tests: Cover critical user flows E2E Tests: Cover main user journeys Performance Tests: Cover audio and real-time feature",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 49
  },
  {
    "objectID": 724,
    "title": "Testing Guide",
    "description": "",
    "content": "s Next Steps [Development Setup - Set up testing environment Frontend Architecture - Understand component structure Audio System - Learn audio testing specifics",
    "url": "/docs\\community\\technical-documentation\\development\\testing-guide",
    "type": "docs",
    "tags": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests"
    ],
    "keywords": [
      "testing",
      "quality-assurance",
      "vitest",
      "cypress",
      "unit-tests",
      "integration-tests",
      "e2e-tests",
      "testing",
      "unit tests",
      "integration tests",
      "e2e",
      "vitest",
      "cypress",
      "audio testing",
      "real-time testing"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Testing Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 50
  },
  {
    "objectID": 725,
    "title": "Development Setup",
    "description": "",
    "content": "Development Setup This guide will help you set up a complete development environment for PianoRhythm, including all dependencies, tools, and configurations needed for frontend, backend, and core engine development. Prerequisites System Requirements Operating System: Windows 10+, macOS 10.15+, or Lin",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 726,
    "title": "Development Setup",
    "description": "",
    "content": "ux (Ubuntu 20.04+ recommended) Memory: 8GB RAM minimum, 16GB recommended Storage: 10GB free space for dependencies and build artifacts Network: Stable internet connection for package downloads Required Software 1. Node.js & Package Manager `bash Install Node.js 19.2.0 or higher Download from: https:",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 727,
    "title": "Development Setup",
    "description": "",
    "content": "//nodejs.org/ Verify installation node --version # Should be 19.2.0+ npm --version # Should be 9.0.0+ Install pnpm (recommended package manager) npm install -g pnpm@9.4.0 Verify pnpm installation pnpm --version # Should be 9.4.0 ` 2. Rust Toolchain (for Core Development) `bash Install Rust via rustu",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 728,
    "title": "Development Setup",
    "description": "",
    "content": "p curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh Install nightly toolchain (required for PianoRhythm core) rustup install nightly rustup default nightly Add WebAssembly target rustup target add wasm32-unknown-unknown Verify installation rustc --version # Should include \"nightly\" carg",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 729,
    "title": "Development Setup",
    "description": "",
    "content": "o --version ` 3. wasm-bindgen CLI `bash Install wasm-bindgen CLI cargo install wasm-bindgen-cli Verify installation wasm-bindgen --version ` 4. Additional Tools `bash Git (for version control) git --version # Should be 2.30.0+ Protocol Buffers compiler (optional, for proto development) Windows: Down",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 730,
    "title": "Development Setup",
    "description": "",
    "content": "load from https://github.com/protocolbuffers/protobuf/releases macOS: brew install protobuf Linux: sudo apt-get install protobuf-compiler protoc --version # Should be 3.20.0+ ` Project Setup 1. Clone Repository `bash Clone the main repository git clone https://github.com/PianoRhythm/pianorhythm-ssr.",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 731,
    "title": "Development Setup",
    "description": "",
    "content": "git cd pianorhythm-ssr Check repository structure ls -la Should see: pianorhythm_core/, src/, package.json, etc. ` 2. Install Dependencies `bash Install Node.js dependencies pnpm install This will install: - Frontend dependencies (SolidJS, Hope UI, etc.) - Development tools (Vitest, Cypress, TypeScr",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 732,
    "title": "Development Setup",
    "description": "",
    "content": "ipt) - Build tools (Vinxi, Vite, etc.) ` 3. Build Core Engine `bash Navigate to core directory cd pianorhythm_core Build the Rust core for development chmod +x ./build-core-wasm-debug.cmd ./build-core-wasm-debug.cmd Build the 3D renderer (optional) chmod +x ./build-bevy-renderer-wasm-webgpu-debug.cm",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 733,
    "title": "Development Setup",
    "description": "",
    "content": "d ./build-bevy-renderer-wasm-webgpu-debug.cmd Return to project root cd .. ` 4. Environment Configuration Create environment files for different environments: `bash Create .env.local for local development cat > .env.local << EOF NODE_ENV=local-dev DEBUG=true VITE_VERSION=0.10.0-dev PIANORHYTHM_SERVE",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 734,
    "title": "Development Setup",
    "description": "",
    "content": "R_URL=http://localhost:7000 PR_ASSETS_URL=http://localhost:3000 PIANORHYTHM_MONGODB_URI=mongodb://localhost:27017 EOF ` Development Workflow 1. Start Development Server `bash Start the development server pnpm run dev:local The application will be available at: http://localhost (port 80) ` Developmen",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 735,
    "title": "Development Setup",
    "description": "",
    "content": "t Server Features: Hot module replacement (HMR) TypeScript compilation SASS processing Protocol buffer compilation Source maps for debugging 2. Development Scripts `bash Frontend development pnpm run dev:local # Local development with hot reload pnpm run dev:dev # Development environment Building pn",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 736,
    "title": "Development Setup",
    "description": "",
    "content": "pm run build:production # Production build pnpm run build:staging # Staging build Testing pnpm test # Run unit tests pnpm test-watch # Watch mode for tests pnpm test-ui # Visual test interface pnpm cy:open # Open Cypress for e2e tests Desktop app (Tauri) pnpm run tauri:dev # Desktop development pnpm",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 737,
    "title": "Development Setup",
    "description": "",
    "content": " run tauri # Tauri CLI commands ` 3. Core Engine Development `bash Navigate to core directory cd pianorhythm_core Development builds (faster compilation) ./build-core-wasm-debug.cmd # Core engine debug build ./build-synth-wasm-release.cmd # Audio synthesizer build Release builds (optimized) ./build-",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 738,
    "title": "Development Setup",
    "description": "",
    "content": "core-release.sh # Core engine release build ./build-bevy-renderer-wasm-webgpu.sh # 3D renderer build Run Rust tests ./run-tests.cmd Update Rust toolchain ./update_rust.cmd ./update_wasm_bindgen_cli.cmd ` IDE Configuration 1. Visual Studio Code (Recommended) Install recommended extensions: `json // .",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 739,
    "title": "Development Setup",
    "description": "",
    "content": "vscode/extensions.json { \"recommendations\": \"bradlc.vscode-tailwindcss\", \"rust-lang.rust-analyzer\", \"ms-vscode.vscode-typescript-next\", \"solidjs.solid-js\", \"ms-vscode.vscode-json\", \"esbenp.prettier-vscode\", \"ms-vscode.vscode-eslint\" ] } ` Workspace settings: `json // .vscode/settings.json { \"typescr",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 740,
    "title": "Development Setup",
    "description": "",
    "content": "ipt.preferences.importModuleSpecifier\": \"relative\", \"typescript.suggest.autoImports\": true, \"rust-analyzer.cargo.target\": \"wasm32-unknown-unknown\", \"rust-analyzer.checkOnSave.command\": \"clippy\", \"files.associations\": { \"*.proto\": \"proto3\" } } ` 2. TypeScript Configuration The project uses strict Typ",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 741,
    "title": "Development Setup",
    "description": "",
    "content": "eScript configuration: `json // tsconfig.json highlights { \"compilerOptions\": { \"strict\": true, \"noUncheckedIndexedAccess\": true, \"exactOptionalPropertyTypes\": true, \"jsx\": \"preserve\", \"jsxImportSource\": \"solid-js\" } } ` Database Setup 1. MongoDB (Local Development) `bash Install MongoDB Community E",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 742,
    "title": "Development Setup",
    "description": "",
    "content": "dition Windows: Download from https://www.mongodb.com/try/download/community macOS: brew install mongodb-community Linux: Follow official MongoDB installation guide Start MongoDB service Windows: Start as Windows service macOS: brew services start mongodb-community Linux: sudo systemctl start mongod",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 743,
    "title": "Development Setup",
    "description": "",
    "content": " Verify MongoDB is running mongosh --eval \"db.adminCommand('ismaster')\" ` 2. Database Initialization `bash The application will automatically create the database and collections on first run Optional: Import sample data mongosh pianorhythm < scripts/sample-data.js ` Testing Setup 1. Unit Testing wit",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 744,
    "title": "Development Setup",
    "description": "",
    "content": "h Vitest `bash Run all tests pnpm test Run tests in watch mode pnpm test-watch Run tests with UI pnpm test-ui Update test snapshots pnpm test-update-snapshots Run tests with coverage pnpm test -- --coverage ` 2. E2E Testing with Cypress `bash Start test server pnpm cy:vite Open Cypress test runner (",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 745,
    "title": "Development Setup",
    "description": "",
    "content": "in another terminal) pnpm cy:open Run headless tests pnpm cy:run ` 3. Test Configuration Vitest configuration includes: `typescript // vitest.config.ts highlights export default defineConfig({ test: { globals: true, setupFiles: [ '@vitest/web-worker', 'fake-indexeddb/auto', './tests/vitest.setup.ts'",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 746,
    "title": "Development Setup",
    "description": "",
    "content": " ], exclude: [ '/pianorhythm_core/', '/cypress/' ] } }); ` Debugging 1. Frontend Debugging `typescript // Enable debug logging localStorage.setItem('debug', 'pianorhythm:*'); // Browser DevTools // - Sources tab for breakpoints // - Console for logs // - Network tab for API calls // - Application ta",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 747,
    "title": "Development Setup",
    "description": "",
    "content": "b for storage ` 2. Core Engine Debugging `bash Build debug version of core cd pianorhythm_core ./build-core-wasm-debug.cmd Enable Rust logging in browser console Debug logs will appear in browser console ` 3. Server-Side Debugging `bash Enable server debug logging DEBUG=true pnpm run dev:local Node.",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 748,
    "title": "Development Setup",
    "description": "",
    "content": "js debugging node --inspect-brk node_modules/.bin/vinxi dev ` Common Issues & Solutions 1. WASM Build Issues `bash Clear WASM build cache cd pianorhythm_core rm -rf target/ rm -rf pkg/ Rebuild from scratch ./build-core-wasm-debug.cmd ` 2. Node.js Memory Issues `bash Increase Node.js memory limit exp",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 749,
    "title": "Development Setup",
    "description": "",
    "content": "ort NODE_OPTIONS=\"--max-old-space-size=8192\" pnpm run dev:local ` 3. Port Conflicts `bash Check what's using port 80 Windows: netstat -ano | findstr :80 macOS/Linux: lsof -i :80 Use different port pnpm run dev:local -- --port 3000 ` 4. Package Installation Issues `bash Clear package cache pnpm store",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 750,
    "title": "Development Setup",
    "description": "",
    "content": " prune Delete node_modules and reinstall rm -rf node_modules pnpm install ` Performance Optimization 1. Development Build Performance `bash Use faster TypeScript compilation export TSC_COMPILE_ON_ERROR=true Skip type checking during development export SKIP_TYPE_CHECK=true ` 2. Hot Reload Optimizatio",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 751,
    "title": "Development Setup",
    "description": "",
    "content": "n `typescript // Exclude heavy modules from HMR // vite.config.ts export default defineConfig({ server: { watch: { ignored: [ '/pianorhythm_core/', '/node_modules/' ] } } }); ` Next Steps For New Developers Read Architecture Overview: Start with [Architecture Overview Understand Frontend: Review Fro",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 752,
    "title": "Development Setup",
    "description": "",
    "content": "ntend Architecture Learn Testing: Follow Testing Guide Explore Core Engine: Study Core Business Logic For Contributors Follow Coding Standards: Use ESLint and Prettier configurations Write Tests: Add tests for new features Update Documentation: Keep docs current with code changes Test Across Platfor",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 753,
    "title": "Development Setup",
    "description": "",
    "content": "ms: Verify changes work on different OS/browsers Desktop Development: See Desktop Application for native app development Useful Resources SolidJS Documentation: https://solidjs.com/docs Rust Book: https://doc.rust-lang.org/book/ WebAssembly Guide: https://rustwasm.github.io/docs/book/ Bevy Engine: h",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 754,
    "title": "Development Setup",
    "description": "",
    "content": "ttps://bevyengine.org/learn/ Protocol Buffers: https://developers.google.com/protocol-buffers Support GitHub Issues: Report bugs and request features GitHub Discussions: Ask questions and share ideas Discord: Join the community for real-time help Documentation: Comprehensive guides in the docs/ fold",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 29
  },
  {
    "objectID": 755,
    "title": "Development Setup",
    "description": "",
    "content": "er",
    "url": "/docs\\community\\technical-documentation\\development\\development-setup",
    "type": "docs",
    "tags": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration"
    ],
    "keywords": [
      "development",
      "setup",
      "environment",
      "installation",
      "getting-started",
      "tools",
      "configuration",
      "development",
      "setup",
      "environment",
      "installation",
      "dependencies",
      "tools",
      "configuration",
      "getting started"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development Setup",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 30
  },
  {
    "objectID": 756,
    "title": "Desktop Application",
    "description": "",
    "content": "Desktop Application PianoRhythm's desktop application is built with Tauri, providing a native wrapper around the web application with enhanced performance, native system integration, and access to platform-specific features like native MIDI, file system access, and system notifications. Architecture",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 757,
    "title": "Desktop Application",
    "description": "",
    "content": " Overview `mermaid graph TB subgraph \"Desktop Application\" TWTauri Window] WV[WebView] WA[Web Application] end subgraph \"Tauri Core\" TC[Tauri Core] RS[Rust Backend] API[Tauri API] CMD[Commands] end subgraph \"Native Integration\" FS[File System] MIDI[Native MIDI] SYS[System APIs] NOTIF[Notifications] ",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 758,
    "title": "Desktop Application",
    "description": "",
    "content": "end subgraph \"Platform Targets\" WIN[Windows] MAC[macOS] LINUX[Linux] end TW --> WV WV --> WA WA --> API API --> TC TC --> RS RS --> CMD CMD --> FS CMD --> MIDI CMD --> SYS CMD --> NOTIF TC --> WIN TC --> MAC TC --> LINUX ` Tauri Configuration 1. Core Configuration ``json { \"build\": { \"beforeDevComma",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 759,
    "title": "Desktop Application",
    "description": "",
    "content": "nd\": \"pnpm dev\", \"beforeBuildCommand\": \"pnpm build\", \"devPath\": \"http://localhost:3000\", \"distDir\": \"../dist/public\" }, \"package\": { \"productName\": \"PianoRhythm\", \"version\": \"1.0.0\" }, \"tauri\": { \"allowlist\": { \"all\": false, \"shell\": { \"all\": false, \"open\": true }, \"fs\": { \"all\": true, \"scope\": [\"$A",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 760,
    "title": "Desktop Application",
    "description": "",
    "content": "PPDATA\", \"$DOCUMENT\", \"$DOWNLOAD\", \"$MUSIC\"] }, \"notification\": { \"all\": true }, \"window\": { \"all\": false, \"close\": true, \"hide\": true, \"show\": true, \"maximize\": true, \"minimize\": true, \"unmaximize\": true, \"unminimize\": true, \"startDragging\": true } } } } `` 2. Window Configuration `json { \"windows\"",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 761,
    "title": "Desktop Application",
    "description": "",
    "content": ": [ { \"fullscreen\": false, \"resizable\": true, \"title\": \"PianoRhythm\", \"width\": 1200, \"height\": 800, \"minWidth\": 800, \"minHeight\": 600, \"center\": true, \"decorations\": true, \"alwaysOnTop\": false, \"skipTaskbar\": false, \"theme\": \"Dark\" } ] } ` Native MIDI Integration 1. MIDI Device Access `rust // src-t",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 762,
    "title": "Desktop Application",
    "description": "",
    "content": "auri/src/midi.rs use midir::{MidiInput, MidiInputConnection, MidiOutput}; use tauri::State; use std::sync::Mutex; pub struct MidiState { pub connections: Mutex>>, } #[tauri::command] pub fn get_midi_inputs() -> Result, String> { let midi_in = MidiInput::new(\"PianoRhythm Input\") .map_err(|e| format!(",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 763,
    "title": "Desktop Application",
    "description": "",
    "content": "\"Failed to create MIDI input: {}\", e))?; let ports = midi_in.ports(); let mut device_names = Vec::new(); for (i, port) in ports.iter().enumerate() { match midi_in.port_name(port) { Ok(name) => device_names.push(format!(\"{}:{}\", i, name)), Err(_) => device_names.push(format!(\"{}:Unknown Device\", i)),",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 764,
    "title": "Desktop Application",
    "description": "",
    "content": " } } Ok(device_names) } #[tauri::command] pub fn open_midi_input_connection( midi_id: String, state: State ) -> Result { let midi_in = MidiInput::new(\"PianoRhythm Input\") .map_err(|e| format!(\"Failed to create MIDI input: {}\", e))?; let ports = midi_in.ports(); let port_index: usize = midi_id.parse(",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 765,
    "title": "Desktop Application",
    "description": "",
    "content": ") .map_err(|_| \"Invalid MIDI device ID\")?; let port = ports.get(port_index) .ok_or(\"MIDI port not found\")?; let connection = midi_in.connect( port, \"PianoRhythm\", move |_timestamp, message, _| { // Process MIDI message unsafe { if let Some(synth) = SYNTH.get_mut() { let _ = synth.parse_midi_data( me",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 766,
    "title": "Desktop Application",
    "description": "",
    "content": "ssage, &None, Some(NoteSourceType::Midi.to_u8()), Some(hash_device_id(midi_id.clone())) ); } } }, (), ).map_err(|e| format!(\"Failed to connect to MIDI device: {}\", e))?; state.connections.lock().unwrap().push(connection); Ok(()) } ` 2. MIDI Output Support `rust #[tauri::command] pub fn send_midi_mes",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 767,
    "title": "Desktop Application",
    "description": "",
    "content": "sage( device_id: String, message: Vec ) -> Result { let midi_out = MidiOutput::new(\"PianoRhythm Output\") .map_err(|e| format!(\"Failed to create MIDI output: {}\", e))?; let ports = midi_out.ports(); let port_index: usize = device_id.parse() .map_err(|_| \"Invalid MIDI device ID\")?; let port = ports.ge",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 768,
    "title": "Desktop Application",
    "description": "",
    "content": "t(port_index) .ok_or(\"MIDI output port not found\")?; let mut connection = midi_out.connect(port, \"PianoRhythm Output\") .map_err(|e| format!(\"Failed to connect to MIDI output: {}\", e))?; connection.send(&message) .map_err(|e| format!(\"Failed to send MIDI message: {}\", e))?; Ok(()) } ` File System Int",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 769,
    "title": "Desktop Application",
    "description": "",
    "content": "egration 1. Project File Management `rust // src-tauri/src/filesystem.rs use tauri::api::path; use std::fs; use std::path::PathBuf; #[tauri::command] pub fn save_project_file( filename: String, content: String ) -> Result { let app_data_dir = path::app_data_dir(&tauri::Config::default()) .ok_or(\"Fai",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 770,
    "title": "Desktop Application",
    "description": "",
    "content": "led to get app data directory\")?; let projects_dir = app_data_dir.join(\"projects\"); fs::create_dir_all(&projects_dir) .map_err(|e| format!(\"Failed to create projects directory: {}\", e))?; let file_path = projects_dir.join(format!(\"{}.prj\", filename)); fs::write(&file_path, content) .map_err(|e| form",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 771,
    "title": "Desktop Application",
    "description": "",
    "content": "at!(\"Failed to write project file: {}\", e))?; Ok(file_path.to_string_lossy().to_string()) } #[tauri::command] pub fn load_project_file(filepath: String) -> Result { fs::read_to_string(&filepath) .map_err(|e| format!(\"Failed to read project file: {}\", e)) } #[tauri::command] pub fn get_recent_project",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 772,
    "title": "Desktop Application",
    "description": "",
    "content": "s() -> Result, String> { let app_data_dir = path::app_data_dir(&tauri::Config::default()) .ok_or(\"Failed to get app data directory\")?; let projects_dir = app_data_dir.join(\"projects\"); if !projects_dir.exists() { return Ok(vec![]); } let mut projects = Vec::new(); for entry in fs::read_dir(projects_",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 773,
    "title": "Desktop Application",
    "description": "",
    "content": "dir) .map_err(|e| format!(\"Failed to read projects directory: {}\", e))? { let entry = entry.map_err(|e| format!(\"Failed to read directory entry: {}\", e))?; let path = entry.path(); if path.extension().and_then(|s| s.to_str()) == Some(\"prj\") { projects.push(path.to_string_lossy().to_string()); } } Ok",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 774,
    "title": "Desktop Application",
    "description": "",
    "content": "(projects) } ` 2. Audio File Import `rust #[tauri::command] pub fn import_audio_file(filepath: String) -> Result, String> { let audio_data = fs::read(&filepath) .map_err(|e| format!(\"Failed to read audio file: {}\", e))?; // Validate audio file format let extension = std::path::Path::new(&filepath) .",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 775,
    "title": "Desktop Application",
    "description": "",
    "content": "extension() .and_then(|s| s.to_str()) .ok_or(\"Invalid file extension\")?; match extension.to_lowercase().as_str() { \"wav\" | \"mp3\" | \"flac\" | \"ogg\" => Ok(audio_data), _ => Err(\"Unsupported audio format\".to_string()) } } ` System Integration 1. Native Notifications `rust // src-tauri/src/notifications.",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 776,
    "title": "Desktop Application",
    "description": "",
    "content": "rs use tauri::api::notification::Notification; #[tauri::command] pub fn show_notification( title: String, body: String, icon: Option ) -> Result { let mut notification = Notification::new(\"com.pianorhythm.app\") .title(&title) .body(&body); if let Some(icon_path) = icon { notification = notification.",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 777,
    "title": "Desktop Application",
    "description": "",
    "content": "icon(&icon_path); } notification.show() .map_err(|e| format!(\"Failed to show notification: {}\", e))?; Ok(()) } #[tauri::command] pub fn request_notification_permission() -> Result { // Platform-specific permission handling #[cfg(target_os = \"macos\")] { // macOS notification permission request Ok(tru",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 778,
    "title": "Desktop Application",
    "description": "",
    "content": "e) // Simplified for example } #[cfg(not(target_os = \"macos\"))] { Ok(true) // Other platforms typically don't require explicit permission } } ` 2. System Tray Integration `rust // src-tauri/src/tray.rs use tauri::{CustomMenuItem, SystemTray, SystemTrayMenu, SystemTrayEvent}; pub fn create_system_tra",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 779,
    "title": "Desktop Application",
    "description": "",
    "content": "y() -> SystemTray { let quit = CustomMenuItem::new(\"quit\".to_string(), \"Quit\"); let show = CustomMenuItem::new(\"show\".to_string(), \"Show\"); let hide = CustomMenuItem::new(\"hide\".to_string(), \"Hide\"); let tray_menu = SystemTrayMenu::new() .add_item(show) .add_item(hide) .add_native_item(tauri::System",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 780,
    "title": "Desktop Application",
    "description": "",
    "content": "TrayMenuItem::Separator) .add_item(quit); SystemTray::new().with_menu(tray_menu) } pub fn handle_system_tray_event(app: &tauri::AppHandle, event: SystemTrayEvent) { match event { SystemTrayEvent::LeftClick { .. } => { let window = app.get_window(\"main\").unwrap(); window.show().unwrap(); window.set_f",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 781,
    "title": "Desktop Application",
    "description": "",
    "content": "ocus().unwrap(); } SystemTrayEvent::MenuItemClick { id, .. } => { match id.as_str() { \"quit\" => { std::process::exit(0); } \"show\" => { let window = app.get_window(\"main\").unwrap(); window.show().unwrap(); } \"hide\" => { let window = app.get_window(\"main\").unwrap(); window.hide().unwrap(); } _ => {} }",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 782,
    "title": "Desktop Application",
    "description": "",
    "content": " } _ => {} } } ` Frontend Integration 1. Tauri API Usage `typescript // src/services/desktop.service.ts import { invoke } from \"@tauri-apps/api/tauri\"; import { listen } from \"@tauri-apps/api/event\"; export default function DesktopService() { const getMidiInputs = async (): Promise => { try { return",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 783,
    "title": "Desktop Application",
    "description": "",
    "content": " await invoke(\"get_midi_inputs\"); } catch (error) { console.error(\"Failed to get MIDI inputs:\", error); return []; } }; const openMidiConnection = async (deviceId: string): Promise => { try { await invoke(\"open_midi_input_connection\", { midiId: deviceId }); } catch (error) { console.error(\"Failed to",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 784,
    "title": "Desktop Application",
    "description": "",
    "content": " open MIDI connection:\", error); throw error; } }; const saveProject = async (filename: string, content: string): Promise => { try { return await invoke(\"save_project_file\", { filename, content }); } catch (error) { console.error(\"Failed to save project:\", error); throw error; } }; const showNotific",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 785,
    "title": "Desktop Application",
    "description": "",
    "content": "ation = async (title: string, body: string): Promise => { try { await invoke(\"show_notification\", { title, body }); } catch (error) { console.error(\"Failed to show notification:\", error); } }; return { getMidiInputs, openMidiConnection, saveProject, showNotification }; } ` 2. Platform Detection `typ",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 29
  },
  {
    "objectID": 786,
    "title": "Desktop Application",
    "description": "",
    "content": "escript // src/util/platform.ts import { platform } from \"@tauri-apps/api/os\"; export const COMMON = { IS_DESKTOP_APP: typeof window !== \"undefined\" && \"TAURI\" in window, IS_WEB_APP: typeof window !== \"undefined\" && !(\"TAURI\" in window), IS_SERVER: typeof window === \"undefined\" }; export async funct",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 30
  },
  {
    "objectID": 787,
    "title": "Desktop Application",
    "description": "",
    "content": "ion getPlatformInfo() { if (COMMON.IS_DESKTOP_APP) { const platformName = await platform(); return { platform: platformName, isDesktop: true, isWeb: false }; } return { platform: \"web\", isDesktop: false, isWeb: true }; } ` Build Configuration 1. Development Build `bash Start development server pnpm ",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 31
  },
  {
    "objectID": 788,
    "title": "Desktop Application",
    "description": "",
    "content": "tauri dev Build for development with debug symbols pnpm tauri build --debug ` 2. Production Build `bash Build optimized production version pnpm tauri build Build for specific target pnpm tauri build --target x86_64-pc-windows-msvc pnpm tauri build --target x86_64-apple-darwin pnpm tauri build --targ",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 32
  },
  {
    "objectID": 789,
    "title": "Desktop Application",
    "description": "",
    "content": "et x86_64-unknown-linux-gnu ` 3. Code Signing `json // tauri.conf.json { \"tauri\": { \"bundle\": { \"active\": true, \"targets\": \"all\", \"identifier\": \"com.pianorhythm.app\", \"icon\": [ \"icons/32x32.png\", \"icons/128x128.png\", \"icons/icon.icns\", \"icons/icon.ico\" ], \"windows\": { \"certificateThumbprint\": null, ",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 33
  },
  {
    "objectID": 790,
    "title": "Desktop Application",
    "description": "",
    "content": "\"digestAlgorithm\": \"sha256\", \"timestampUrl\": \"\" }, \"macOS\": { \"frameworks\": [], \"minimumSystemVersion\": \"10.13\", \"exceptionDomain\": \"\", \"signingIdentity\": null, \"providerShortName\": null, \"entitlements\": null } } } } ` Performance Optimizations 1. Bundle Size Optimization `rust // Cargo.toml [profil",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 34
  },
  {
    "objectID": 791,
    "title": "Desktop Application",
    "description": "",
    "content": "e.release] opt-level = \"s\" # Optimize for size lto = true # Link-time optimization codegen-units = 1 # Single codegen unit for better optimization panic = \"abort\" # Smaller binary size strip = true # Strip debug symbols ` 2. Memory Management `rust // Efficient resource management pub struct AppStat",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 35
  },
  {
    "objectID": 792,
    "title": "Desktop Application",
    "description": "",
    "content": "e { midi_connections: Arc>>>, audio_engine: Arc>, } impl Drop for AppState { fn drop(&mut self) { // Clean up resources self.midi_connections.lock().unwrap().clear(); } } ` Testing 1. Integration Tests `rust #[cfg(test)] mod tests { use super::*; #[tokio::test] async fn test_midi_device_enumeration(",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 36
  },
  {
    "objectID": 793,
    "title": "Desktop Application",
    "description": "",
    "content": ") { let devices = get_midi_inputs().unwrap(); assert!(devices.len() >= 0); // Should not fail even with no devices } #[tokio::test] async fn test_file_operations() { let content = \"test project data\"; let filepath = save_project_file(\"test\".to_string(), content.to_string()).unwrap(); let loaded = lo",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 37
  },
  {
    "objectID": 794,
    "title": "Desktop Application",
    "description": "",
    "content": "ad_project_file(filepath).unwrap(); assert_eq!(content, loaded); } } ` 2. End-to-End Testing `typescript // tests/desktop.test.ts import { test, expect } from \"@playwright/test\"; test(\"desktop app launches correctly\", async ({ page }) => { // Test desktop-specific functionality await page.goto(\"taur",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 38
  },
  {
    "objectID": 795,
    "title": "Desktop Application",
    "description": "",
    "content": "i://localhost\"); await expect(page.locator(\"[data-testid=main-app]\")).toBeVisible(); }); ` Next Steps [Development Setup - Setting up the desktop development environment Build System - Cross-platform build configuration Core Business Logic - Rust engine integration",
    "url": "/docs\\community\\technical-documentation\\development\\desktop-application",
    "type": "docs",
    "tags": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative"
    ],
    "keywords": [
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron-alternative",
      "tauri",
      "desktop",
      "native",
      "rust",
      "cross-platform",
      "electron alternative",
      "native wrapper"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Desktop Application",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 39
  },
  {
    "objectID": 796,
    "title": "Deployment Guide",
    "description": "",
    "content": "Deployment Guide This guide covers the complete deployment process for PianoRhythm, including GitHub Pages deployment, production server setup, CI/CD pipelines, and monitoring strategies. Deployment Architecture `mermaid graph TB subgraph \"Development\" DEVLocal Development] TEST[Testing Environment]",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 797,
    "title": "Deployment Guide",
    "description": "",
    "content": " end subgraph \"CI/CD Pipeline\" GHA[GitHub Actions] BUILD[Build Process] DEPLOY[Deployment] end subgraph \"Production Environments\" GHP[GitHub PagesStatic Site] PROD[Production ServerDigitalOcean] CDN[CDNAsset Delivery] end subgraph \"Infrastructure\" MONGO[MongoDB Atlas] REDIS[Redis Cache] MONITOR[Moni",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 798,
    "title": "Deployment Guide",
    "description": "",
    "content": "toring] end DEV --> GHA TEST --> GHA GHA --> BUILD BUILD --> DEPLOY DEPLOY --> GHP DEPLOY --> PROD PROD --> CDN PROD --> MONGO PROD --> REDIS PROD --> MONITOR ` GitHub Pages Deployment (Current) 1. Automatic Deployment The project automatically deploys to GitHub Pages on every push to the main branc",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 799,
    "title": "Deployment Guide",
    "description": "",
    "content": "h: `yaml .github/workflows/deploy-pages.yml name: Deploy to GitHub Pages on: push: branches: [main] workflow_dispatch: permissions: contents: read pages: write id-token: write concurrency: group: \"pages\" cancel-in-progress: false jobs: build: runs-on: ubuntu-latest steps: name: Checkout uses: action",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 800,
    "title": "Deployment Guide",
    "description": "",
    "content": "s/checkout@v4 name: Setup Node.js uses: actions/setup-node@v4 with: node-version: '19' cache: 'pnpm' name: Setup Rust uses: actions-rs/toolchain@v1 with: toolchain: nightly target: wasm32-unknown-unknown name: Install wasm-bindgen-cli run: cargo install wasm-bindgen-cli name: Install dependencies ru",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 801,
    "title": "Deployment Guide",
    "description": "",
    "content": "n: pnpm install name: Build Rust core run: | cd pianorhythm_core chmod +x ./build-core-release.sh ./build-core-release.sh name: Build for production run: pnpm run build:production env: NODE_ENV: production name: Setup Pages uses: actions/configure-pages@v4 name: Upload artifact uses: actions/upload-",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 802,
    "title": "Deployment Guide",
    "description": "",
    "content": "pages-artifact@v3 with: path: './dist' deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 ` 2. Build Configuration for GitHub Pages `typescript // a",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 803,
    "title": "Deployment Guide",
    "description": "",
    "content": "pp.config.ts - GitHub Pages specific configuration const isProduction = mode === \"production\"; export default defineConfig({ server: { preset: \"./preset\", routeRules: { \"/\": { prerender: isProduction } }, prerender: { crawlLinks: isProduction } }, vite: { base: isProduction ? '/pianorhythm-ssr/' : '",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 804,
    "title": "Deployment Guide",
    "description": "",
    "content": "/', build: { target: \"esnext\", minify: \"esbuild\", sourcemap: false } } }); ` 3. Static Site Generation `typescript // preset/nitro.config.ts - GitHub Pages preset export default defineNitroConfig({ preset: \"github-pages\", prerender: { routes: [ \"/\", \"/login\", \"/app-loading\" ], crawlLinks: true }, ni",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 805,
    "title": "Deployment Guide",
    "description": "",
    "content": "tro: { output: { publicDir: \"dist\" } } }); ` Production Server Deployment 1. Docker Configuration `dockerfile Dockerfile FROM node:19-alpine AS builder Install Rust RUN apk add --no-cache curl build-base RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y ENV PATH=\"/root/.car",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 806,
    "title": "Deployment Guide",
    "description": "",
    "content": "go/bin:${PATH}\" RUN rustup install nightly RUN rustup default nightly RUN rustup target add wasm32-unknown-unknown RUN cargo install wasm-bindgen-cli WORKDIR /app COPY package*.json pnpm-lock.yaml ./ RUN npm install -g pnpm RUN pnpm install --frozen-lockfile COPY . . Build Rust core RUN cd pianorhyt",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 807,
    "title": "Deployment Guide",
    "description": "",
    "content": "hm_core && \\ chmod +x ./build-core-release.sh && \\ ./build-core-release.sh Build application RUN pnpm run build:production Production stage FROM node:19-alpine AS runtime RUN npm install -g pnpm WORKDIR /app Copy built application COPY --from=builder /app/dist ./dist COPY --from=builder /app/package",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 808,
    "title": "Deployment Guide",
    "description": "",
    "content": ".json ./ COPY --from=builder /app/pnpm-lock.yaml ./ Install production dependencies only RUN pnpm install --prod --frozen-lockfile EXPOSE 3000 CMD [\"pnpm\", \"start\"] ` 2. Docker Compose for Development `yaml docker-compose.yml version: '3.8' services: app: build: . ports: \"3000:3000\" environment: NOD",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 809,
    "title": "Deployment Guide",
    "description": "",
    "content": "E_ENV=production PIANORHYTHM_MONGODB_URI=mongodb://mongo:27017/pianorhythm PIANORHYTHM_SERVER_URL=http://localhost:7000 depends_on: mongo redis volumes: ./logs:/app/logs mongo: image: mongo:7 ports: \"27017:27017\" volumes: mongo_data:/data/db environment: MONGO_INITDB_DATABASE=pianorhythm redis: imag",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 810,
    "title": "Deployment Guide",
    "description": "",
    "content": "e: redis:7-alpine ports: \"6379:6379\" volumes: redis_data:/data volumes: mongo_data: redis_data: ` 3. DigitalOcean Deployment `yaml .github/workflows/deploy-production.yml name: Deploy to Production on: release: types: [published] jobs: deploy: runs-on: ubuntu-latest steps: name: Checkout uses: actio",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 811,
    "title": "Deployment Guide",
    "description": "",
    "content": "ns/checkout@v4 name: Build and push Docker image uses: docker/build-push-action@v5 with: context: . push: true tags: | registry.digitalocean.com/pianorhythm/app:latest registry.digitalocean.com/pianorhythm/app:${{ github.event.release.tag_name }} name: Deploy to DigitalOcean uses: digitalocean/actio",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 812,
    "title": "Deployment Guide",
    "description": "",
    "content": "n-doctl@v2 with: token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} name: Update Kubernetes deployment run: | doctl kubernetes cluster kubeconfig save pianorhythm-cluster kubectl set image deployment/pianorhythm-app app=registry.digitalocean.com/pianorhythm/app:${{ github.event.release.tag_name }} kube",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 813,
    "title": "Deployment Guide",
    "description": "",
    "content": "ctl rollout status deployment/pianorhythm-app ` Environment Configuration 1. Environment Variables `bash Production environment variables NODE_ENV=production PORT=3000 Database PIANORHYTHM_MONGODB_URI=mongodb+srv://user:pass@cluster.mongodb.net/pianorhythm PIANORHYTHM_MONGODB_API_KEY=your-api-key Ex",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 814,
    "title": "Deployment Guide",
    "description": "",
    "content": "ternal Services PIANORHYTHM_SERVER_URL=https://api.pianorhythm.io PR_ASSETS_URL=https://assets.pianorhythm.io Authentication PIANORHYTHM_GITHUB_ACCESS_TOKEN=your-github-token PIANORHYTHM_GITHUB_APP_ID=925579 Monitoring SENTRY_DSN=your-sentry-dsn ANALYTICS_URL=your-analytics-url Security JWT_SECRET=y",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 815,
    "title": "Deployment Guide",
    "description": "",
    "content": "our-jwt-secret CORS_ORIGIN=https://pianorhythm.io ` 2. Configuration Management `typescript // src/lib/config.ts import { z } from 'zod'; const ConfigSchema = z.object({ NODE_ENV: z.enum(['development', 'staging', 'production']), PORT: z.coerce.number().default(3000), MONGODB_URI: z.string().url(), ",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 816,
    "title": "Deployment Guide",
    "description": "",
    "content": "SERVER_URL: z.string().url(), ASSETS_URL: z.string().url(), JWT_SECRET: z.string().min(32), }); export const config = ConfigSchema.parse(process.env); export const isDevelopment = config.NODE_ENV === 'development'; export const isProduction = config.NODE_ENV === 'production'; ` Database Deployment 1",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 817,
    "title": "Deployment Guide",
    "description": "",
    "content": ". MongoDB Atlas Setup `typescript // Database connection for production export class ProductionDatabase { private static instance: ProductionDatabase; private client: MongoClient; private constructor() { this.client = new MongoClient(config.MONGODB_URI, { maxPoolSize: 10, serverSelectionTimeoutMS: 5",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 818,
    "title": "Deployment Guide",
    "description": "",
    "content": "000, socketTimeoutMS: 45000, }); } async connect(): Promise { try { await this.client.connect(); console.log('✅ Connected to MongoDB Atlas'); } catch (error) { console.error('❌ MongoDB connection failed:', error); throw error; } } getDb(name: string = 'pianorhythm'): Db { return this.client.db(name)",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 819,
    "title": "Deployment Guide",
    "description": "",
    "content": "; } } ` 2. Database Migrations `typescript // scripts/migrate.ts import { MongoClient } from 'mongodb'; const migrations = [ { version: 1, name: 'create_indexes', up: async (db: Db) => { await db.collection('users').createIndex({ usertag: 1 }, { unique: true }); await db.collection('rooms').createIn",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 820,
    "title": "Deployment Guide",
    "description": "",
    "content": "dex({ name: 1 }); await db.collection('sheet_music').createIndex({ title: 'text' }); } }, { version: 2, name: 'add_user_settings', up: async (db: Db) => { await db.collection('users').updateMany( { settings: { $exists: false } }, { $set: { settings: { theme: 'dark', notifications: true } } } ); } } ",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 821,
    "title": "Deployment Guide",
    "description": "",
    "content": "]; export async function runMigrations(): Promise { const client = new MongoClient(process.env.MONGODB_URI!); await client.connect(); const db = client.db(); const migrationsCollection = db.collection('migrations'); for (const migration of migrations) { const existing = await migrationsCollection.fi",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 822,
    "title": "Deployment Guide",
    "description": "",
    "content": "ndOne({ version: migration.version }); if (!existing) { console.log(Running migration: ${migration.name}); await migration.up(db); await migrationsCollection.insertOne({ version: migration.version, name: migration.name, appliedAt: new Date() }); } } await client.close(); } ` CDN and Asset Management",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 823,
    "title": "Deployment Guide",
    "description": "",
    "content": " 1. Asset Optimization `typescript // vite.config.ts - Asset optimization export default defineConfig({ build: { rollupOptions: { output: { manualChunks: { vendor: ['solid-js', '@solidjs/router'], audio: ['@core/pkg'], ui: ['@hope-ui/solid'] }, assetFileNames: (assetInfo) => { const info = assetInfo",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 824,
    "title": "Deployment Guide",
    "description": "",
    "content": ".name.split('.'); const ext = info[info.length - 1]; if (/\\.(wasm|sf2)$/.test(assetInfo.name)) { return assets/[name]-[hash; } return assets/name]-[hash; } } }, assetsInlineLimit: 0, // Don't inline assets chunkSizeWarningLimit: 1000 } }); ` 2. Service Worker for Caching `typescript // public/sw.js ",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 825,
    "title": "Deployment Guide",
    "description": "",
    "content": "const CACHE_NAME = 'pianorhythm-v1'; const STATIC_ASSETS = '/', '/login', '/manifest.json', '/pianorhythm_core/pkg/pianorhythm_core.wasm' ]; self.addEventListener('install', (event) => { event.waitUntil( caches.open(CACHE_NAME) .then(cache => cache.addAll(STATIC_ASSETS)) ); }); self.addEventListener",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 29
  },
  {
    "objectID": 826,
    "title": "Deployment Guide",
    "description": "",
    "content": "('fetch', (event) => { if (event.request.url.includes('/api/')) { // Don't cache API requests return; } event.respondWith( caches.match(event.request) .then(response => { if (response) { return response; } return fetch(event.request); }) ); }); ` Monitoring and Logging 1. Application Monitoring `typ",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 30
  },
  {
    "objectID": 827,
    "title": "Deployment Guide",
    "description": "",
    "content": "escript // src/lib/monitoring.ts import * as Sentry from '@sentry/node'; export function initializeMonitoring(): void { if (isProduction) { Sentry.init({ dsn: config.SENTRY_DSN, environment: config.NODE_ENV, tracesSampleRate: 0.1, }); } } export function logError(error: Error, context?: string): voi",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 31
  },
  {
    "objectID": 828,
    "title": "Deployment Guide",
    "description": "",
    "content": "d { console.error([${context || 'Unknown'}] Error:, error); if (isProduction) { Sentry.captureException(error, { tags: { context } }); } } export function logPerformance(operation: string, duration: number): void { console.log([Performance] ${operation}: ${duration}ms); if (isProduction && duration ",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 32
  },
  {
    "objectID": 829,
    "title": "Deployment Guide",
    "description": "",
    "content": "> 1000) { Sentry.addBreadcrumb({ message: Slow operation: ${operation}, level: 'warning', data: { duration } }); } } ` 2. Health Checks `typescript // src/routes/api/health.ts export async function GET(): Promise { const health = { status: 'ok', timestamp: new Date().toISOString(), version: process.",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 33
  },
  {
    "objectID": 830,
    "title": "Deployment Guide",
    "description": "",
    "content": "env.npm_package_version, checks: { database: await checkDatabase(), memory: checkMemory(), uptime: process.uptime() } }; const status = Object.values(health.checks).every(check => typeof check === 'object' ? check.status === 'ok' : true ) ? 200 : 503; return new Response(JSON.stringify(health), { st",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 34
  },
  {
    "objectID": 831,
    "title": "Deployment Guide",
    "description": "",
    "content": "atus, headers: { 'Content-Type': 'application/json' } }); } async function checkDatabase(): Promise { try { const start = Date.now(); await Database.getInstance().getDb().admin().ping(); const latency = Date.now() - start; return { status: 'ok', latency }; } catch (error) { return { status: 'error' ",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 35
  },
  {
    "objectID": 832,
    "title": "Deployment Guide",
    "description": "",
    "content": "}; } } function checkMemory(): { status: string; usage: NodeJS.MemoryUsage } { const usage = process.memoryUsage(); const status = usage.heapUsed / usage.heapTotal > 0.9 ? 'warning' : 'ok'; return { status, usage }; } ` Security Considerations 1. HTTPS and Security Headers `typescript // Security mi",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 36
  },
  {
    "objectID": 833,
    "title": "Deployment Guide",
    "description": "",
    "content": "ddleware export const securityMiddleware = createMiddleware({ onBeforeResponse: [ (event) => { // Security headers setResponseHeader(\"Strict-Transport-Security\", \"max-age=31536000; includeSubDomains\"); setResponseHeader(\"X-Content-Type-Options\", \"nosniff\"); setResponseHeader(\"X-Frame-Options\", \"DENY",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 37
  },
  {
    "objectID": 834,
    "title": "Deployment Guide",
    "description": "",
    "content": "\"); setResponseHeader(\"X-XSS-Protection\", \"1; mode=block\"); setResponseHeader(\"Referrer-Policy\", \"strict-origin-when-cross-origin\"); // CORS for WebAssembly setResponseHeader(\"Cross-Origin-Embedder-Policy\", \"require-corp\"); setResponseHeader(\"Cross-Origin-Opener-Policy\", \"same-origin\"); } ] }); ` 2.",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 38
  },
  {
    "objectID": 835,
    "title": "Deployment Guide",
    "description": "",
    "content": " Environment Secrets `bash Use environment-specific secret management Development: .env files Production: Kubernetes secrets, Docker secrets, or cloud provider secret management Example Kubernetes secret apiVersion: v1 kind: Secret metadata: name: pianorhythm-secrets type: Opaque data: mongodb-uri: ",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 39
  },
  {
    "objectID": 836,
    "title": "Deployment Guide",
    "description": "",
    "content": "jwt-secret: ` Rollback Strategy 1. Blue-Green Deployment `yaml kubernetes/deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: pianorhythm-app spec: replicas: 3 strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 1 maxSurge: 1 selector: matchLabels: app: pianorhythm template",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 40
  },
  {
    "objectID": 837,
    "title": "Deployment Guide",
    "description": "",
    "content": ": metadata: labels: app: pianorhythm spec: containers: name: app image: registry.digitalocean.com/pianorhythm/app:latest ports: containerPort: 3000 env: name: NODE_ENV value: \"production\" livenessProbe: httpGet: path: /api/health port: 3000 initialDelaySeconds: 30 periodSeconds: 10 readinessProbe: h",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 41
  },
  {
    "objectID": 838,
    "title": "Deployment Guide",
    "description": "",
    "content": "ttpGet: path: /api/health port: 3000 initialDelaySeconds: 5 periodSeconds: 5 ` 2. Automated Rollback `bash #!/bin/bash scripts/rollback.sh PREVIOUS_VERSION=$(kubectl get deployment pianorhythm-app -o jsonpath='{.metadata.annotations.deployment\\.kubernetes\\.io/revision}') PREVIOUS_VERSION=$((PREVIOUS",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 42
  },
  {
    "objectID": 839,
    "title": "Deployment Guide",
    "description": "",
    "content": "_VERSION - 1)) echo \"Rolling back to revision $PREVIOUS_VERSION\" kubectl rollout undo deployment/pianorhythm-app --to-revision=$PREVIOUS_VERSION kubectl rollout status deployment/pianorhythm-app Verify rollback if kubectl get pods -l app=pianorhythm | grep -q \"Running\"; then echo \"✅ Rollback success",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 43
  },
  {
    "objectID": 840,
    "title": "Deployment Guide",
    "description": "",
    "content": "ful\" else echo \"❌ Rollback failed\" exit 1 fi ` Performance Optimization 1. Build Optimization `typescript // Build performance optimizations export default defineConfig({ build: { target: 'esnext', minify: 'esbuild', cssMinify: true, rollupOptions: { treeshake: true, output: { manualChunks: (id) => ",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 44
  },
  {
    "objectID": 841,
    "title": "Deployment Guide",
    "description": "",
    "content": "{ if (id.includes('node_modules')) { if (id.includes('solid-js')) return 'solid'; if (id.includes('@hope-ui')) return 'ui'; if (id.includes('protobufjs')) return 'proto'; return 'vendor'; } } } } } }); ` 2. Runtime Performance `typescript // Performance monitoring in production if (isProduction) { /",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 45
  },
  {
    "objectID": 842,
    "title": "Deployment Guide",
    "description": "",
    "content": "/ Monitor Core Web Vitals import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => { getCLS(console.log); getFID(console.log); getFCP(console.log); getLCP(console.log); getTTFB(console.log); }); } ` Next Steps [Backend Services - Server architecture details Testing Guide - Testing ",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 46
  },
  {
    "objectID": 843,
    "title": "Deployment Guide",
    "description": "",
    "content": "in production environments Development Setup - Local development environment",
    "url": "/docs\\community\\technical-documentation\\development\\deployment-guide",
    "type": "docs",
    "tags": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring"
    ],
    "keywords": [
      "deployment",
      "devops",
      "ci-cd",
      "github-pages",
      "docker",
      "production",
      "monitoring",
      "deployment",
      "github pages",
      "production",
      "ci/cd",
      "docker",
      "monitoring",
      "devops",
      "infrastructure"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Deployment Guide",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 47
  },
  {
    "objectID": 844,
    "title": "Build System",
    "description": "",
    "content": "Build System PianoRhythm uses a sophisticated build system based on Vinxi and Vite, with custom configurations for different environments and specialized handling for Rust/WebAssembly components. Build Architecture `mermaid graph TB subgraph \"Source Code\" TSTypeScript/SolidJS] RUST[Rust Core] SASS[S",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 845,
    "title": "Build System",
    "description": "",
    "content": "ASS Styles] PROTO[Protocol Buffers] end subgraph \"Build Tools\" VINXI[Vinxi] VITE[Vite] CARGO[Cargo] PROTOC[Protocol Compiler] end subgraph \"Build Pipeline\" COMPILE[Compilation] BUNDLE[Bundling] OPTIMIZE[Optimization] ASSETS[Asset Processing] end subgraph \"Output\" WASM[WebAssembly] JS[JavaScript Bund",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 846,
    "title": "Build System",
    "description": "",
    "content": "les] CSS[Stylesheets] STATIC[Static Assets] end TS --> VINXI RUST --> CARGO SASS --> VITE PROTO --> PROTOC VINXI --> COMPILE CARGO --> COMPILE VITE --> COMPILE PROTOC --> COMPILE COMPILE --> BUNDLE BUNDLE --> OPTIMIZE OPTIMIZE --> ASSETS ASSETS --> WASM ASSETS --> JS ASSETS --> CSS ASSETS --> STATIC",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 847,
    "title": "Build System",
    "description": "",
    "content": " ` Core Build Configuration 1. Vinxi Configuration (app.config.ts) The main build orchestrator that coordinates all build processes: `typescript export default defineConfig({ server: { preset: \"./preset\", minify: isProduction, sourceMap: !isProduction, routeRules: { \"/\": { prerender: isProduction },",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 848,
    "title": "Build System",
    "description": "",
    "content": " \"/*\": { cors: true, headers: { \"Cross-Origin-Opener-Policy\": \"same-origin\", \"Cross-Origin-Embedder-Policy\": \"require-corp\", \"Cross-Origin-Resource-Policy\": \"cross-origin\" } } } }, vite: { plugins: [ // Protocol buffer compilation !isProduction && !isCI && run([ { name: 'build proto', run: [node ${p",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 849,
    "title": "Build System",
    "description": "",
    "content": "ath.resolve(__dirname, \"./build-protobuf-ts.cjs\")}], pattern: ['./pianorhythm_core/proto/raw/**.proto'] } ]), // Copy WASM artifacts !isTestMode && viteStaticCopy({ targets: [ { src: './pianorhythm_core/pkg/**', dest: 'pianorhythm_core/pkg' } ] }), // Environment variable replacement replace({ preve",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 850,
    "title": "Build System",
    "description": "",
    "content": "ntAssignment: true, DATE: Date.now(), APP_VERSION: APP_VERSION, BUILD_ENV: mode }) ] } }); ` 2. Environment-Specific Builds `typescript // Build configurations for different environments const buildConfigs = { 'local-dev': { minify: false, sourceMap: true, prerender: false, optimizeDeps: true }, 'de",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 851,
    "title": "Build System",
    "description": "",
    "content": "velopment': { minify: false, sourceMap: true, prerender: false, optimizeDeps: true }, 'staging': { minify: true, sourceMap: true, prerender: true, optimizeDeps: false }, 'production': { minify: true, sourceMap: false, prerender: true, optimizeDeps: false } }; ` 3. Custom Preset (preset/nitro.config.",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 852,
    "title": "Build System",
    "description": "",
    "content": "ts) `typescript export default defineNitroConfig({ compatibilityDate: \"2025-02-05\", preset: process.env.NODE_ENV === \"production\" ? \"github-pages\" : \"node-server\", prerender: { routes: [\"/\", \"/login\"], crawlLinks: true }, nitro: { output: { publicDir: \"dist\" } }, runtimeConfig: { public: { clientVer",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 853,
    "title": "Build System",
    "description": "",
    "content": "sion: process.env.PR_CLIENT_VERSION, assetsUrl: process.env.PR_ASSETS_URL } } }); ` Rust/WebAssembly Build 1. Core Engine Build Scripts `bash #!/bin/bash pianorhythm_core/build-core-release.sh echo \"Building PianoRhythm Core (Release)...\" Set Rust flags for optimization export RUSTFLAGS=\"-C target-f",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 854,
    "title": "Build System",
    "description": "",
    "content": "eature=+simd128\" Build the core library cargo build --release --target wasm32-unknown-unknown Generate WebAssembly bindings wasm-bindgen \\ --target web \\ --typescript \\ --out-dir pkg \\ --out-name pianorhythm_core \\ target/wasm32-unknown-unknown/release/pianorhythm_core.wasm Optimize WASM file size w",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 855,
    "title": "Build System",
    "description": "",
    "content": "asm-opt -Oz -o pkg/pianorhythm_core_bg.wasm pkg/pianorhythm_core_bg.wasm echo \"✅ Core build complete\" ` 2. Audio Synthesizer Build `bash #!/bin/bash pianorhythm_core/build-synth-wasm-release.cmd echo \"Building Audio Synthesizer...\" cd synth Build with audio optimizations cargo build --release --targ",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 856,
    "title": "Build System",
    "description": "",
    "content": "et wasm32-unknown-unknown --features \"wasm-audio\" Generate bindings for audio worklet wasm-bindgen \\ --target no-modules \\ --out-dir ../pkg/synth \\ target/wasm32-unknown-unknown/release/pianorhythm_synth.wasm echo \"✅ Synthesizer build complete\" ` 3. 3D Renderer Build `bash #!/bin/bash pianorhythm_co",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 857,
    "title": "Build System",
    "description": "",
    "content": "re/build-bevy-renderer-wasm-webgpu.sh echo \"Building Bevy 3D Renderer...\" cd bevy_renderer Build with WebGPU support cargo build --release --target wasm32-unknown-unknown --features \"webgpu\" Generate renderer bindings wasm-bindgen \\ --target web \\ --out-dir ../pkg/renderer \\ target/wasm32-unknown-un",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 858,
    "title": "Build System",
    "description": "",
    "content": "known/release/bevy_renderer.wasm echo \"✅ Renderer build complete\" ` Protocol Buffer Compilation 1. Protocol Buffer Build Script `javascript // build-protobuf-ts.cjs const { execSync } = require('child_process'); const fs = require('fs'); const path = require('path'); const PROTO_DIR = './pianorhythm",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 859,
    "title": "Build System",
    "description": "",
    "content": "_core/proto/raw'; const OUTPUT_DIR = './src/proto'; function buildProtocolBuffers() { console.log('🔧 Building Protocol Buffers...'); // Find all .proto files const protoFiles = fs.readdirSync(PROTO_DIR) .filter(file => file.endsWith('.proto')) .map(file => path.join(PROTO_DIR, file)); if (protoFile",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 860,
    "title": "Build System",
    "description": "",
    "content": "s.length === 0) { console.log('No .proto files found'); return; } // Generate TypeScript definitions for (const protoFile of protoFiles) { const outputFile = path.join(OUTPUT_DIR, path.basename(protoFile, '.proto') + '.ts' ); try { execSync(`protoc \\ --plugin=protoc-gen-ts=./node_modules/.bin/protoc",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 861,
    "title": "Build System",
    "description": "",
    "content": "-gen-ts \\ --ts_out=${OUTPUT_DIR} \\ --proto_path=${PROTO_DIR} \\ ${protoFile}`, { stdio: 'inherit' } ); console.log(✅ Generated ${outputFile}); } catch (error) { console.error(❌ Failed to generate ${outputFile}:, error.message); } } console.log('✅ Protocol Buffers build complete'); } buildProtocolBuff",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 862,
    "title": "Build System",
    "description": "",
    "content": "ers(); ` 2. Protocol Buffer Integration `typescript // Protocol buffer usage in TypeScript import { AppStateActions, AppStateActions_Action } from '~/proto/pianorhythm-actions'; import { AudioSynthActions, AudioSynthActions_Action } from '~/proto/pianorhythm-actions'; // Create protocol buffer messa",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 863,
    "title": "Build System",
    "description": "",
    "content": "ges const action = AppStateActions.create({ action: AppStateActions_Action.SynthAction, audioSynthAction: AudioSynthActions.create({ action: AudioSynthActions_Action.NoteOn, note: 60, velocity: 127 }) }); // Serialize to binary const bytes = AppStateActions.encode(action).finish(); // Send over WebS",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 864,
    "title": "Build System",
    "description": "",
    "content": "ocket websocket.send(bytes); ` Asset Processing 1. Static Asset Copying `typescript // Vite plugin for copying static assets viteStaticCopy({ targets: [ { src: './pianorhythm_core/pkg/**', dest: 'pianorhythm_core/pkg' }, { src: './public/soundfonts/**', dest: 'soundfonts' }, { src: './public/models/",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 865,
    "title": "Build System",
    "description": "",
    "content": "**', dest: 'models' } ] }) ` 2. Asset Optimization `typescript // Asset optimization configuration export default defineConfig({ build: { rollupOptions: { output: { assetFileNames: (assetInfo) => { const info = assetInfo.name.split('.'); const ext = info[info.length - 1]; // Special handling for WAS",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 866,
    "title": "Build System",
    "description": "",
    "content": "M and audio files if (/\\.(wasm|sf2|wav|mp3)$/.test(assetInfo.name)) { return assets/[name]-[hash; } return assets/name]-[hash; } } }, assetsInlineLimit: 0, // Don't inline large assets chunkSizeWarningLimit: 1000 } }); ` Code Splitting and Bundling 1. Manual Chunk Configuration `typescript // Optimi",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 867,
    "title": "Build System",
    "description": "",
    "content": "zed code splitting export default defineConfig({ build: { rollupOptions: { output: { manualChunks: { // Core framework 'solid': 'solid-js', '@solidjs/router', '@solidjs/meta'], // UI library 'ui': ['@hope-ui/solid', 'solid-icons'], // Audio and core 'audio': ['@core/pkg'], // Protocol buffers 'proto",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 868,
    "title": "Build System",
    "description": "",
    "content": "': ['protobufjs'], // Utilities 'utils': ['lodash-es', 'luxon', 'animejs'], // Vendor libraries 'vendor': ['rxjs', 'sweetalert2', 'abcjs'] } } } } }); ` 2. Dynamic Imports `typescript // Lazy loading for performance const PianoRenderer = lazy(() => import('~/components/piano-renderer')); const Audio",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 869,
    "title": "Build System",
    "description": "",
    "content": "Visualizer = lazy(() => import('~/components/audio-visualizer')); const SheetMusicEditor = lazy(() => import('~/components/sheet-music-editor')); // Conditional loading based on features const load3DRenderer = async () => { if (appSettings.enable3D) { return import('~/components/3d-renderer'); } ret",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 870,
    "title": "Build System",
    "description": "",
    "content": "urn import('~/components/2d-renderer'); }; ` Development vs Production Builds 1. Development Optimizations `typescript // Development-specific configuration const developmentConfig = { build: { sourcemap: true, minify: false, rollupOptions: { treeshake: false // Faster builds } }, server: { hmr: tru",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 871,
    "title": "Build System",
    "description": "",
    "content": "e, watch: { ignored: ['/pianorhythm_core/target/'] } }, optimizeDeps: { include: [ '@hope-ui/solid', 'solid-js', 'protobufjs' ] } }; ` 2. Production Optimizations `typescript // Production-specific configuration const productionConfig = { build: { sourcemap: false, minify: 'esbuild', rollupOptions: ",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 872,
    "title": "Build System",
    "description": "",
    "content": "{ treeshake: true, output: { compact: true } } }, esbuild: { drop: ['console', 'debugger'], legalComments: 'none' } }; ` Build Performance 1. Caching Strategies `typescript // Build caching configuration export default defineConfig({ cacheDir: '.vite', build: { cache: { type: 'filesystem', buildDepe",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 873,
    "title": "Build System",
    "description": "",
    "content": "ndencies: { config: [__filename] } } } }); ` 2. Parallel Processing `bash Parallel build script #!/bin/bash echo \"Starting parallel build process...\" Build Rust components in parallel (cd pianorhythm_core && ./build-core-release.sh) & CORE_PID=$! (cd pianorhythm_core && ./build-synth-wasm-release.cm",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 29
  },
  {
    "objectID": 874,
    "title": "Build System",
    "description": "",
    "content": "d) & SYNTH_PID=$! (cd pianorhythm_core && ./build-bevy-renderer-wasm-webgpu.sh) & RENDERER_PID=$! Wait for all Rust builds to complete wait $CORE_PID wait $SYNTH_PID wait $RENDERER_PID echo \"✅ Rust builds complete\" Build frontend pnpm run build:production echo \"✅ Build process complete\" ` Build Moni",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 30
  },
  {
    "objectID": 875,
    "title": "Build System",
    "description": "",
    "content": "toring 1. Build Analytics `typescript // Build performance monitoring const buildStartTime = Date.now(); export default defineConfig({ plugins: [ { name: 'build-monitor', buildStart() { console.log('🚀 Build started'); }, buildEnd() { const duration = Date.now() - buildStartTime; console.log(✅ Build",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 31
  },
  {
    "objectID": 876,
    "title": "Build System",
    "description": "",
    "content": " completed in ${duration}ms); if (duration > 60000) { console.warn(⚠️ Slow build detected: ${duration}ms); } } } ] }); ` 2. Bundle Analysis `bash Bundle analysis script #!/bin/bash echo \"Analyzing bundle size...\" Build with bundle analyzer pnpm run build:production --analyze Generate bundle report n",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 32
  },
  {
    "objectID": 877,
    "title": "Build System",
    "description": "",
    "content": "px vite-bundle-analyzer dist echo \"📊 Bundle analysis complete\" ` Troubleshooting 1. Common Build Issues `bash Clear build cache rm -rf .vite rm -rf dist rm -rf pianorhythm_core/target rm -rf pianorhythm_core/pkg Rebuild from scratch pnpm run build:production ` 2. WASM Build Issues `bash Update Rust",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 33
  },
  {
    "objectID": 878,
    "title": "Build System",
    "description": "",
    "content": " toolchain rustup update nightly rustup target add wasm32-unknown-unknown Update wasm-bindgen cargo install wasm-bindgen-cli --force Rebuild WASM components cd pianorhythm_core ./build-core-release.sh ` 3. Memory Issues `bash Increase Node.js memory limit export NODE_OPTIONS=\"--max-old-space-size=81",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 34
  },
  {
    "objectID": 879,
    "title": "Build System",
    "description": "",
    "content": "92\" Use faster build mode for development export VITE_BUILD_MODE=\"fast\" ` Next Steps [Development Setup - Setting up the build environment Desktop Application - Tauri build configuration and native compilation Deployment Guide - Production build deployment Core Business Logic - Understanding Rust co",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 35
  },
  {
    "objectID": 880,
    "title": "Build System",
    "description": "",
    "content": "mponents",
    "url": "/docs\\community\\technical-documentation\\development\\build-system",
    "type": "docs",
    "tags": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "build-system",
      "vinxi",
      "vite",
      "compilation",
      "bundling",
      "rust",
      "webassembly",
      "build",
      "vinxi",
      "vite",
      "webpack",
      "rust",
      "webassembly",
      "compilation",
      "bundling",
      "optimization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Build System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 36
  },
  {
    "objectID": 881,
    "title": "Protocol Buffers",
    "description": "",
    "content": "Protocol Buffers PianoRhythm uses Protocol Buffers (protobuf) for efficient, cross-platform message serialization between the Rust core engine, TypeScript frontend, and WebSocket communication layer. This ensures type-safe, compact, and fast data exchange across all system components. Architecture O",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 882,
    "title": "Protocol Buffers",
    "description": "",
    "content": "verview `mermaid graph TB subgraph \"Protocol Definition\" PD.proto Files] MS[Message Schemas] SV[Service Definitions] end subgraph \"Code Generation\" RG[Rust Generation] TSG[TypeScript Generation] JSG[JavaScript Generation] end subgraph \"Runtime Usage\" RC[Rust Core] FE[Frontend TypeScript] WS[WebSocke",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 883,
    "title": "Protocol Buffers",
    "description": "",
    "content": "t Messages] DB[Database Storage] end subgraph \"Serialization Formats\" BIN[Binary Format] JSON[JSON Format] B64[Base64 Encoding] end PD --> MS MS --> SV SV --> RG SV --> TSG SV --> JSG RG --> RC TSG --> FE JSG --> WS RC --> BIN FE --> JSON WS --> B64 BIN --> DB ` Core Message Types 1. Audio Messages ",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 884,
    "title": "Protocol Buffers",
    "description": "",
    "content": "MIDI Events `protobuf message MidiMessageOutputDto { string socketID = 1; repeated MidiMessageBuffer data = 2; } message MidiMessageBuffer { optional MidiMessageBufferData data = 1; } message MidiMessageBufferData { MidiDtoType messageType = 1; optional MidiNoteOnDto noteOn = 2; optional MidiNoteOff",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 885,
    "title": "Protocol Buffers",
    "description": "",
    "content": "Dto noteOff = 3; optional MidiControlChangeDto controlChange = 4; } enum MidiDtoType { NoteOn = 0; NoteOff = 1; ControlChange = 2; ProgramChange = 3; PitchBend = 4; } ` Audio Synthesis `protobuf message SynthEventDto { string socketId = 1; SynthEventType eventType = 2; optional NoteOnEvent noteOn = ",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 886,
    "title": "Protocol Buffers",
    "description": "",
    "content": "3; optional NoteOffEvent noteOff = 4; optional VolumeChangeEvent volumeChange = 5; } message NoteOnEvent { uint32 note = 1; uint32 velocity = 2; uint32 channel = 3; optional uint32 program = 4; optional string deviceId = 5; } ` 2. User & Session Messages User Management `protobuf message UserDto { s",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 887,
    "title": "Protocol Buffers",
    "description": "",
    "content": "tring id = 1; string username = 2; string email = 3; UserRole role = 4; optional string avatarUrl = 5; repeated string permissions = 6; } enum UserRole { GUEST = 0; MEMBER = 1; MODERATOR = 2; ADMIN = 3; } ` Session State `protobuf message SessionStateDto { string sessionId = 1; repeated UserDto conn",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 888,
    "title": "Protocol Buffers",
    "description": "",
    "content": "ectedUsers = 2; AudioSettings audioSettings = 3; RoomSettings roomSettings = 4; optional string currentSong = 5; } message AudioSettings { float masterVolume = 1; uint32 sampleRate = 2; uint32 bufferSize = 3; bool enableReverb = 4; float reverbLevel = 5; } ` 3. Application State Messages Theme Confi",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 889,
    "title": "Protocol Buffers",
    "description": "",
    "content": "guration `protobuf message AppThemeColors { string primary = 1; string accent = 2; string tertiary = 3; } message AppSettings { AppThemes selectedTheme = 1; bool enableAnimations = 2; bool enableSoundEffects = 3; string language = 4; AppThemeColors themeColors = 5; } enum AppThemes { DEFAULT = 0; TH",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 890,
    "title": "Protocol Buffers",
    "description": "",
    "content": "EME_1 = 1; THEME_2 = 2; THEME_3 = 3; HALLOWEEN = 4; WHITE_AND_BLACK = 5; BLACK_AND_WHITE = 6; } ` Code Generation 1. Rust Integration Build Configuration `toml Cargo.toml [build-dependencies] prost-build = \"0.12\" [dependencies] prost = \"0.12\" prost-types = \"0.12\" ` Build Script `rust // build.rs fn ",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 891,
    "title": "Protocol Buffers",
    "description": "",
    "content": "main() { prost_build::Config::new() .out_dir(\"src/proto\") .compile_protos( &[ \"proto/midi.proto\", \"proto/audio.proto\", \"proto/user.proto\", \"proto/app.proto\" ], &[\"proto/\"] ) .unwrap(); } ` Usage in Rust `rust use crate::proto::{MidiMessageOutputDto, MidiDtoType, NoteOnEvent}; // Serialize message le",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 892,
    "title": "Protocol Buffers",
    "description": "",
    "content": "t midi_event = MidiMessageOutputDto { socket_id: \"user123\".to_string(), data: vec![/* ... */], }; let serialized = midi_event.encode_to_vec(); // Deserialize message let deserialized = MidiMessageOutputDto::decode(&serialized[..])?; ` 2. TypeScript Integration Package Configuration `json { \"dependen",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 893,
    "title": "Protocol Buffers",
    "description": "",
    "content": "cies\": { \"protobufjs\": \"^7.4.0\" }, \"devDependencies\": { \"@types/protobufjs\": \"^1.0.0\" } } ` Code Generation Script `typescript // scripts/generate-proto.ts import { load } from \"protobufjs\"; async function generateTypes() { const root = await load([ \"proto/midi.proto\", \"proto/audio.proto\", \"proto/us",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 894,
    "title": "Protocol Buffers",
    "description": "",
    "content": "er.proto\", \"proto/app.proto\" ]); // Generate TypeScript definitions const output = root.toJSON(); // Write to src/proto/generated.ts } ` Usage in TypeScript `typescript import { MidiMessageOutputDto, MidiDtoType } from \"~/proto/pianorhythm-midi\"; // Create message const midiMessage = MidiMessageOutp",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 895,
    "title": "Protocol Buffers",
    "description": "",
    "content": "utDto.create({ socketID: \"user123\", data: [{ data: { messageType: MidiDtoType.NoteOn, noteOn: { note: 60, velocity: 127, channel: 1 } } }] }); // Serialize to binary const buffer = MidiMessageOutputDto.encode(midiMessage).finish(); // Serialize to JSON const json = MidiMessageOutputDto.toObject(midi",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 896,
    "title": "Protocol Buffers",
    "description": "",
    "content": "Message); ` WebSocket Integration 1. Message Framing `typescript // WebSocket message wrapper interface WebSocketMessage { type: string; data: Uint8Array; timestamp: number; } // Send protobuf message over WebSocket function sendMidiEvent(ws: WebSocket, midiEvent: MidiMessageOutputDto) { const encod",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 897,
    "title": "Protocol Buffers",
    "description": "",
    "content": "ed = MidiMessageOutputDto.encode(midiEvent).finish(); const message: WebSocketMessage = { type: \"midi_event\", data: encoded, timestamp: Date.now() }; ws.send(JSON.stringify({ ...message, data: Array.from(encoded) // Convert to array for JSON })); } ` 2. Message Routing `rust // Rust WebSocket handle",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 898,
    "title": "Protocol Buffers",
    "description": "",
    "content": "r use prost::Message; use crate::proto::MidiMessageOutputDto; pub fn handle_websocket_message(data: &[u8]) -> Result> { let midi_message = MidiMessageOutputDto::decode(data)?; match midi_message.data.first() { Some(buffer) if buffer.data.is_some() => { let buffer_data = buffer.data.as_ref().unwrap()",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 899,
    "title": "Protocol Buffers",
    "description": "",
    "content": "; match buffer_data.message_type() { MidiDtoType::NoteOn => handle_note_on(&midi_message), MidiDtoType::NoteOff => handle_note_off(&midi_message), _ => Ok(()) } } _ => Ok(()) } } ` Performance Optimizations 1. Message Pooling `typescript // Object pooling for frequent messages class MidiMessagePool ",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 900,
    "title": "Protocol Buffers",
    "description": "",
    "content": "{ private pool: MidiMessageOutputDto[] = []; acquire(): MidiMessageOutputDto { return this.pool.pop() || MidiMessageOutputDto.create(); } release(message: MidiMessageOutputDto) { // Reset message fields message.socketID = \"\"; message.data = []; this.pool.push(message); } } const midiPool = new MidiM",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 901,
    "title": "Protocol Buffers",
    "description": "",
    "content": "essagePool(); ` 2. Batch Processing `rust // Batch multiple MIDI events pub struct MidiBatch { events: Vec, max_size: usize, } impl MidiBatch { pub fn add_event(&mut self, event: MidiMessageOutputDto) { self.events.push(event); if self.events.len() >= self.max_size { self.flush(); } } pub fn flush(&",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 902,
    "title": "Protocol Buffers",
    "description": "",
    "content": "mut self) { if !self.events.is_empty() { let batch = MidiBatchDto { events: std::mem::take(&mut self.events), timestamp: SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_millis() as u64, }; self.send_batch(batch); } } } ` 3. Compression `typescript // Optional compression for large messages ",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 903,
    "title": "Protocol Buffers",
    "description": "",
    "content": "import { gzip, ungzip } from \"pako\"; function compressMessage(message: Uint8Array): Uint8Array { if (message.length > 1024) { // Only compress large messages return gzip(message); } return message; } function decompressMessage(data: Uint8Array, compressed: boolean): Uint8Array { return compressed ? ",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 904,
    "title": "Protocol Buffers",
    "description": "",
    "content": "ungzip(data) : data; } ` Error Handling 1. Validation `typescript // Message validation function validateMidiMessage(message: any): message is MidiMessageOutputDto { try { MidiMessageOutputDto.verify(message); return true; } catch (error) { console.error(\"Invalid MIDI message:\", error); return false",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 905,
    "title": "Protocol Buffers",
    "description": "",
    "content": "; } } ` 2. Graceful Degradation `rust // Handle malformed messages gracefully pub fn safe_decode_midi(data: &[u8]) -> Option { match MidiMessageOutputDto::decode(data) { Ok(message) => Some(message), Err(e) => { log::warn!(\"Failed to decode MIDI message: {}\", e); None } } } ` Schema Evolution 1. Bac",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 906,
    "title": "Protocol Buffers",
    "description": "",
    "content": "kward Compatibility `protobuf // Use field numbers consistently message UserDto { string id = 1; string username = 2; string email = 3; // New fields use higher numbers optional string displayName = 10; // Added in v2 optional int64 lastSeen = 11; // Added in v2 } ` 2. Versioning Strategy `protobuf ",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 907,
    "title": "Protocol Buffers",
    "description": "",
    "content": "// Version information in messages message MessageHeader { uint32 version = 1; string messageType = 2; uint64 timestamp = 3; } message VersionedMessage { MessageHeader header = 1; oneof payload { MidiMessageOutputDto midiMessage = 2; UserDto userMessage = 3; // Add new message types here } } ` Testi",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 908,
    "title": "Protocol Buffers",
    "description": "",
    "content": "ng 1. Message Validation Tests `typescript import { MidiMessageOutputDto, MidiDtoType } from \"~/proto/pianorhythm-midi\"; describe(\"MIDI Message Serialization\", () => { test(\"should serialize and deserialize correctly\", () => { const original = MidiMessageOutputDto.create({ socketID: \"test-user\", dat",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 909,
    "title": "Protocol Buffers",
    "description": "",
    "content": "a: [{ data: { messageType: MidiDtoType.NoteOn, noteOn: { note: 60, velocity: 127, channel: 1 } } }] }); const encoded = MidiMessageOutputDto.encode(original).finish(); const decoded = MidiMessageOutputDto.decode(encoded); expect(decoded.socketID).toBe(\"test-user\"); expect(decoded.data[0].data?.noteO",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 910,
    "title": "Protocol Buffers",
    "description": "",
    "content": "n?.note).toBe(60); }); }); ` 2. Cross-Platform Compatibility `rust #[cfg(test)] mod tests { use super::*; #[test] fn test_cross_platform_serialization() { let message = MidiMessageOutputDto { socket_id: \"test\".to_string(), data: vec![/* ... */], }; let encoded = message.encode_to_vec(); let decoded ",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 29
  },
  {
    "objectID": 911,
    "title": "Protocol Buffers",
    "description": "",
    "content": "= MidiMessageOutputDto::decode(&encoded[..]).unwrap(); assert_eq!(message.socket_id, decoded.socket_id); } } ` Next Steps [Core Business Logic - Rust engine implementation WebSocket Communication - Real-time message handling Frontend Architecture - TypeScript integration",
    "url": "/docs\\community\\technical-documentation\\core\\protocol-buffers",
    "type": "docs",
    "tags": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "keywords": [
      "protocol-buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform",
      "protocol buffers",
      "protobuf",
      "serialization",
      "websocket",
      "rust",
      "typescript",
      "cross-platform"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Protocol Buffers",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 30
  },
  {
    "objectID": 912,
    "title": "Initialization System",
    "description": "",
    "content": "Initialization System The PianoRhythm initialization system is a sophisticated dependency-based state machine designed to eliminate race conditions and ensure reliable application startup across different environments and network conditions. 🚀 Quick Reference: See Initialization Quick Reference for",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 913,
    "title": "Initialization System",
    "description": "",
    "content": " common development tasks. Problem Statement Original Race Condition Issues The original initialization process suffered from several critical race conditions: Synth Engine vs Client Socket ID: The synth engine was created before the client socket ID was available, causing the error: \"Synth engine c",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 914,
    "title": "Initialization System",
    "description": "",
    "content": "reated but client socket ID not set, yet.\" Async Operation Coordination: Multiple async operations (WebSocket connection, audio initialization, core WASM loading) ran in parallel without proper coordination Service Dependencies: Services were initialized without considering their dependencies on oth",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 915,
    "title": "Initialization System",
    "description": "",
    "content": "er services Error Recovery: Limited retry mechanisms and timeout handling for transient failures Impact These race conditions led to: Inconsistent application startup behavior Failed audio initialization User experience degradation Difficult debugging and maintenance Solution Architecture Core Compo",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 916,
    "title": "Initialization System",
    "description": "",
    "content": "nents 1. Initialization Service (src/services/initialization.service.ts) The central coordinator that manages the entire initialization process: `typescript interface InitializationService { executeStep(step: InitializationStep, executor: StepExecutor): Promise waitForStep(step: InitializationStep, ",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 917,
    "title": "Initialization System",
    "description": "",
    "content": "timeout?: number): Promise getStepStatus(step: InitializationStep): InitializationStatus isStepCompleted(step: InitializationStep): boolean reset(): void getNextReadyStep(): InitializationStep | null } ` Key Features: Dependency Management: Ensures steps execute only when dependencies are met Retry ",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 918,
    "title": "Initialization System",
    "description": "",
    "content": "Logic: Configurable retry attempts with exponential backoff Timeout Handling: Prevents hanging operations with configurable timeouts Progress Tracking: Real-time progress calculation and status updates Error Recovery: Graceful handling of failures with detailed error reporting 2. Initialization Type",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 919,
    "title": "Initialization System",
    "description": "",
    "content": "s (src/types/initialization.types.ts) Comprehensive type definitions for the initialization system: `typescript enum InitializationStep { UserGesture = \"user-gesture\", CoreWasm = \"core-wasm\", AppState = \"app-state\", WebsocketIdentity = \"websocket-identity\", WebsocketConnection = \"websocket-connectio",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 920,
    "title": "Initialization System",
    "description": "",
    "content": "n\", WelcomeEvent = \"welcome-event\", ClientLoaded = \"client-loaded\", AudioService = \"audio-service\", SynthEngine = \"synth-engine\", ClientSocketId = \"client-socket-id\", ClientAddedToSynth = \"client-added-to-synth\", Soundfont = \"soundfont\", AppSettings = \"app-settings\", UsersService = \"users-service\", ",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 921,
    "title": "Initialization System",
    "description": "",
    "content": "ChatService = \"chat-service\", RoomsService = \"rooms-service\", MonitorService = \"monitor-service\", Complete = \"complete\" } ` 3. Step Executor Interface Each initialization step implements the StepExecutor interface: `typescript interface StepExecutor { execute: () => Promise validate?: () => Promise ",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 922,
    "title": "Initialization System",
    "description": "",
    "content": "cleanup?: () => Promise } ` Dependency Graph The initialization follows a strict dependency graph (refactored for proper audio/soundfont order): `mermaid graph TD A[UserGesture] --> B[CoreWasm] B --> C[AppState] C --> D[WebsocketIdentity] D --> E[WebsocketConnection] E --> F[WelcomeEvent] F --> G[Cl",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 923,
    "title": "Initialization System",
    "description": "",
    "content": "ientLoaded] G --> H[AudioService] H --> I[SynthEngine] I --> J[ClientSocketId] J --> K[ClientAddedToSynth] K --> L[Soundfont] L --> M[AppSettings] M --> N[UsersService] N --> O[ChatService] O --> P[RoomsService] P --> Q[MonitorService] Q --> R[Complete] style K fill:#ff9999 style H fill:#99ff99 styl",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 924,
    "title": "Initialization System",
    "description": "",
    "content": "e L fill:#99ff99 ` Critical Synchronization Points Audio Service Before Soundfont (NEW) Key Refactoring: The audio service now initializes completely before soundfont loading begins: `typescript // Step 8: Audio Service (initializes synth engine and audio context) await initializationService().execu",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 925,
    "title": "Initialization System",
    "description": "",
    "content": "teStep(InitializationStep.AudioService, { execute: async () => { if (!audioService().initialized()) { await audioService().initialize(); await raceTimeout(until(audioService().initialized), DEFAULT_SERVICE_TIMEOUT, true, \"Audio service never initialized.\"); } } }); // Step 10: Soundfont (loads after",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 926,
    "title": "Initialization System",
    "description": "",
    "content": " audio service is ready) await initializationService().executeStep(InitializationStep.Soundfont, { execute: async () => { let soundfontLoaded = await onLoadClientSoundfont(); // ... soundfont loading logic with fallback to default }, validate: async () => { return !!audioService().loadedSoundfontNam",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 927,
    "title": "Initialization System",
    "description": "",
    "content": "e(); } }); ` Benefits: Prevents audio context initialization issues Ensures synth engine is ready before soundfont data is loaded Provides proper error handling and fallback mechanisms Allows other services to depend on both audio AND soundfont being ready Client Added to Synth Step This is the most",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 928,
    "title": "Initialization System",
    "description": "",
    "content": " critical step that resolves the original race condition: `typescript await initializationService().executeStep(InitializationStep.ClientAddedToSynth, { execute: async () => { // Wait for ALL required conditions await raceTimeout(until(() => { return appService().clientLoaded() && appService().getSo",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 929,
    "title": "Initialization System",
    "description": "",
    "content": "cketID() && audioService().clientAdded(); }), DEFAULT_SERVICE_TIMEOUT, true, \"Client never properly added to synth.\"); }, validate: async () => { return appService().clientLoaded() && !!appService().getSocketID() && audioService().clientAdded(); } }); ` This step ensures: Client is loaded from WebSo",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 930,
    "title": "Initialization System",
    "description": "",
    "content": "cket welcome event Socket ID is available and set Audio service has successfully added the client to the synth engine Implementation Details Enhanced Audio Service The audio service was updated to handle proper sequencing: `typescript // Wait for both client to be loaded AND socket ID to be availabl",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 931,
    "title": "Initialization System",
    "description": "",
    "content": "e await until(() => { const clientLoaded = appService().clientLoaded(); const socketId = appService().getSocketID(); const workletReady = !appSettingsService().getSetting(\"AUDIO_USE_WORKLET\") || !canCreateSharedArrayBuffer() || audioWorkletNode(); return clientLoaded && socketId && workletReady; });",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 932,
    "title": "Initialization System",
    "description": "",
    "content": " const socketId = appService().getSocketID(); if (!socketId) { logError(\"[AudioService] Client loaded but socket ID is not available\"); return; } // Now safely add client to synth appService().coreService()?.send_app_action(AppStateActions.create({ action: AppStateActions_Action.SynthAction, audioSy",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 933,
    "title": "Initialization System",
    "description": "",
    "content": "nthAction: AudioSynthActions.create({ action: AudioSynthActions_Action.AddClient, socketId: socketId, }) })); ` Core Middleware Improvements The Rust core middleware was enhanced with better error handling: `rust AudioSynthActions_Action::AddClient if synth_action.has_socketId() => { let socket_id_s",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 934,
    "title": "Initialization System",
    "description": "",
    "content": "tr = synth_action.get_socketId(); log::info!(\"Adding client to synth with socket ID: {}\", socket_id_str); if let Some(socket_id) = add_synth_user(socket_id_str, true) { pianorhythm_synth::set_client_socket_id(socket_id); log::info!(\"Successfully added client to synth and set client socket ID: {}\", s",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 935,
    "title": "Initialization System",
    "description": "",
    "content": "ocket_id); } else { log::warn!(\"Failed to add client to synth for socket ID: {}\", socket_id_str); } } ` Configuration Options The initialization service supports comprehensive configuration: `typescript interface InitializationConfig { defaultTimeout: number; // 30 seconds default maxRetries: number",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 936,
    "title": "Initialization System",
    "description": "",
    "content": "; // 3 retries default retryDelay: number; // 1 second delay enableLogging: boolean; // Debug logging } ` Testing Strategy Unit Tests Comprehensive test coverage includes: `typescript describe('InitializationService', () => { it('should execute steps in dependency order') it('should prevent executio",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 937,
    "title": "Initialization System",
    "description": "",
    "content": "n of steps with unmet dependencies') it('should retry failed steps up to max retries') it('should fail after max retries exceeded') it('should validate steps when validator is provided') it('should handle timeouts correctly') it('should calculate progress correctly') it('should reset state correctly",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 938,
    "title": "Initialization System",
    "description": "",
    "content": "') it('should identify next ready step correctly') }); ` Test Results: ✅ All 10 tests passing Integration Testing The refactored app loading process should be tested with: Network delays and failures Audio device availability issues WebSocket connection problems WASM loading failures Benefits 1. Eli",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 939,
    "title": "Initialization System",
    "description": "",
    "content": "minates Race Conditions Proper sequencing prevents the original \"Synth engine created but client socket ID not set, yet\" error Guaranteed order of operations eliminates timing-dependent failures 2. Robust Error Handling Retry mechanisms handle transient network and resource failures Timeout protecti",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 940,
    "title": "Initialization System",
    "description": "",
    "content": "on prevents hanging operations Graceful degradation for non-critical failures 3. Better Debugging Comprehensive logging at each step Progress tracking for user feedback Clear error messages with context 4. Maintainable Architecture Clear dependency structure makes it easy to add new initialization s",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 941,
    "title": "Initialization System",
    "description": "",
    "content": "teps Separation of concerns between coordination and execution Type-safe implementation reduces runtime errors 5. Testable Design Each step can be tested independently Mock-friendly architecture for unit testing Deterministic behavior for reliable testing Migration Guide For Developers When adding n",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 29
  },
  {
    "objectID": 942,
    "title": "Initialization System",
    "description": "",
    "content": "ew initialization steps: Define the step in InitializationStep enum Add dependencies in the stepDependencies mapping Implement the executor with proper error handling Add validation if the step has verifiable outcomes Write tests for the new step Example: Adding a New Step `typescript // 1. Add to e",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 30
  },
  {
    "objectID": 943,
    "title": "Initialization System",
    "description": "",
    "content": "num enum InitializationStep { // ... existing steps NewFeature = \"new-feature\" } // 2. Define dependencies const stepDependencies = { // ... existing dependencies [InitializationStep.NewFeature]: [InitializationStep.AudioService] } // 3. Execute the step await initializationService().executeStep(Ini",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 31
  },
  {
    "objectID": 944,
    "title": "Initialization System",
    "description": "",
    "content": "tializationStep.NewFeature, { execute: async () => { // Implementation }, validate: async () => { // Optional validation return true; } }); ` Future Enhancements Potential Improvements Parallel Execution: Allow independent steps to run in parallel while respecting dependencies Step Prioritization: P",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 32
  },
  {
    "objectID": 945,
    "title": "Initialization System",
    "description": "",
    "content": "riority-based execution for critical vs. optional steps Dynamic Dependencies: Runtime dependency resolution based on configuration Rollback Support: Ability to rollback failed steps and retry from a clean state Metrics Collection: Performance metrics and analytics for initialization timing Monitorin",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 33
  },
  {
    "objectID": 946,
    "title": "Initialization System",
    "description": "",
    "content": "g and Observability Consider adding: Performance metrics for each step Error rate tracking User experience analytics A/B testing for initialization optimizations Conclusion The initialization architecture refactoring successfully eliminates race conditions while providing a robust, maintainable foun",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 34
  },
  {
    "objectID": 947,
    "title": "Initialization System",
    "description": "",
    "content": "dation for application startup. The dependency-based approach ensures reliable operation across different environments and network conditions, significantly improving the user experience and developer productivity. The comprehensive testing strategy and clear documentation make this system maintaina",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 35
  },
  {
    "objectID": 948,
    "title": "Initialization System",
    "description": "",
    "content": "ble and extensible for future development needs.",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-system",
    "type": "docs",
    "tags": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions"
    ],
    "keywords": [
      "initialization",
      "dependency-management",
      "state-machine",
      "architecture",
      "services",
      "startup",
      "race-conditions",
      "initialization",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services",
      "architecture"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 36
  },
  {
    "objectID": 949,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "Initialization System Quick Reference Overview The PianoRhythm initialization system prevents race conditions through a dependency-based state machine. This guide provides quick reference for common development tasks. 📖 Full Documentation: See Initialization System for comprehensive technical detai",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 950,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "ls and architecture overview. Quick Start Using the Initialization Service `typescript import { useService } from \"solid-services\"; import InitializationService from \"~/services/initialization.service\"; import { InitializationStep } from \"~/types/initialization.types\"; const initService = useService",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 951,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "(InitializationService); // Execute a step await initService.executeStep(InitializationStep.MyStep, { execute: async () => { // Your initialization logic here }, validate: async () => { // Optional validation return true; } }); // Wait for a step to complete await initService.waitForStep(Initializat",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 952,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "ionStep.ClientLoaded); // Check step status if (initService.isStepCompleted(InitializationStep.AudioService)) { // Step is complete } ` Common Patterns Adding a New Initialization Step Add to enum (src/types/initialization.types.ts): `typescript export enum InitializationStep { // ... existing steps",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 953,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": " MyNewStep = \"my-new-step\" } ` Define dependencies (src/services/initialization.service.ts): `typescript const stepDependencies: Record = { // ... existing dependencies InitializationStep.MyNewStep]: [InitializationStep.AudioService], }; ` Execute in app loading (src/routes/app-loading.tsx): `typesc",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 954,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "ript await initializationService().executeStep(InitializationStep.MyNewStep, { execute: async () => { // Implementation await myService().initialize(); }, validate: async () => { return myService().isReady(); } }); ` Waiting for Dependencies `typescript // Wait for multiple dependencies await Promis",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 955,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "e.all([ initService.waitForStep(InitializationStep.ClientLoaded), initService.waitForStep(InitializationStep.AudioService) ]); // Wait with custom timeout await initService.waitForStep(InitializationStep.CoreWasm, 60000); // 60 seconds ` Error Handling `typescript try { await initService.executeStep",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 956,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "(InitializationStep.MyStep, { execute: async () => { // This might fail await riskyOperation(); } }); } catch (error) { // Handle initialization failure console.error(\"Step failed:\", error); } ` Step Dependencies Reference (Refactored Order) ` UserGesture ├── CoreWasm │ ├── AppState │ │ ├── Websocke",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 957,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "tIdentity │ │ │ ├── WebsocketConnection │ │ │ │ ├── WelcomeEvent │ │ │ │ │ ├── ClientLoaded │ │ │ │ │ │ ├── AudioService ← Audio service first │ │ │ │ │ │ │ ├── SynthEngine │ │ │ │ │ │ │ ├── ClientSocketId │ │ │ │ │ │ │ │ └── ClientAddedToSynth │ │ │ │ │ │ │ │ └── Soundfont ← Soundfont after audio │",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 958,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": " │ │ │ │ │ │ │ ├── AppSettings │ │ │ │ │ │ │ │ │ ├── UsersService │ │ │ │ │ │ │ │ │ │ ├── ChatService │ │ │ │ │ │ │ │ │ │ │ ├── RoomsService │ │ │ │ │ │ │ │ │ │ │ │ ├── MonitorService │ │ │ │ │ │ │ │ │ │ │ │ │ └── Complete ` Critical Steps ClientAddedToSynth Most important step - prevents race condi",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 959,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "tions between synth engine and client socket ID: `typescript await initializationService().executeStep(InitializationStep.ClientAddedToSynth, { execute: async () => { await raceTimeout(until(() => { return appService().clientLoaded() && appService().getSocketID() && audioService().clientAdded(); }),",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 960,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": " DEFAULT_SERVICE_TIMEOUT, true, \"Client never properly added to synth.\"); }, validate: async () => { return appService().clientLoaded() && !!appService().getSocketID() && audioService().clientAdded(); } }); ` Testing Unit Test Template `typescript import { describe, it, expect, beforeEach } from 'vi",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 961,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "test'; import { createRoot } from 'solid-js'; import InitializationService from '~/services/initialization.service'; import { InitializationStep } from '~/types/initialization.types'; describe('MyInitializationStep', () => { let initService: any; beforeEach(() => { createRoot(() => { initService = I",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 962,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "nitializationService(); }); }); it('should execute my step successfully', async () => { const mockExecutor = { execute: vi.fn().mockResolvedValue(undefined) }; await initService.executeStep(InitializationStep.MyStep, mockExecutor); expect(mockExecutor.execute).toHaveBeenCalled(); expect(initService.",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 963,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "isStepCompleted(InitializationStep.MyStep)).toBe(true); }); }); ` Debugging Enable Debug Logging `typescript // In initialization service config const config: InitializationConfig = { enableLogging: true, // Enable detailed logging defaultTimeout: 30000, maxRetries: 3, retryDelay: 1000 }; ` Common D",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 964,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "ebug Scenarios Step hanging: Check timeout configuration and dependencies Race conditions: Verify proper step ordering and dependencies Retry failures: Check error messages and increase retry count if needed Validation failures: Ensure validation logic matches execution results Progress Monitoring `",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 965,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "typescript // Set up progress callback initService.setProgressCallback((step, status, progress) => { console.log(Step ${step}: ${status} (${progress}%)); }); // Set up error callback initService.setErrorCallback((step, error) => { console.error(Step ${step} failed:, error); }); ` Configuration Defau",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 966,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "lt Settings `typescript const config: InitializationConfig = { defaultTimeout: 30000, // 30 seconds maxRetries: 3, // 3 retry attempts retryDelay: 1000, // 1 second between retries enableLogging: true // Debug logging enabled }; ` Custom Timeouts `typescript // Set custom timeout for specific step c",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 967,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "onst state = initService.state(); const stepInfo = state.steps.get(InitializationStep.MyStep); if (stepInfo) { stepInfo.timeout = 60000; // 60 seconds } ` Best Practices Always define dependencies - Never skip dependency declaration Use validation - Add validation for steps with verifiable outcomes ",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 968,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "Handle errors gracefully - Provide meaningful error messages Test thoroughly - Write unit tests for new steps Monitor progress - Use callbacks for user feedback Keep steps atomic - Each step should do one thing well Document dependencies - Explain why dependencies are needed Common Pitfalls Circular",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 969,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": " dependencies - Will cause initialization to hang Missing dependencies - Can cause race conditions Overly long steps - Break down complex operations Insufficient error handling - Always handle potential failures Skipping validation - Can lead to false positive completions Performance Tips Parallel e",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 970,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "xecution - Independent steps can run in parallel Lazy loading - Only initialize what's needed immediately Caching - Cache expensive initialization results Timeouts - Set appropriate timeouts for network operations Progress feedback - Keep users informed during long operations For complete technical ",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 971,
    "title": "Initialization System Quick Reference",
    "description": "",
    "content": "details, see [Technical Documentation.",
    "url": "/docs\\community\\technical-documentation\\core\\initialization-quick-reference",
    "type": "docs",
    "tags": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup"
    ],
    "keywords": [
      "initialization",
      "quick-reference",
      "dependency-management",
      "state-machine",
      "services",
      "startup",
      "initialization",
      "quick reference",
      "dependency",
      "state machine",
      "race conditions",
      "startup",
      "services"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Initialization System Quick Reference",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 972,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "Core Business Logic (pianorhythm_core) The pianorhythm_core is the heart of PianoRhythm, implemented in Rust and compiled to WebAssembly for high-performance audio processing, 3D rendering, and real-time communication. Overview The core engine is structured as a modular Rust workspace with the follo",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 973,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "wing main components: ` pianorhythm_core/ ├── core/ # Main application logic and state management ├── synth/ # Audio synthesis engine ├── bevy_renderer/ # 3D rendering with Bevy Engine ├── shared/ # Shared utilities and types ├── proto/ # Protocol Buffer definitions └── desktop/ # Desktop-specific i",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 974,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "ntegrations ` Core Module Architecture State Management The core uses a Redux-like pattern with reducers for state management: `rust pub struct AppState { pub client_state: ClientState, pub current_room_state: CurrentRoomState, pub rooms_list_state: RoomsState, pub audio_process_state: AudioProcessS",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 975,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "tate, pub app_settings: AppSettings, pub app_environment: AppCommonEnvironment, } ` Key Reducers: AppStateReducer - Main application state coordination ClientStateReducer - User client state management CurrentRoomStateReducer - Active room state RoomsStateReducer - Available rooms list AudioProcessS",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 976,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "tateReducer - Audio processing state WebAssembly Interface `rust #cfg(target_arch = \"wasm32\")] #[wasm_bindgen] pub fn create_synth(options: PianoRhythmSynthesizerDescriptor) -> Result { unsafe { _ = SYNTH.set(PianoRhythmSynthesizer::new( options, Some(Box::new(|event| emit_to_note_buffer_engine(&eve",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 977,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "nt))), Some(Box::new(handle_synth_events)), Some(Box::new(handle_audio_channel_updates)), )); } Ok(()) } ` WASM Exports: init_wasm() - Initialize WASM module create_synth() - Create audio synthesizer send_app_action() - Send actions to core websocket_connect() - WebSocket connection management midi_",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 978,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "io_start() - MIDI device initialization Audio Synthesis Engine Synthesizer Architecture The audio engine is built on a custom synthesizer implementation: `rust pub struct PianoRhythmSynthesizer { synth: oxisynth::Synth, socket_users: HashMap, client_socket_id: Option, soundfont_loaded: bool, // ... ",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 979,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "additional fields } ` Key Features: Multi-user Support: Each connected user has their own audio channel Real-time Processing: Low-latency audio synthesis Effects Processing: Reverb, chorus, and custom effects MIDI Integration: Full MIDI event processing Audio Processing Pipeline `rust impl PianoRhyt",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 980,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "hmSynthesizer { pub fn process(&mut self, output: &mut [f32]) { let mut chunks = output.chunks_exact_mut(2); for chunk in &mut chunks { let (mut l, mut r) = self.read_next(); self.equalize(&mut l); self.equalize(&mut r); chunk[0] = l; chunk[1] = r; } } } ` Processing Steps: Note Generation: MIDI eve",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 981,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "nts converted to audio samples Effects Processing: Apply reverb, chorus, and EQ Mixing: Combine multiple user channels Output: Stereo audio output to Web Audio API Soundfont Management `rust pub fn load_soundfont(&mut self, soundfont_data: &[u8]) -> Result { match self.synth.load_soundfont(soundfont",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 982,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "_data) { Ok(_) => { self.soundfont_loaded = true; Ok(()) } Err(e) => Err(format!(\"Failed to load soundfont: {}\", e)) } } ` Soundfont Features: Dynamic Loading: Runtime soundfont switching Multiple Formats: Support for SF2 and custom formats Fallback System: Default soundfont when loading fails Memor",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 983,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "y Management: Efficient soundfont memory usage 3D Rendering Engine (Bevy) Bevy Integration The 3D renderer uses Bevy Engine for high-performance graphics: `rust pub fn root_app() -> App { let mut app = App::new(); app.add_plugins(DefaultPlugins.set(WindowPlugin { primary_window: Some(Window { canvas",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 984,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": ": Some(\"#bevy-canvas\".to_string()), ..default() }), ..default() })) .add_plugins(CorePlugin) .add_plugins(PianoPlugin) .add_plugins(RoomPlugin); app } ` Rendering Features: WebGPU/WebGL2: Hardware-accelerated rendering ECS Architecture: Entity-Component-System design Real-time Updates: Synchronized ",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 985,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "with audio events Cross-platform: Web and desktop support Component System `rust #[derive(Component, Reflect)] pub struct PianoKey { pub key_id: u8, pub is_pressed: bool, pub velocity: f32, } #[derive(Component, Reflect)] pub struct UserAvatar { pub socket_id: String, pub position: Vec3, pub color: ",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 986,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "Color, } ` Key Components: PianoKey - Individual piano key representation UserAvatar - User representation in 3D space RoomEnvironment - 3D room environment AudioVisualizer - Audio-reactive visual elements Protocol Buffer Communication Message Definitions `protobuf message AppStateActions { AppState",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 987,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "Actions_Action action = 1; AudioSynthActions audioSynthAction = 2; string stringValue = 3; // ... additional fields } message AudioSynthActions { AudioSynthActions_Action action = 1; string socketId = 2; uint32 note = 3; uint32 velocity = 4; // ... additional fields } ` Message Types: AppStateAction",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 988,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "s - Application-level actions AudioSynthActions - Audio synthesis commands AppStateEffects - State change effects AppStateEvents - System events Serialization `rust pub fn send_app_action(&mut self, action: AppStateActions) { let bytes = action.write_to_bytes().unwrap(); self.dispatch_action_bytes(&",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 989,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "bytes); } ` Benefits: Compact Size: Binary serialization for efficiency Type Safety: Strong typing across language boundaries Versioning: Schema evolution support Cross-platform: Consistent serialization MIDI Integration MIDI Event Processing `rust pub trait HandleWebsocketMidiMessage { fn handle_we",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 990,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "bsocket_midi_message(&mut self, data: &[u8]); } impl HandleWebsocketMidiMessage for AppState { fn handle_websocket_midi_message(&mut self, data: &[u8]) { if let Ok(midi_event) = MidiEvent::from_bytes(data) { self.process_midi_event(midi_event); } } } ` MIDI Features: Real-time Processing: Low-latenc",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 991,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "y MIDI event handling Device Management: Multiple MIDI device support Event Filtering: Configurable MIDI event processing WebSocket Integration: MIDI over WebSocket protocol Memory Management Rust Memory Safety `rust // Safe memory management with Rust's ownership system pub struct NoteBufferEngine ",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 992,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "{ buffer: Vec, capacity: usize, } impl NoteBufferEngine { pub fn add_event(&mut self, event: MidiEvent) { if self.buffer.len() std::fmt::Result { match self { CoreError::AudioInitializationFailed(msg) => { write!(f, \"Audio initialization failed: {}\", msg) } // ... other error types } } } ` Error Han",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 993,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "dling Strategy: Typed Errors: Specific error types for different failures Graceful Degradation: Fallback mechanisms for non-critical errors Logging: Comprehensive error logging and reporting Recovery: Automatic recovery from transient failures Performance Optimizations Audio Performance `rust // Opt",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 994,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "imized audio processing with SIMD when available #[cfg(target_feature = \"simd128\")] fn process_audio_simd(input: &[f32], output: &mut [f32]) { // SIMD-optimized audio processing } ` Optimization Techniques: SIMD Instructions: Vectorized audio processing Memory Pools: Pre-allocated memory for audio b",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 995,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "uffers Lock-free Algorithms: Concurrent audio processing Batch Processing: Efficient bulk operations WebAssembly Optimizations `rust // Optimized for WASM compilation #[cfg(target_arch = \"wasm32\")] #[wasm_bindgen] pub struct WasmAudioProcessor { processor: AudioProcessor, } #[cfg(target_arch = \"wasm",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 996,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "32\")] #[wasm_bindgen] impl WasmAudioProcessor { #[wasm_bindgen(constructor)] pub fn new() -> Self { Self { processor: AudioProcessor::new(), } } } ` WASM Features: Size Optimization: Minimal WASM binary size Memory Sharing: Shared memory between JS and WASM Threading: Web Workers for parallel proces",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 997,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "sing Streaming: Streaming WASM compilation Build System Cargo Configuration `toml [package] name = \"pianorhythm_core\" version = \"0.1.0\" edition = \"2021\" [dependencies] wasm-bindgen = \"0.2\" web-sys = \"0.3\" js-sys = \"0.3\" bevy = { version = \"0.16\", features = [\"webgl2\"] } oxisynth = { path = \"./synth/",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 998,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "oxisynth\" } [lib] crate-type = [\"cdylib\"] ` Build Scripts: build-core-release.sh - Release build for web build-bevy-renderer-wasm-webgpu.sh - 3D renderer build build-synth-wasm-release.cmd - Audio synthesizer build Testing Unit Tests `rust #[cfg(test)] mod tests { use super::*; #[test] fn test_synth",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 999,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "esizer_creation() { let options = PianoRhythmSynthesizerDescriptor::default(); let synth = PianoRhythmSynthesizer::new(options, None, None, None); assert!(!synth.has_soundfont_loaded()); } } ` Testing Strategy: Unit Tests: Individual component testing Integration Tests: Cross-component testing Perfo",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 1000,
    "title": "Core Business Logic (pianorhythm_core)",
    "description": "",
    "content": "rmance Tests: Audio latency and throughput WASM Tests: WebAssembly-specific testing Next Steps [Audio System - Detailed audio architecture 3D Rendering - Bevy Engine integration Protocol Buffers - Message serialization and communication Initialization System - Core initialization details",
    "url": "/docs\\community\\technical-documentation\\core\\core-business-logic",
    "type": "docs",
    "tags": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance"
    ],
    "keywords": [
      "core",
      "rust",
      "webassembly",
      "business-logic",
      "audio-processing",
      "3d-rendering",
      "performance",
      "core",
      "rust",
      "webassembly",
      "business logic",
      "audio processing",
      "3d rendering",
      "performance",
      "wasm"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Core Business Logic (pianorhythm_core)",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 1001,
    "title": "Architecture Overview",
    "description": "",
    "content": "Architecture Overview PianoRhythm is a sophisticated multiplayer musical collaboration platform built with a modern, multi-layered architecture designed for real-time performance and scalability. System Architecture Diagram `mermaid graph TB subgraph \"Client Layer\" UISolidJS UI Components] Services[",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 1002,
    "title": "Architecture Overview",
    "description": "",
    "content": "Service Layer] Audio[Audio Service] WS[WebSocket Service] end subgraph \"Core Engine (Rust/WASM)\" Core[pianorhythm_core] Synth[Audio Synthesizer] Renderer[Bevy 3D Renderer] Proto[Protocol Buffers] end subgraph \"Server Layer\" SSR[Vinxi SSR Server] API[REST API Endpoints] WSServer[WebSocket Server] Aut",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 1003,
    "title": "Architecture Overview",
    "description": "",
    "content": "h[Authentication] end subgraph \"Data Layer\" MongoDB[(MongoDB)] Assets[Asset Storage] CDN[CDN/GitHub Pages] end UI --> Services Services --> Audio Services --> WS Audio --> Core WS --> Core Core --> Synth Core --> Renderer Core --> Proto WS --> WSServer Services --> API API --> SSR SSR --> MongoDB AP",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 1004,
    "title": "Architecture Overview",
    "description": "",
    "content": "I --> Auth Auth --> MongoDB CDN --> Assets SSR --> CDN ` Core Components 1. Frontend Layer (SolidJS) Technology Stack: Framework: SolidJS with Server-Side Rendering Language: TypeScript UI Library: Hope UI (custom fork) State Management: Solid Services + Immer Build System: Vinxi Key Responsibilitie",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 1005,
    "title": "Architecture Overview",
    "description": "",
    "content": "s: User interface rendering and interaction Real-time state management Service orchestration Audio visualization 3D scene management 2. Core Engine (Rust/WebAssembly) Technology Stack: Language: Rust (Nightly toolchain) Integration: WebAssembly with wasm-bindgen Serialization: Protocol Buffers 3D En",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 1006,
    "title": "Architecture Overview",
    "description": "",
    "content": "gine: Bevy Engine 0.16 Key Responsibilities: High-performance audio synthesis 3D rendering (WebGPU/WebGL2) MIDI processing Real-time audio effects Cross-platform compatibility 3. Server Layer Technology Stack: Runtime: Bun (production), Node.js (development) Framework: Vinxi with custom presets WebS",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 1007,
    "title": "Architecture Overview",
    "description": "",
    "content": "ocket: crossws adapter Database: MongoDB with Data API Key Responsibilities: Server-side rendering API endpoint management Real-time communication User authentication Room management 4. Data Layer Technology Stack: Database: MongoDB Atlas Assets: GitHub Pages / CDN Authentication: OAuth (Discord, Gi",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 1008,
    "title": "Architecture Overview",
    "description": "",
    "content": "tHub) + JWT Key Responsibilities: User data persistence Room state management Asset delivery Session management Communication Patterns 1. Frontend ↔ Core Engine `typescript // Service Layer communicates with Rust core via WASM const coreService = appService().coreService(); coreService?.send_app_act",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 1009,
    "title": "Architecture Overview",
    "description": "",
    "content": "ion(action); // Core engine emits events back to frontend window.addEventListener(\"app_events\", (event) => { handleCoreEvent(event.detail); }); ` 2. Client ↔ Server `typescript // WebSocket for real-time communication websocketService().connect(wsIdentity); websocketService().emitServerCommand([\"Joi",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 1010,
    "title": "Architecture Overview",
    "description": "",
    "content": "nRoom\", roomName]); // REST API for data operations const response = await fetch(\"/api/v1/rooms\", { method: \"POST\", body: JSON.stringify(roomData) }); ` 3. Protocol Buffer Serialization `typescript // Efficient binary serialization for real-time data const action = AppStateActions.create({ action: A",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 1011,
    "title": "Architecture Overview",
    "description": "",
    "content": "ppStateActions_Action.SynthAction, audioSynthAction: AudioSynthActions.create({ action: AudioSynthActions_Action.NoteOn, // ... note data }) }); ` Key Architectural Patterns 1. Service-Oriented Architecture The frontend uses a service layer pattern with dependency injection: `typescript // Services ",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 1012,
    "title": "Architecture Overview",
    "description": "",
    "content": "are registered and injected via solid-services const appService = useService(AppService); const audioService = useService(AudioService); const websocketService = useService(WebsocketService); ` 2. Event-Driven Communication `typescript // Event buses for loose coupling const appStateEvents = createE",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 1013,
    "title": "Architecture Overview",
    "description": "",
    "content": "ventBus(); appStateEvents.emit(AppStateEvents.UserJoined); ` 3. Dependency-Based Initialization `typescript // Robust initialization system prevents race conditions await initializationService().executeStep(InitializationStep.AudioService, { execute: async () => { await audioService().initialize(); ",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 1014,
    "title": "Architecture Overview",
    "description": "",
    "content": "} }); ` 4. Reactive State Management `typescript // SolidJS reactive primitives with Immer for immutability const [users, setUsers] = createImmerSignal([]); setUsers(users => { users.push(newUser); }); ` Performance Considerations 1. WebAssembly Optimization Rust Core: High-performance audio process",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 1015,
    "title": "Architecture Overview",
    "description": "",
    "content": "ing in Rust compiled to WASM Memory Management: Shared memory between JS and WASM for audio buffers Threading: Web Workers for non-blocking WASM operations 2. Real-time Audio Low Latency: Sub-100ms audio synchronization Buffer Management: Efficient audio buffer handling Audio Worklets: Dedicated aud",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 1016,
    "title": "Architecture Overview",
    "description": "",
    "content": "io processing thread 3. 3D Rendering Bevy Engine: ECS-based 3D rendering WebGPU/WebGL2: Hardware-accelerated graphics LOD System: Level-of-detail for performance scaling 4. Network Optimization Protocol Buffers: Compact binary serialization WebSocket: Persistent connections for real-time data CDN: A",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 1017,
    "title": "Architecture Overview",
    "description": "",
    "content": "sset delivery optimization Scalability Features 1. Horizontal Scaling Stateless Services: Server components designed for horizontal scaling Load Balancing: Multiple server instances behind load balancer Database Sharding: MongoDB sharding for data distribution 2. Caching Strategy Client-Side: Servic",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 1018,
    "title": "Architecture Overview",
    "description": "",
    "content": "e worker caching for assets CDN: Global content delivery network Database: MongoDB query optimization and indexing 3. Resource Management Memory Pools: Efficient memory allocation in Rust core Connection Pooling: Database connection management Asset Bundling: Optimized asset delivery Security Archit",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 1019,
    "title": "Architecture Overview",
    "description": "",
    "content": "ecture 1. Authentication & Authorization OAuth Integration: Discord and GitHub OAuth providers JWT Tokens: Secure session management Role-Based Access: User permissions and roles 2. Data Protection Input Validation: Comprehensive input sanitization CORS Configuration: Cross-origin resource sharing C",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 1020,
    "title": "Architecture Overview",
    "description": "",
    "content": "ontent Security Policy: XSS protection 3. Real-time Security WebSocket Authentication: Secure WebSocket connections Rate Limiting: Protection against abuse Message Validation: Protocol buffer validation Cross-Platform Support 1. Web Application Primary Platform: Progressive Web App Browser Support: ",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 1021,
    "title": "Architecture Overview",
    "description": "",
    "content": "Modern browsers with WebAssembly Mobile Responsive: Touch-optimized interface 2. Desktop Application Tauri Framework: Native desktop wrapper Platform Integration: OS-specific features Performance: Native performance benefits 3. Environment Detection `typescript // Adaptive features based on platform",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 1022,
    "title": "Architecture Overview",
    "description": "",
    "content": " const COMMON = { IS_WEB_APP: !IS_DESKTOP_APP, IS_DESKTOP_APP: self[\"TAURI\"] != null, IS_MOBILE: /android|ios/.test(navigator.userAgent) }; ` Next Steps [Frontend Architecture - Detailed SolidJS structure Core Business Logic - Rust engine deep dive Development Setup - Getting started guide",
    "url": "/docs\\community\\technical-documentation\\core\\architecture-overview",
    "type": "docs",
    "tags": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly"
    ],
    "keywords": [
      "architecture",
      "system-design",
      "core",
      "overview",
      "solidjs",
      "rust",
      "webassembly",
      "architecture",
      "system design",
      "components",
      "solidjs",
      "rust",
      "webassembly",
      "real-time",
      "multiplayer"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Architecture Overview",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 1023,
    "title": "WebSocket Communication",
    "description": "",
    "content": "WebSocket Communication PianoRhythm's real-time communication system is built on WebSockets, enabling low-latency musical collaboration, chat messaging, and synchronized room state management across multiple users. Architecture Overview `mermaid graph TB subgraph \"Client Side\" WS_CLIENTWebSocket Cli",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 1024,
    "title": "WebSocket Communication",
    "description": "",
    "content": "ent] WS_SERVICE[WebSocket Service] PROTO_CLIENT[Protocol Buffers] EVENT_BUS[Event Bus] end subgraph \"Server Side\" WS_SERVER[WebSocket Server] ROOM_MGR[Room Manager] USER_MGR[User Manager] PROTO_SERVER[Protocol Buffers] end subgraph \"Message Flow\" MIDI[MIDI Events] CHAT[Chat Messages] STATE[State Upd",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 1025,
    "title": "WebSocket Communication",
    "description": "",
    "content": "ates] PRESENCE[User Presence] end WS_CLIENT WS_SERVER WS_SERVICE --> PROTO_CLIENT WS_SERVER --> PROTO_SERVER PROTO_CLIENT MIDI PROTO_CLIENT CHAT PROTO_CLIENT STATE PROTO_CLIENT PRESENCE WS_SERVICE --> EVENT_BUS WS_SERVER --> ROOM_MGR WS_SERVER --> USER_MGR ` Client-Side WebSocket Implementation 1. W",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 1026,
    "title": "WebSocket Communication",
    "description": "",
    "content": "ebSocket Service (src/services/websocket.service.ts) The main service that manages WebSocket connections and message handling: `typescript export default function WebsocketService() { const [connected, setConnected] = createSignal(false); const [initialized, setInitialized] = createSignal(false); co",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 1027,
    "title": "WebSocket Communication",
    "description": "",
    "content": "nst [connectionAttempts, setConnectionAttempts] = createSignal(0); const websocketEvents = createEventBus(); const connect = async (wsIdentity: string) => { try { const apiServer = await getApiServerHost(); const webSocketURL = ${apiServer.replace(\"http\", \"ws\")}/api/websocket; console.log([Websocket",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 1028,
    "title": "WebSocket Communication",
    "description": "",
    "content": "Service] Connecting to: ${webSocketURL}/${wsIdentity}); await appService().coreService()?.websocket_connect( ${webSocketURL}/${wsIdentity}, onConnect, onError, onClose ); } catch (error) { console.error(\"[WebsocketService] Connection failed:\", error); throw error; } }; const onConnect = () => { cons",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 1029,
    "title": "WebSocket Communication",
    "description": "",
    "content": "ole.log(\"[WebsocketService] Connected successfully\"); setConnected(true); setConnectionAttempts(0); websocketEvents.emit(\"connected\"); }; const onError = (error: string) => { console.error(\"[WebsocketService] Error:\", error); websocketEvents.emit(\"error\", error); // Implement exponential backoff for",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 1030,
    "title": "WebSocket Communication",
    "description": "",
    "content": " reconnection const attempts = connectionAttempts(); if (attempts { setConnectionAttempts(attempts + 1); // Retry connection logic }, delay); } }; const onClose = () => { console.log(\"[WebsocketService] Connection closed\"); setConnected(false); websocketEvents.emit(\"closed\"); }; return { connected, ",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 1031,
    "title": "WebSocket Communication",
    "description": "",
    "content": "initialized, connect, disconnect, emitServerCommand, emitChatMessage, websocketEvents }; } ` 2. Message Serialization Protocol Buffers are used for efficient binary message serialization: `typescript // Sending server commands const emitServerCommand = (command: ServerCommand) => { const serverComma",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 1032,
    "title": "WebSocket Communication",
    "description": "",
    "content": "ndAction = ServerCommandActions.create({ action: ServerCommandActions_Action.ServerCommand, serverCommand: command }); const appAction = AppStateActions.create({ action: AppStateActions_Action.ServerCommandAction, serverCommandAction: serverCommandAction }); const bytes = AppStateActions.encode(appA",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 1033,
    "title": "WebSocket Communication",
    "description": "",
    "content": "ction).finish(); appService().coreService()?.websocket_send_binary(bytes); }; // Sending chat messages const emitChatMessage = (content: string, roomId: string) => { const chatAction = ChatActions.create({ action: ChatActions_Action.SendMessage, content: content, roomId: roomId, timestamp: Date.now(",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 1034,
    "title": "WebSocket Communication",
    "description": "",
    "content": ") }); const appAction = AppStateActions.create({ action: AppStateActions_Action.ChatAction, chatAction: chatAction }); const bytes = AppStateActions.encode(appAction).finish(); appService().coreService()?.websocket_send_binary(bytes); }; ` 3. Message Handling Incoming messages are processed through ",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 1035,
    "title": "WebSocket Communication",
    "description": "",
    "content": "the core engine and dispatched to appropriate services: `typescript // Core engine message handler (Rust) #[wasm_bindgen] pub fn handle_websocket_message(data: &[u8]) { if let Ok(action) = AppStateActions::decode(data) { match action.action() { AppStateActions_Action::ChatAction => { handle_chat_act",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 1036,
    "title": "WebSocket Communication",
    "description": "",
    "content": "ion(action.get_chatAction()); } AppStateActions_Action::UserAction => { handle_user_action(action.get_userAction()); } AppStateActions_Action::RoomAction => { handle_room_action(action.get_roomAction()); } AppStateActions_Action::SynthAction => { handle_synth_action(action.get_audioSynthAction()); }",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 1037,
    "title": "WebSocket Communication",
    "description": "",
    "content": " _ => { log::warn!(\"Unknown action type: {:?}\", action.action()); } } } } ` Server-Side WebSocket Implementation 1. WebSocket Server Setup `typescript // Server WebSocket handler import { createCrossWS } from 'crossws'; const websocket = createCrossWS({ hooks: { open(peer) { console.log([WebSocket] ",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 1038,
    "title": "WebSocket Communication",
    "description": "",
    "content": "Client connected: ${peer.id}); // Initialize user session const userSession = { peerId: peer.id, userId: null, roomId: null, lastActivity: Date.now() }; userSessions.set(peer.id, userSession); }, message(peer, message) { try { const data = new Uint8Array(message.rawData()); handleWebSocketMessage(pe",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 1039,
    "title": "WebSocket Communication",
    "description": "",
    "content": "er, data); } catch (error) { console.error([WebSocket] Message handling error:, error); peer.send(JSON.stringify({ type: 'error', message: 'Invalid message format' })); } }, close(peer, details) { console.log([WebSocket] Client disconnected: ${peer.id}); handleUserDisconnect(peer.id); }, error(peer,",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 1040,
    "title": "WebSocket Communication",
    "description": "",
    "content": " error) { console.error([WebSocket] Error for peer ${peer.id}:, error); } } }); ` 2. Message Routing `typescript // Server-side message routing const handleWebSocketMessage = async (peer: Peer, data: Uint8Array) => { try { const action = AppStateActions.decode(data); switch (action.action) { case Ap",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 1041,
    "title": "WebSocket Communication",
    "description": "",
    "content": "pStateActions_Action.ServerCommandAction: await handleServerCommand(peer, action.serverCommandAction); break; case AppStateActions_Action.ChatAction: await handleChatAction(peer, action.chatAction); break; case AppStateActions_Action.SynthAction: await handleSynthAction(peer, action.audioSynthAction",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 1042,
    "title": "WebSocket Communication",
    "description": "",
    "content": "); break; case AppStateActions_Action.UserAction: await handleUserAction(peer, action.userAction); break; default: console.warn(Unknown action type: ${action.action}); } } catch (error) { console.error('Message processing error:', error); sendErrorMessage(peer, 'Failed to process message'); } }; ` 3",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 1043,
    "title": "WebSocket Communication",
    "description": "",
    "content": ". Room Management `typescript // Room-based message broadcasting class RoomManager { private rooms = new Map>(); private userRooms = new Map(); joinRoom(peerId: string, roomId: string): boolean { // Leave current room if any this.leaveCurrentRoom(peerId); // Join new room if (!this.rooms.has(roomId)",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 1044,
    "title": "WebSocket Communication",
    "description": "",
    "content": ") { this.rooms.set(roomId, new Set()); } this.rooms.get(roomId)!.add(peerId); this.userRooms.set(peerId, roomId); // Broadcast user joined to room this.broadcastToRoom(roomId, { type: 'user-joined', userId: peerId, timestamp: Date.now() }, peerId); return true; } leaveRoom(peerId: string, roomId: st",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 1045,
    "title": "WebSocket Communication",
    "description": "",
    "content": "ring): void { const room = this.rooms.get(roomId); if (room) { room.delete(peerId); // Clean up empty rooms if (room.size === 0) { this.rooms.delete(roomId); } else { // Broadcast user left this.broadcastToRoom(roomId, { type: 'user-left', userId: peerId, timestamp: Date.now() }); } } this.userRooms",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 1046,
    "title": "WebSocket Communication",
    "description": "",
    "content": ".delete(peerId); } broadcastToRoom(roomId: string, message: any, excludePeer?: string): void { const room = this.rooms.get(roomId); if (!room) return; const messageBytes = this.serializeMessage(message); for (const peerId of room) { if (peerId !== excludePeer) { const peer = peers.get(peerId); if (p",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 1047,
    "title": "WebSocket Communication",
    "description": "",
    "content": "eer && peer.readyState === 1) { peer.send(messageBytes); } } } } } ` Real-Time Features 1. MIDI Event Synchronization `typescript // Real-time MIDI event handling const handleSynthAction = async (peer: Peer, synthAction: AudioSynthActions) => { const session = userSessions.get(peer.id); if (!session",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 1048,
    "title": "WebSocket Communication",
    "description": "",
    "content": " || !session.roomId) return; switch (synthAction.action) { case AudioSynthActions_Action.NoteOn: // Broadcast note event to room roomManager.broadcastToRoom(session.roomId, { type: 'midi-event', event: 'note-on', note: synthAction.note, velocity: synthAction.velocity, userId: session.userId, timesta",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 1049,
    "title": "WebSocket Communication",
    "description": "",
    "content": "mp: Date.now() }, peer.id); break; case AudioSynthActions_Action.NoteOff: roomManager.broadcastToRoom(session.roomId, { type: 'midi-event', event: 'note-off', note: synthAction.note, userId: session.userId, timestamp: Date.now() }, peer.id); break; } }; ` 2. Chat System `typescript // Real-time chat",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 1050,
    "title": "WebSocket Communication",
    "description": "",
    "content": " messaging const handleChatAction = async (peer: Peer, chatAction: ChatActions) => { const session = userSessions.get(peer.id); if (!session || !session.roomId) return; switch (chatAction.action) { case ChatActions_Action.SendMessage: // Validate message if (!chatAction.content || chatAction.content",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 1051,
    "title": "WebSocket Communication",
    "description": "",
    "content": ".length > 500) { sendErrorMessage(peer, 'Invalid message content'); return; } // Store message in database const messageId = await chatService.saveMessage({ content: chatAction.content, roomId: session.roomId, userId: session.userId, timestamp: Date.now() }); // Broadcast to room roomManager.broadca",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 1052,
    "title": "WebSocket Communication",
    "description": "",
    "content": "stToRoom(session.roomId, { type: 'chat-message', id: messageId, content: chatAction.content, userId: session.userId, timestamp: Date.now() }); break; case ChatActions_Action.TypingStart: roomManager.broadcastToRoom(session.roomId, { type: 'user-typing', userId: session.userId, isTyping: true }, peer",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 29
  },
  {
    "objectID": 1053,
    "title": "WebSocket Communication",
    "description": "",
    "content": ".id); break; case ChatActions_Action.TypingStop: roomManager.broadcastToRoom(session.roomId, { type: 'user-typing', userId: session.userId, isTyping: false }, peer.id); break; } }; ` 3. User Presence `typescript // User presence management const handleUserAction = async (peer: Peer, userAction: User",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 30
  },
  {
    "objectID": 1054,
    "title": "WebSocket Communication",
    "description": "",
    "content": "Actions) => { const session = userSessions.get(peer.id); if (!session) return; switch (userAction.action) { case UserActions_Action.UpdateStatus: // Update user status await userService.updateUserStatus(session.userId, userAction.status); // Broadcast status change to room if (session.roomId) { room",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 31
  },
  {
    "objectID": 1055,
    "title": "WebSocket Communication",
    "description": "",
    "content": "Manager.broadcastToRoom(session.roomId, { type: 'user-status-changed', userId: session.userId, status: userAction.status, timestamp: Date.now() }); } break; case UserActions_Action.UpdatePosition: // Update user position in 3D space if (session.roomId) { roomManager.broadcastToRoom(session.roomId, {",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 32
  },
  {
    "objectID": 1056,
    "title": "WebSocket Communication",
    "description": "",
    "content": " type: 'user-position-changed', userId: session.userId, position: { x: userAction.positionX, y: userAction.positionY, z: userAction.positionZ }, timestamp: Date.now() }, peer.id); } break; } }; ` Connection Management 1. Connection Health Monitoring `typescript // Heartbeat system for connection hea",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 33
  },
  {
    "objectID": 1057,
    "title": "WebSocket Communication",
    "description": "",
    "content": "lth class ConnectionHealthMonitor { private heartbeatInterval = 30000; // 30 seconds private timeoutThreshold = 60000; // 60 seconds startMonitoring(): void { setInterval(() => { this.checkConnections(); }, this.heartbeatInterval); } checkConnections(): void { const now = Date.now(); for (const [pee",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 34
  },
  {
    "objectID": 1058,
    "title": "WebSocket Communication",
    "description": "",
    "content": "rId, session] of userSessions) { const timeSinceLastActivity = now - session.lastActivity; if (timeSinceLastActivity > this.timeoutThreshold) { console.log([WebSocket] Timeout detected for peer: ${peerId}); this.handleTimeout(peerId); } else if (timeSinceLastActivity > this.heartbeatInterval) { // S",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 35
  },
  {
    "objectID": 1059,
    "title": "WebSocket Communication",
    "description": "",
    "content": "end ping const peer = peers.get(peerId); if (peer) { peer.ping(); } } } } handleTimeout(peerId: string): void { const peer = peers.get(peerId); if (peer) { peer.close(); } this.cleanupSession(peerId); } } ` 2. Reconnection Logic `typescript // Client-side reconnection handling const handleReconnecti",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 36
  },
  {
    "objectID": 1060,
    "title": "WebSocket Communication",
    "description": "",
    "content": "on = async () => { let attempts = 0; const maxAttempts = 5; while (attempts setTimeout(resolve, delay)); await connect(lastUsedIdentity); console.log('[WebSocket] Reconnection successful'); break; } catch (error) { attempts++; console.error([WebSocket] Reconnection attempt ${attempts} failed:, error",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 37
  },
  {
    "objectID": 1061,
    "title": "WebSocket Communication",
    "description": "",
    "content": "); if (attempts >= maxAttempts) { console.error('[WebSocket] Max reconnection attempts reached'); // Show user notification about connection failure showConnectionFailureNotification(); } } } }; ` Performance Optimization 1. Message Batching `typescript // Batch multiple messages for efficiency clas",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 38
  },
  {
    "objectID": 1062,
    "title": "WebSocket Communication",
    "description": "",
    "content": "s MessageBatcher { private batch: Uint8Array[] = []; private batchTimeout: number | null = null; private maxBatchSize = 10; private batchDelay = 16; // ~60fps addMessage(message: Uint8Array): void { this.batch.push(message); if (this.batch.length >= this.maxBatchSize) { this.flushBatch(); } else if ",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 39
  },
  {
    "objectID": 1063,
    "title": "WebSocket Communication",
    "description": "",
    "content": "(!this.batchTimeout) { this.batchTimeout = setTimeout(() => { this.flushBatch(); }, this.batchDelay); } } flushBatch(): void { if (this.batch.length === 0) return; // Create batched message const batchedMessage = this.createBatchedMessage(this.batch); // Send batched message this.sendMessage(batched",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 40
  },
  {
    "objectID": 1064,
    "title": "WebSocket Communication",
    "description": "",
    "content": "Message); // Clear batch this.batch = []; if (this.batchTimeout) { clearTimeout(this.batchTimeout); this.batchTimeout = null; } } } ` 2. Message Compression `typescript // Optional message compression for large payloads import { compress, decompress } from 'lz4js'; const sendCompressedMessage = (mes",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 41
  },
  {
    "objectID": 1065,
    "title": "WebSocket Communication",
    "description": "",
    "content": "sage: Uint8Array): void => { if (message.length > COMPRESSION_THRESHOLD) { const compressed = compress(message); const header = new Uint8Array([1]); // Compression flag const fullMessage = new Uint8Array(header.length + compressed.length); fullMessage.set(header); fullMessage.set(compressed, header.",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 42
  },
  {
    "objectID": 1066,
    "title": "WebSocket Communication",
    "description": "",
    "content": "length); websocket.send(fullMessage); } else { const header = new Uint8Array([0]); // No compression const fullMessage = new Uint8Array(header.length + message.length); fullMessage.set(header); fullMessage.set(message, header.length); websocket.send(fullMessage); } }; ` Security Considerations 1. Me",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 43
  },
  {
    "objectID": 1067,
    "title": "WebSocket Communication",
    "description": "",
    "content": "ssage Validation `typescript // Server-side message validation const validateMessage = (action: AppStateActions, peer: Peer): boolean => { const session = userSessions.get(peer.id); // Check authentication if (!session || !session.userId) { sendErrorMessage(peer, 'Authentication required'); return f",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 44
  },
  {
    "objectID": 1068,
    "title": "WebSocket Communication",
    "description": "",
    "content": "alse; } // Rate limiting if (isRateLimited(peer.id)) { sendErrorMessage(peer, 'Rate limit exceeded'); return false; } // Message size validation if (action.toBuffer().length > MAX_MESSAGE_SIZE) { sendErrorMessage(peer, 'Message too large'); return false; } return true; }; ` 2. Rate Limiting `typescr",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 45
  },
  {
    "objectID": 1069,
    "title": "WebSocket Communication",
    "description": "",
    "content": "ipt // Rate limiting implementation class RateLimiter { private requests = new Map(); private maxRequests = 100; // per minute private windowMs = 60000; isAllowed(peerId: string): boolean { const now = Date.now(); const requests = this.requests.get(peerId) || []; // Remove old requests outside the w",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 46
  },
  {
    "objectID": 1070,
    "title": "WebSocket Communication",
    "description": "",
    "content": "indow const validRequests = requests.filter(time => now - time = this.maxRequests) { return false; } validRequests.push(now); this.requests.set(peerId, validRequests); return true; } } ` Next Steps [Backend Services - Server architecture and APIs Audio System - Real-time audio synchronization Testin",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 47
  },
  {
    "objectID": 1071,
    "title": "WebSocket Communication",
    "description": "",
    "content": "g Guide - WebSocket testing strategies",
    "url": "/docs\\community\\technical-documentation\\backend\\websocket-communication",
    "type": "docs",
    "tags": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "keywords": [
      "websocket",
      "real-time",
      "communication",
      "networking",
      "collaboration",
      "messaging",
      "synchronization",
      "websocket",
      "real-time",
      "communication",
      "low-latency",
      "collaboration",
      "messaging",
      "synchronization"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "WebSocket Communication",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 48
  },
  {
    "objectID": 1072,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "Server-Side Rendering (SSR) Implementation PianoRhythm uses a sophisticated SSR setup built on SolidJS Start and Vinxi, providing fast initial page loads, SEO optimization, and seamless client-side hydration for a real-time musical collaboration platform. Architecture Overview `mermaid graph TB subg",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 1073,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "raph \"Build System\" VVinxi] VP[Vinxi Presets] VC[Vite Config] end subgraph \"Server Runtime\" SS[SolidJS Start] N[Nitro Server] MW[Middleware] end subgraph \"Rendering Pipeline\" SSR[Server Rendering] H[Hydration] CSR[Client Rendering] end subgraph \"Deployment\" GH[GitHub Pages] ST[Static Generation] CDN",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 1074,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "[CDN Delivery] end V --> VP VP --> VC VC --> SS SS --> N N --> MW MW --> SSR SSR --> H H --> CSR SSR --> ST ST --> GH GH --> CDN ` Core Components 1. Vinxi Configuration (app.config.ts) The main build configuration that orchestrates the entire SSR setup: `typescript export default defineConfig({ ser",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 1075,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "ver: { preset: \"./preset\", minify: false, sourceMap: true, routeRules: { \"/\": { prerender: isProduction }, \"/*\": { cors: true, headers: { \"Cross-Origin-Opener-Policy\": \"same-origin\", \"Cross-Origin-Embedder-Policy\": \"require-corp\", \"Cross-Origin-Resource-Policy\": \"cross-origin\", \"x-pianorhythm-client",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 1076,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "-version\": APP_VERSION ?? \"0.0.0\" } } }, prerender: { crawlLinks: isProduction } }, middleware: \"./src/server/middleware\", vite: { // Vite configuration for SSR ssr: { noExternal: [ \"@hope-ui/solid\", \"solid-dismiss\" ] }, // ... additional config } }); ` Key Features: Environment-specific builds: Dif",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 1077,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "ferent configurations for development, staging, and production Prerendering: Static generation for production builds CORS headers: Required for WebAssembly and audio worklets Custom presets: Tailored build configurations 2. Custom Preset (preset/nitro.config.ts) Nitro server configuration for differ",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 1078,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "ent deployment targets: `typescript import { defineNitroConfig } from \"nitropack/config\"; export default defineNitroConfig({ compatibilityDate: \"2025-02-05\", // GitHub Pages deployment preset: process.env.NODE_ENV === \"production\" ? \"github-pages\" : \"node-server\", // Static site generation prerender",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 1079,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": ": { routes: [\"/\", \"/login\"], crawlLinks: true }, // Server middleware serverHandlers: [ { route: \"/api/**\", handler: \"~/server/api/index.ts\" } ], // Build optimizations minify: process.env.NODE_ENV === \"production\", sourceMap: process.env.NODE_ENV !== \"production\", // Runtime configuration runtimeCo",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 1080,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "nfig: { public: { clientVersion: process.env.PR_CLIENT_VERSION, assetsUrl: process.env.PR_ASSETS_URL } } }); ` 3. Server Entry Point (src/entry-server.tsx) The server-side rendering entry point: `typescript import { createHandler, StartServer } from \"@solidjs/start/server\"; import dns from 'node:dns",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 1081,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "'; import { COMMON } from \"./util/const.common\"; import { Database } from \"./lib/db/db-store\"; // Optimize DNS resolution for server environments dns.setDefaultResultOrder('ipv4first'); console.log(\"🚀 Starting server with env:\", process.env.BUILD_ENV ?? process.env.NODE_ENV); console.log(\"✔ API Ser",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 1082,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "ver:\", process.env.PIANORHYTHM_SERVER_URL); console.log(\"✔ Assets Server:\", process.env.PR_ASSETS_URL); console.log(\"✔ Client Version:\", process.env.PR_CLIENT_VERSION); // Initialize database connection Database.getInstance().init(); export default createHandler(() => ( ( {assets} {children} {script",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 1083,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "s} )} /> )); ` 4. Client Entry Point (src/entry-client.tsx) The client-side hydration entry point: `typescript import { mount, StartClient } from \"@solidjs/start/client\"; // Mount the application for client-side hydration mount(() => , document.getElementById(\"app\")!); ` Rendering Pipeline 1. Server",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 1084,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "-Side Rendering Process `mermaid sequenceDiagram participant Browser participant Server participant Database participant Assets Browser->>Server: Request page Server->>Database: Fetch initial data Database-->>Server: Return data Server->>Server: Render SolidJS components Server->>Assets: Fetch requi",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 1085,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "red assets Assets-->>Server: Return assets Server-->>Browser: HTML + initial state Browser->>Browser: Hydrate components Browser->>Server: Fetch additional data ` 2. Route-Level Data Loading `typescript // Route with server-side data loading export const route = { async preload(props) { // Server-si",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 1086,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "de data loading if (props.intent == \"initial\") { await onSessionRestore(); } else { await getMemberSessionInfo(); } } } satisfies RouteDefinition; export default function AppLoading(): JSX.Element { // Component receives preloaded data const navigate = useNavigate(); const [searchParams] = useSearch",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 1087,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "Params(); return ; } ` 3. Progressive Enhancement `typescript // Components that work with and without JavaScript const InteractiveButton = () => { const [clicked, setClicked] = createSignal(false); return ( setClicked(true)} class={clicked() ? \"clicked\" : \"\"} > {clicked() ? \"Clicked!\" : \"Click me\"}",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 1088,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": " ); }; ` Static Site Generation 1. Prerendering Configuration `typescript // Route rules for static generation const routeRules = { \"/\": { prerender: true }, \"/login\": { prerender: true }, \"/room/*\": { prerender: false }, // Dynamic routes \"/api/*\": { prerender: false } // API routes }; ` 2. Build-T",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 1089,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "ime Data Fetching `typescript // Static data fetching during build export const getStaticData = async () => { const rooms = await fetchPublicRooms(); const stats = await fetchSiteStatistics(); return { rooms, stats, generatedAt: new Date().toISOString() }; }; ` 3. Asset Optimization `typescript // V",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 1090,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "ite configuration for asset optimization const viteConfig = { build: { rollupOptions: { output: { manualChunks: { vendor: ['solid-js', '@solidjs/router'], audio: ['@core/pkg'], ui: ['@hope-ui/solid'] } } } } }; ` Server Middleware 1. Custom Middleware (src/server/middleware.ts) `typescript import { ",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 1091,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "createMiddleware } from \"@solidjs/start/middleware\"; import { setResponseHeader } from \"vinxi/http\"; export default createMiddleware({ onRequest: [ _event => { // Request processing } ], onBeforeResponse: [ _event => { // Set security headers required for WebAssembly setResponseHeader(\"Cross-Origin-",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 1092,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "Embedder-Policy\", \"require-corp\"); setResponseHeader(\"Cross-Origin-Opener-Policy\", \"same-origin\"); setResponseHeader(\"Cross-Origin-Resource-Policy\", \"cross-origin\"); } ] }); ` 2. API Route Handling `typescript // API route example export const POST = (event: APIEvent) => POST_API(event, { schema: In",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 1093,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "putSchema, process: async (input) => { const dbService = SheetMusicDBService.getInstance(); const result = await dbService.aggregateData([ { $match: { uuid: input.sheetMusicID } } ]); return result; } }); ` 3. Session Management `typescript // Server-side session handling export async function getSe",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 1094,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "ssion() { \"use server\"; return getRequestEvent()!.locals.session || { data: { accessToken: undefined, refreshToken: undefined } }; } export async function getMemberSessionInfo() { \"use server\"; const session = await getSession(); try { UserSessionHelper.validateTokens(session.data); return session.d",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 1095,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "ata; } catch { // Handle invalid session return null; } } ` Environment Configuration 1. Environment Variables `typescript // Server environment configuration const envVariables = z.object({ DEBUG: z.string().default(\"false\"), NODE_ENV: z.string().default(\"dev\"), PR_CLIENT_VERSION: z.string().defaul",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 1096,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "t(\"0.0.0\"), PR_ASSETS_URL: z.string().default(\"https://assets.pianorhythm.io\"), PIANORHYTHM_MONGODB_URI: z.string().default(\"mongodb://localhost:27017\"), PIANORHYTHM_SERVER_URL: z.string().default(\"http://localhost:7000\"), // ... additional environment variables }); ` 2. Runtime Configuration `types",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 1097,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "cript // Runtime configuration based on environment const getRuntimeConfig = () => { const env = process.env.NODE_ENV; return { development: { apiUrl: \"http://localhost:7000\", assetsUrl: \"http://localhost:3000\", debug: true }, staging: { apiUrl: \"https://staging-api.pianorhythm.io\", assetsUrl: \"http",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 1098,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "s://staging-assets.pianorhythm.io\", debug: true }, production: { apiUrl: \"https://api.pianorhythm.io\", assetsUrl: \"https://assets.pianorhythm.io\", debug: false } }[env] || {}; }; ` Performance Optimizations 1. Code Splitting `typescript // Automatic code splitting with lazy loading const PianoRender",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 1099,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "er = lazy(() => import('~/components/piano-renderer')); const AudioVisualizer = lazy(() => import('~/components/audio-visualizer')); const RoomComponent = () => { return ( }> ); }; ` 2. Resource Preloading `typescript // Preload critical resources const preloadCriticalResources = () => { // Preload ",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 1100,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "WASM modules const wasmLink = document.createElement('link'); wasmLink.rel = 'preload'; wasmLink.href = '/pianorhythm_core/pkg/pianorhythm_core.wasm'; wasmLink.as = 'fetch'; wasmLink.crossOrigin = 'anonymous'; document.head.appendChild(wasmLink); // Preload default soundfont const soundfontLink = do",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 1101,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "cument.createElement('link'); soundfontLink.rel = 'preload'; soundfontLink.href = '/soundfonts/default.sf2'; soundfontLink.as = 'fetch'; document.head.appendChild(soundfontLink); }; ` 3. Caching Strategy `typescript // Service worker for aggressive caching const CACHE_NAME = 'pianorhythm-v1'; const ",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 29
  },
  {
    "objectID": 1102,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "STATIC_ASSETS = [ '/', '/login', '/pianorhythm_core/pkg/pianorhythm_core.wasm', '/soundfonts/default.sf2' ]; self.addEventListener('install', (event) => { event.waitUntil( caches.open(CACHE_NAME) .then(cache => cache.addAll(STATIC_ASSETS)) ); }); ` Deployment Strategies 1. GitHub Pages Deployment `y",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 30
  },
  {
    "objectID": 1103,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "aml GitHub Actions workflow name: Deploy to GitHub Pages on: push: branches: [main] jobs: deploy: runs-on: ubuntu-latest steps: uses: actions/checkout@v3 name: Setup Node.js uses: actions/setup-node@v3 with: node-version: '19' name: Install dependencies run: pnpm install name: Build for production r",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 31
  },
  {
    "objectID": 1104,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "un: pnpm run build:production name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./dist ` 2. Container Deployment `dockerfile Multi-stage Docker build FROM node:19-alpine AS builder WORKDIR /app COPY package*.json ./ RUN npm ",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 32
  },
  {
    "objectID": 1105,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "ci --only=production FROM node:19-alpine AS runtime WORKDIR /app COPY --from=builder /app/node_modules ./node_modules COPY . . RUN npm run build:production EXPOSE 3000 CMD [\"npm\", \"start\"] ` 3. Edge Deployment `typescript // Edge runtime configuration export const config = { runtime: 'edge', regions",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 33
  },
  {
    "objectID": 1106,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": ": ['iad1', 'sfo1', 'fra1'] // Multiple regions for low latency }; export default async function handler(request: Request) { // Edge-optimized request handling return new Response(await renderPage(request), { headers: { 'Content-Type': 'text/html', 'Cache-Control': 'public, max-age=3600' } }); } ` De",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 34
  },
  {
    "objectID": 1107,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "bugging & Monitoring 1. Server-Side Debugging `typescript // Development server with debugging if (process.env.NODE_ENV === 'development') { console.log('🔧 Development mode enabled'); console.log('📊 Memory usage:', process.memoryUsage()); console.log('🌐 Environment variables:', { NODE_ENV: proces",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 35
  },
  {
    "objectID": 1108,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "s.env.NODE_ENV, PORT: process.env.PORT, API_URL: process.env.PIANORHYTHM_SERVER_URL }); } ` 2. Performance Monitoring `typescript // Server-side performance monitoring const monitorSSRPerformance = (req: Request) => { const startTime = Date.now(); return { end: () => { const duration = Date.now() - ",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 36
  },
  {
    "objectID": 1109,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "startTime; console.log(SSR rendered in ${duration}ms for ${req.url}); if (duration > 1000) { console.warn(Slow SSR render: ${duration}ms for ${req.url}); } } }; }; ` 3. Error Tracking `typescript // Server-side error handling process.on('unhandledRejection', (reason, promise) => { console.error('Unh",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 37
  },
  {
    "objectID": 1110,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "andled Rejection at:', promise, 'reason:', reason); // Send to error tracking service }); process.on('uncaughtException', (error) => { console.error('Uncaught Exception:', error); // Graceful shutdown process.exit(1); }); ` Next Steps [Backend Services - API endpoints and database integration Deploy",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 38
  },
  {
    "objectID": 1111,
    "title": "Server-Side Rendering (SSR) Implementation",
    "description": "",
    "content": "ment Guide - Production deployment strategies Build System - Detailed build configuration",
    "url": "/docs\\community\\technical-documentation\\backend\\ssr-implementation",
    "type": "docs",
    "tags": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration"
    ],
    "keywords": [
      "ssr",
      "server-side-rendering",
      "solidjs",
      "vinxi",
      "performance",
      "seo",
      "hydration",
      "ssr",
      "server-side rendering",
      "solidjs",
      "vinxi",
      "hydration",
      "seo",
      "performance",
      "nitro"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Server-Side Rendering (SSR) Implementation",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 39
  },
  {
    "objectID": 1112,
    "title": "Backend Services",
    "description": "",
    "content": "Backend Services PianoRhythm's backend architecture provides a robust foundation for real-time musical collaboration, featuring RESTful APIs, WebSocket communication, MongoDB integration, and OAuth authentication. Architecture Overview `mermaid graph TB subgraph \"Client Layer\" WEBWeb Client] DESK[De",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 1113,
    "title": "Backend Services",
    "description": "",
    "content": "sktop Client] end subgraph \"API Gateway\" SSR[SSR Server] API[REST API] WS[WebSocket Server] end subgraph \"Services Layer\" AUTH[Authentication] ROOMS[Room Management] USERS[User Management] SHEET[Sheet Music] AUDIT[Audit Logging] end subgraph \"Data Layer\" MONGO[(MongoDB)] ASSETS[Asset Storage] CACHE[",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 1114,
    "title": "Backend Services",
    "description": "",
    "content": "Redis Cache] end WEB --> SSR DESK --> API WEB --> WS DESK --> WS SSR --> AUTH API --> AUTH WS --> AUTH AUTH --> USERS USERS --> ROOMS ROOMS --> SHEET SHEET --> AUDIT USERS --> MONGO ROOMS --> MONGO SHEET --> MONGO AUDIT --> MONGO API --> ASSETS ROOMS --> CACHE ` Core Services 1. Authentication Servi",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 1115,
    "title": "Backend Services",
    "description": "",
    "content": "ce OAuth-based authentication with JWT token management: `typescript // Authentication middleware export class UserSessionHelper { static validateTokens(sessionData: SessionData): void { if (!sessionData.accessToken) { throw new Error(\"No access token\"); } try { const decoded = jwt.decode(sessionDat",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 1116,
    "title": "Backend Services",
    "description": "",
    "content": "a.accessToken); if (!decoded || typeof decoded === 'string') { throw new Error(\"Invalid token format\"); } const now = Math.floor(Date.now() / 1000); if (decoded.exp && decoded.exp { return { \"Authorization\": Bearer ${sessionData.accessToken}, \"X-Refresh-Token\": sessionData.refreshToken || \"\", }; } }",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 1117,
    "title": "Backend Services",
    "description": "",
    "content": " ` Authentication Flow: OAuth redirect to Discord/GitHub Server exchanges code for tokens JWT tokens stored in secure cookies Token validation on each request Automatic token refresh 2. User Management Service `typescript // User service with MongoDB integration export class UsersService { async get",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 1118,
    "title": "Backend Services",
    "description": "",
    "content": "UserByUsertag(usertag: string): Promise { const collection = Database.getInstance().getDb().collection('users'); const user = await collection.findOne({ usertag: { $regex: new RegExp(^${usertag}$, 'i') } }); return user ? this.mapToUserDto(user) : null; } async updateUserProfile(usertag: string, upd",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 1119,
    "title": "Backend Services",
    "description": "",
    "content": "ates: Partial): Promise { const collection = Database.getInstance().getDb().collection('users'); const result = await collection.updateOne( { usertag }, { $set: { ...updates, updatedAt: new Date() } } ); return result.modifiedCount > 0; } } ` 3. Room Management Service Real-time room state managemen",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 1120,
    "title": "Backend Services",
    "description": "",
    "content": "t with WebSocket integration: `typescript // Room service with real-time updates export class RoomsService { async createRoom(roomData: CreateRoomParam): Promise { const collection = Database.getInstance().getDb().collection('rooms'); const room: RoomDto = { id: generateRoomId(), name: roomData.name",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 1121,
    "title": "Backend Services",
    "description": "",
    "content": ", type: roomData.type || RoomType.Public, settings: roomData.settings || {}, createdAt: new Date(), updatedAt: new Date(), activeUsers: [], maxUsers: roomData.maxUsers || 16 }; await collection.insertOne(room); // Broadcast room creation this.broadcastRoomUpdate(room); return room; } async joinRoom(",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 1122,
    "title": "Backend Services",
    "description": "",
    "content": "roomId: string, userId: string): Promise { const room = await this.getRoomById(roomId); if (!room) { return { success: false, error: JoinRoomFailType.RoomNotFound }; } if (room.activeUsers.length >= room.maxUsers) { return { success: false, error: JoinRoomFailType.RoomFull }; } // Add user to room a",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 1123,
    "title": "Backend Services",
    "description": "",
    "content": "wait this.addUserToRoom(roomId, userId); // Broadcast user joined this.broadcastUserJoined(roomId, userId); return { success: true, room }; } } ` 4. Sheet Music Service `typescript // Sheet music management with search capabilities export class SheetMusicDBService implements IBaseDBService { async s",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 1124,
    "title": "Backend Services",
    "description": "",
    "content": "earchSheetMusic(query: SearchQuery): Promise> { const pipeline = [ { $match: { $or: [ { title: { $regex: query.text, $options: 'i' } }, { creatorUsername: { $regex: query.text, $options: 'i' } }, { tags: { $in: [new RegExp(query.text, 'i')] } } ] } }, { $facet: { data: [ { $skip: query.skip || 0 }, ",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 1125,
    "title": "Backend Services",
    "description": "",
    "content": "{ $limit: query.limit || 20 }, { $sort: { createdAt: -1 } } ], totalCount: [ { $count: \"count\" } ] } } ]; const results = await this.aggregateData(pipeline); return { data: results[0].data.map(this.mapToDto), totalCount: results[0].totalCount[0]?.count || 0 }; } } ` API Endpoints 1. RESTful API Stru",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 1126,
    "title": "Backend Services",
    "description": "",
    "content": "cture `typescript // API route structure src/routes/api/ ├── v1/ │ ├── auth/ │ │ ├── login.ts │ │ ├── logout.ts │ │ └── refresh.ts │ ├── users/ │ │ ├── profile.ts │ │ ├── settings.ts │ │ └── [id].ts │ ├── rooms/ │ │ ├── active.ts │ │ ├── create.ts │ │ └── [id]/ │ │ ├── join.ts │ │ └── leave.ts │ └──",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 1127,
    "title": "Backend Services",
    "description": "",
    "content": " sheet_music/ │ ├── search.ts │ ├── upload.ts │ └── [id]/ │ ├── favorite.ts │ └── download.ts ` 2. API Helper Functions `typescript // Standardized API response handling export const POST_API = async ( event: APIEvent, options: { schema: z.ZodSchema; process: (input: TInput) => Promise; requireAuth?",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 1128,
    "title": "Backend Services",
    "description": "",
    "content": ": boolean; } ): Promise => { try { // Validate request body const body = await event.request.json(); const input = options.schema.parse(body); // Check authentication if required if (options.requireAuth) { const session = await getSession(); UserSessionHelper.validateTokens(session.data); } // Proce",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 1129,
    "title": "Backend Services",
    "description": "",
    "content": "ss request const result = await options.process(input); return new Response(JSON.stringify(result), { status: 200, headers: { \"Content-Type\": \"application/json\" } }); } catch (error) { console.error(\"API Error:\", error); return new Response(JSON.stringify({ error: error.message || \"Internal server e",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 1130,
    "title": "Backend Services",
    "description": "",
    "content": "rror\" }), { status: error.status || 500, headers: { \"Content-Type\": \"application/json\" } }); } }; ` 3. Example API Endpoint `typescript // Sheet music search endpoint const SearchInputSchema = z.object({ query: z.string().min(1), category: z.string().optional(), difficulty: z.string().optional(), li",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 18
  },
  {
    "objectID": 1131,
    "title": "Backend Services",
    "description": "",
    "content": "mit: z.number().min(1).max(100).default(20), skip: z.number().min(0).default(0) }); export const POST = (event: APIEvent) => POST_API, SearchResult>(event, { schema: SearchInputSchema, process: async (input) => { const dbService = SheetMusicDBService.getInstance(); return await dbService.searchSheet",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 19
  },
  {
    "objectID": 1132,
    "title": "Backend Services",
    "description": "",
    "content": "Music(input); } }); ` Database Integration 1. MongoDB Connection `typescript // Database singleton with connection management export class Database { private db?: Db; private static instance: Database; private constructor() {} init(url: string = process.env.PIANORHYTHM_MONGODB_URI, database: string ",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 20
  },
  {
    "objectID": 1133,
    "title": "Backend Services",
    "description": "",
    "content": "= \"pianorhythm\") { const client = new MongoClient(url ?? mongodb://localhost:27017); this.db = client.db(database); if (process.env.DEBUG) { console.log(✅ Database connected: ${database}); } } public static getInstance(): Database { if (!Database.instance) { Database.instance = new Database(); } ret",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 21
  },
  {
    "objectID": 1134,
    "title": "Backend Services",
    "description": "",
    "content": "urn Database.instance; } getDb(): Db { if (!this.db) { throw new Error(\"Database not initialized\"); } return this.db; } } ` 2. Data Models `typescript // User data model export interface UserDbo { _id?: ObjectId; usertag: string; username: string; email: string; roles: string[]; profile: { avatar?: ",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 22
  },
  {
    "objectID": 1135,
    "title": "Backend Services",
    "description": "",
    "content": "string; bio?: string; location?: string; }; settings: { theme: string; notifications: boolean; privacy: string; }; createdAt: Date; updatedAt: Date; } // Room data model export interface RoomDbo { _id?: ObjectId; name: string; type: RoomType; settings: RoomSettings; activeUsers: string[]; maxUsers: ",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 23
  },
  {
    "objectID": 1136,
    "title": "Backend Services",
    "description": "",
    "content": "number; createdBy: string; createdAt: Date; updatedAt: Date; } ` 3. Database Services `typescript // Base database service interface export interface IBaseDBService { aggregateData(pipeline: object[]): Promise; getById(id: string): Promise; create(data: Omit): Promise; update(id: string, data: Parti",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 24
  },
  {
    "objectID": 1137,
    "title": "Backend Services",
    "description": "",
    "content": "al): Promise; delete(id: string): Promise; } // Implementation example export class UserDBService implements IBaseDBService { private collection = Database.getInstance().getDb().collection('users'); async getById(id: string): Promise { return await this.collection.findOne({ _id: new ObjectId(id) });",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 25
  },
  {
    "objectID": 1138,
    "title": "Backend Services",
    "description": "",
    "content": " } async aggregateData(pipeline: object[]): Promise { return await this.collection.aggregate(pipeline).toArray(); } } ` WebSocket Communication 1. WebSocket Server Setup `typescript // WebSocket server with crossws import { createCrossWS } from 'crossws'; const websocket = createCrossWS({ hooks: { o",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 26
  },
  {
    "objectID": 1139,
    "title": "Backend Services",
    "description": "",
    "content": "pen(peer) { console.log('WebSocket connected:', peer.id); }, message(peer, message) { try { const data = JSON.parse(message.text()); handleWebSocketMessage(peer, data); } catch (error) { console.error('Invalid WebSocket message:', error); } }, close(peer) { console.log('WebSocket disconnected:', pee",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 27
  },
  {
    "objectID": 1140,
    "title": "Backend Services",
    "description": "",
    "content": "r.id); handleUserDisconnect(peer.id); }, error(peer, error) { console.error('WebSocket error:', error); } } }); ` 2. Message Handling `typescript // WebSocket message routing const handleWebSocketMessage = async (peer: Peer, message: any) => { switch (message.type) { case 'join-room': await handleJo",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 28
  },
  {
    "objectID": 1141,
    "title": "Backend Services",
    "description": "",
    "content": "inRoom(peer, message.data); break; case 'chat-message': await handleChatMessage(peer, message.data); break; case 'midi-event': await handleMidiEvent(peer, message.data); break; case 'user-update': await handleUserUpdate(peer, message.data); break; default: console.warn('Unknown message type:', messa",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 29
  },
  {
    "objectID": 1142,
    "title": "Backend Services",
    "description": "",
    "content": "ge.type); } }; ` 3. Real-time Broadcasting `typescript // Room-based message broadcasting export class WebSocketManager { private rooms = new Map>(); private peers = new Map(); joinRoom(peerId: string, roomId: string) { if (!this.rooms.has(roomId)) { this.rooms.set(roomId, new Set()); } this.rooms.g",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 30
  },
  {
    "objectID": 1143,
    "title": "Backend Services",
    "description": "",
    "content": "et(roomId)!.add(peerId); // Broadcast user joined to room this.broadcastToRoom(roomId, { type: 'user-joined', data: { peerId, roomId } }, peerId); } broadcastToRoom(roomId: string, message: any, excludePeer?: string) { const roomPeers = this.rooms.get(roomId); if (roomPeers) { for (const peerId of r",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 31
  },
  {
    "objectID": 1144,
    "title": "Backend Services",
    "description": "",
    "content": "oomPeers) { if (peerId !== excludePeer) { const peer = this.peers.get(peerId); if (peer) { peer.send(JSON.stringify(message)); } } } } } } ` Security & Validation 1. Input Validation `typescript // Zod schemas for API validation export const CreateRoomSchema = z.object({ name: z.string().min(1).max(",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 32
  },
  {
    "objectID": 1145,
    "title": "Backend Services",
    "description": "",
    "content": "50), type: z.nativeEnum(RoomType), maxUsers: z.number().min(1).max(50).default(16), settings: z.object({ isPrivate: z.boolean().default(false), requirePassword: z.boolean().default(false), password: z.string().optional() }).default({}) }); export const ChatMessageSchema = z.object({ content: z.strin",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 33
  },
  {
    "objectID": 1146,
    "title": "Backend Services",
    "description": "",
    "content": "g().min(1).max(500), roomId: z.string().min(1), type: z.enum(['text', 'system', 'command']).default('text') }); ` 2. Rate Limiting `typescript // Rate limiting middleware const rateLimitMap = new Map(); export const rateLimit = (maxRequests: number, windowMs: number) => { return (req: Request, res: ",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 34
  },
  {
    "objectID": 1147,
    "title": "Backend Services",
    "description": "",
    "content": "Response, next: NextFunction) => { const clientId = req.ip || 'unknown'; const now = Date.now(); const clientData = rateLimitMap.get(clientId); if (!clientData || now > clientData.resetTime) { rateLimitMap.set(clientId, { count: 1, resetTime: now + windowMs }); return next(); } if (clientData.count ",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 35
  },
  {
    "objectID": 1148,
    "title": "Backend Services",
    "description": "",
    "content": ">= maxRequests) { return res.status(429).json({ error: 'Too many requests' }); } clientData.count++; next(); }; }; ` 3. CORS Configuration `typescript // CORS middleware for API security export const corsMiddleware = createMiddleware({ onBeforeResponse: [ (event) => { setResponseHeader(\"Access-Contr",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 36
  },
  {
    "objectID": 1149,
    "title": "Backend Services",
    "description": "",
    "content": "ol-Allow-Origin\", \"*\"); setResponseHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\"); setResponseHeader(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\"); setResponseHeader(\"Cross-Origin-Embedder-Policy\", \"require-corp\"); setResponseHeader(\"Cross-Origin-Opener-Po",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 37
  },
  {
    "objectID": 1150,
    "title": "Backend Services",
    "description": "",
    "content": "licy\", \"same-origin\"); } ] }); ` Error Handling & Logging 1. Centralized Error Handling `typescript // Global error handler export class ErrorHandler { static handle(error: Error, context: string): void { console.error([${context}] Error:, error); // Log to external service in production if (process",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 38
  },
  {
    "objectID": 1151,
    "title": "Backend Services",
    "description": "",
    "content": ".env.NODE_ENV === 'production') { this.logToService(error, context); } } static async logToService(error: Error, context: string): Promise { try { await fetch(process.env.ERROR_LOGGING_URL!, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ error: error.messag",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 39
  },
  {
    "objectID": 1152,
    "title": "Backend Services",
    "description": "",
    "content": "e, stack: error.stack, context, timestamp: new Date().toISOString() }) }); } catch (logError) { console.error('Failed to log error:', logError); } } } ` 2. Audit Logging `typescript // Audit logging service export class AuditLogger { static async log(action: string, userId: string, details: any): Pr",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 40
  },
  {
    "objectID": 1153,
    "title": "Backend Services",
    "description": "",
    "content": "omise { const auditLog = { action, userId, details, timestamp: new Date(), ip: this.getCurrentIP(), userAgent: this.getCurrentUserAgent() }; const collection = Database.getInstance().getDb().collection('audit_logs'); await collection.insertOne(auditLog); } } ` Performance Optimization 1. Database In",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 41
  },
  {
    "objectID": 1154,
    "title": "Backend Services",
    "description": "",
    "content": "dexing `typescript // Database indexes for performance export const createIndexes = async () => { const db = Database.getInstance().getDb(); // User indexes await db.collection('users').createIndex({ usertag: 1 }, { unique: true }); await db.collection('users').createIndex({ email: 1 }, { unique: tr",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 42
  },
  {
    "objectID": 1155,
    "title": "Backend Services",
    "description": "",
    "content": "ue }); // Room indexes await db.collection('rooms').createIndex({ name: 1 }); await db.collection('rooms').createIndex({ type: 1 }); await db.collection('rooms').createIndex({ createdAt: -1 }); // Sheet music indexes await db.collection('sheet_music').createIndex({ title: 'text', tags: 'text' }); aw",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 43
  },
  {
    "objectID": 1156,
    "title": "Backend Services",
    "description": "",
    "content": "ait db.collection('sheet_music').createIndex({ category: 1 }); await db.collection('sheet_music').createIndex({ difficulty: 1 }); }; ` 2. Caching Strategy `typescript // Redis caching for frequently accessed data export class CacheService { private static redis = new Redis(process.env.REDIS_URL); st",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 44
  },
  {
    "objectID": 1157,
    "title": "Backend Services",
    "description": "",
    "content": "atic async get(key: string): Promise { const cached = await this.redis.get(key); return cached ? JSON.parse(cached) : null; } static async set(key: string, value: any, ttl: number = 3600): Promise { await this.redis.setex(key, ttl, JSON.stringify(value)); } static async invalidate(pattern: string): ",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 45
  },
  {
    "objectID": 1158,
    "title": "Backend Services",
    "description": "",
    "content": "Promise { const keys = await this.redis.keys(pattern); if (keys.length > 0) { await this.redis.del(...keys); } } } ` Next Steps [WebSocket Communication - Real-time communication details Deployment Guide - Production deployment strategies Testing Guide - Backend testing strategies",
    "url": "/docs\\community\\technical-documentation\\backend\\backend-services",
    "type": "docs",
    "tags": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server"
    ],
    "keywords": [
      "backend",
      "api",
      "database",
      "authentication",
      "websocket",
      "mongodb",
      "server",
      "backend",
      "api",
      "rest",
      "websocket",
      "mongodb",
      "authentication",
      "oauth",
      "database",
      "server"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Backend Services",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 46
  },
  {
    "objectID": 1159,
    "title": "Development",
    "description": "",
    "content": "Welcome to the section about PianoRhythm's development! Client Build Status: build-client Documentation Build Status: build-docs",
    "url": "/docs\\community\\development\\index",
    "type": "docs",
    "tags": [],
    "keywords": [],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Development",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 1160,
    "title": "Gallery",
    "description": "",
    "content": "import Gallery from \"@site/src/components/gallery-photos/DevGalleryPhotos\"; Just a collection of images and gifs from the development process over the years.",
    "url": "/docs\\community\\development\\gallery\\index",
    "type": "docs",
    "tags": [],
    "keywords": [],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Gallery",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 1161,
    "title": "Plugins",
    "description": "",
    "content": "import styled, { css } from 'styled-components'; import BaseImage from '@site/src/components/BaseImage'; import Tooltip from '@site/src/components/Tooltip'; import BaseScreenShot from '@site/src/components/BaseScreenShot'; :::danger Plugins are currently not available. ::: Plugins Starting with vers",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 0
  },
  {
    "objectID": 1162,
    "title": "Plugins",
    "description": "",
    "content": "ion 0.8.0, the first draft of creating custom plugins were introduced. They are meant as a way for developers to add extra functionality to PianoRhythm. Each plugin is instantiated in its own iframe sandbox with access to a limited API to the client's internal PianoRhythm. As of 5/1/2023, this plugi",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 1
  },
  {
    "objectID": 1163,
    "title": "Plugins",
    "description": "",
    "content": "n architecture is still in a initial draft state so it's still experimental. :::caution Plugins are currently not synced and uploaded to your account in the cloud. They are only stored locally on the client. You can actually find the raw objects in the IndexedDB: plugin-management -> plugins. ::: Cr",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 2
  },
  {
    "objectID": 1164,
    "title": "Plugins",
    "description": "",
    "content": "eating Plugins To get started with creating your first plugin, you'll see it under the Plugins menu in the settings modal. Once you click on the Create New Plugin button, a modal will pop up with different tabs to edit code, html, and the css of the plugin. The code section displays a typescript cod",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 3
  },
  {
    "objectID": 1165,
    "title": "Plugins",
    "description": "",
    "content": "e editor while the other tabs are in similar fashion. Every plugin must have a Main class. As noted in the screenshot, in the constructor of the class is an object model that is injected. It represents an API with certain access to the PianoRhythm client. With it, you'll have certain methods like se",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 4
  },
  {
    "objectID": 1166,
    "title": "Plugins",
    "description": "",
    "content": "nding note data to the audio engine, fetching data like the current users and/or rooms, and more. For example, if you wanted to trigger a note on event, you can do: class Main { /** The core plugin app. */ #app: IPianoRhythmPluginApp; constructor(app: IPianoRhythmPluginApp) { this.#app = app; } onSt",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 5
  },
  {
    "objectID": 1167,
    "title": "Plugins",
    "description": "",
    "content": "art() { console.log(\"Plugin Started\"); //Signature: noteOn(channel: number, key: number, velocity: number): void this.#app.noteOn(0, 60, 127); } ... Any chat messages emitted by your plugin will be tagged with PLUGIN to let other users be able to differentiate you and your plugin. :::info Plugins th",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 6
  },
  {
    "objectID": 1168,
    "title": "Plugins",
    "description": "",
    "content": "at emit chat messages or notes will be disabled in public lobbies in the near feature. ::: Editor The editor is pretty basic so don't expect any fancy tooling like proper intellisense. There's a basic autocompletion for the API that is injected but that's about it. However, there are some autogenera",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 7
  },
  {
    "objectID": 1169,
    "title": "Plugins",
    "description": "",
    "content": "ted type docs for the API and associated types: IPianoRhythmPluginAPI :::caution Autocompletion The autocompletion for the API is currently tied to the variable name app. Changing the variable name will inactivate the autocompletion. ::: HTML Tab The html section allows you to create and describe th",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 8
  },
  {
    "objectID": 1170,
    "title": "Plugins",
    "description": "",
    "content": "e structure of your plugin. CSS Tab The css section allows you to describe the presentation of your plugin. Because of the nature of the iframe and css, manipulating the position and dimensions of your plugin could be tricky. I still need to research to find a better format. In the mean time, there ",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 9
  },
  {
    "objectID": 1171,
    "title": "Plugins",
    "description": "",
    "content": "are methods you can run with the api to edit the position and dimensions of your plugin: ... onStart() { console.log(\"Plugin Started\"); //signature: setContainerPosition(x: string | number, y: string | number): void { } this.#app.setContainerPosition(400, 400); //signature: setContainerDimensions(wi",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 10
  },
  {
    "objectID": 1172,
    "title": "Plugins",
    "description": "",
    "content": "dth: string | number, height: string | number): void { } this.#app.setContainerDimensions(100, 100); } ... Meta Tab As of now, plugins are only processed locally on your client. In the future, there'll be a plugin store where you can share and publish your plugin for other users to use. It'll go thr",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 11
  },
  {
    "objectID": 1173,
    "title": "Plugins",
    "description": "",
    "content": "ough a verification process and must be approved before it others can download it. The Meta tab will allow you to add more meta description about your plugin. Lifecycles There are also certain life cycle and other hooks implemented. The primary ones being onStart and onStop. Those two methods are ca",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 12
  },
  {
    "objectID": 1174,
    "title": "Plugins",
    "description": "",
    "content": "lled when the plugin is initialized and stopped, respectively. The other hooks such as onChatMessageAddedEvent are automatically called within the app. Hopefully the name of the methods are self explanatory. If not, then experiment with the code to see what happens! Compilation When you are ready to",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 13
  },
  {
    "objectID": 1175,
    "title": "Plugins",
    "description": "",
    "content": " test your plugin, just click on the compilation button. If they are no syntax issues or missing requirements, then it should succesfully compile. Then from there, you can press execute to load and run the plugin into PianoRhythm. If any runtime errors occur, then you can check the console logs in t",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 14
  },
  {
    "objectID": 1176,
    "title": "Plugins",
    "description": "",
    "content": "he browser's dev tools (ctrl + shift + i). Otherwise, you'll see a list of your plugins that were loaded succesfully: Post Load For loaded plugins, you can simply click on the UI element to trigger a menu that will allow you to edit, unload, or remove the plugin. The edit button will retrigger the m",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 15
  },
  {
    "objectID": 1177,
    "title": "Plugins",
    "description": "",
    "content": "odal for the code editors. The unload button will stop the plugin and put it into an inactive state. Once unloaded, you can reload it and it'll be put in an active state. The remove button will stop the plugin and remove it from the list. Types You can find the associated types here: IPianoRhythmPlu",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 16
  },
  {
    "objectID": 1178,
    "title": "Plugins",
    "description": "",
    "content": "ginAPI PluginTemplate",
    "url": "/docs\\advanced-guides\\plugins\\index",
    "type": "docs",
    "tags": [
      "plugins",
      "tutorial"
    ],
    "keywords": [
      "plugins",
      "tutorial"
    ],
    "hierarchy": {
      "lvl0": "Docs",
      "lvl1": "Plugins",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 100,
    "chunkIndex": 17
  },
  {
    "objectID": 1179,
    "title": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
    "description": "",
    "content": "Hey everyone! Oak here, and I'm excited to announce that I'm back to actively working on PianoRhythm after several months of hiatus. I know many of you have been wondering what's been going on, and I wanted to take a moment to update you all on where things stand and what's coming next. {/* truncate",
    "url": "/blog/blog\\2025-06-28-back-from-hiatus\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 0
  },
  {
    "objectID": 1180,
    "title": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
    "description": "",
    "content": " */} Where I've Been Life has a way of throwing curveballs, and the past several months have been no exception for me. Between work commitments, personal matters, and the need to step back and recharge, I had to take some time away from active PianoRhythm development. I know this might have been fru",
    "url": "/blog/blog\\2025-06-28-back-from-hiatus\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 1
  },
  {
    "objectID": 1181,
    "title": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
    "description": "",
    "content": "strating for some of you who were eagerly waiting for updates, and I truly appreciate your patience and continued support during this time. The PianoRhythm community has always been incredible, and knowing that you've stuck around means the world to me. What's Coming: v0.10.0 I'm thrilled to share t",
    "url": "/blog/blog\\2025-06-28-back-from-hiatus\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 2
  },
  {
    "objectID": 1182,
    "title": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
    "description": "",
    "content": "hat I'm back in full development mode, and I have some exciting news: PianoRhythm v0.10.0 is planned for release around August 2025! This upcoming version represents a significant milestone in PianoRhythm's journey. While I can't reveal all the details just yet, I can tell you that v0.10.0 will incl",
    "url": "/blog/blog\\2025-06-28-back-from-hiatus\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 3
  },
  {
    "objectID": 1183,
    "title": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
    "description": "",
    "content": "ude: (Potential) Performance improvements and bug fixes Continued refinements to the audio engine UI/UX improvements Dedicated page for the sheet music repository And more! I'll be sharing more specific details about the features and improvements as we get closer to the release date. Check Out the S",
    "url": "/blog/blog\\2025-06-28-back-from-hiatus\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 4
  },
  {
    "objectID": 1184,
    "title": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
    "description": "",
    "content": "taging Site For those of you who want to get a sneak peek at what's coming, you can check out the latest development version on our staging site at https://staging.pianorhythm.io. This is where I test new features and improvements before they make it to the main application. Keep in mind that the st",
    "url": "/blog/blog\\2025-06-28-back-from-hiatus\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 5
  },
  {
    "objectID": 1185,
    "title": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
    "description": "",
    "content": "aging site is for testing purposes, so you might encounter some bugs or incomplete features. But it's a great way to see the direction PianoRhythm is heading and provide feedback on new developments. Moving Forward I'm committed to being more consistent with development and communication moving forw",
    "url": "/blog/blog\\2025-06-28-back-from-hiatus\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 6
  },
  {
    "objectID": 1186,
    "title": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
    "description": "",
    "content": "ard. The break, while necessary, has given me renewed energy and perspective on PianoRhythm's future. I'll be posting more regular updates here on the blog and staying more active in the community. Your feedback, suggestions, and bug reports are invaluable in making PianoRhythm the best it can be. T",
    "url": "/blog/blog\\2025-06-28-back-from-hiatus\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 7
  },
  {
    "objectID": 1187,
    "title": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
    "description": "",
    "content": "hank You Before I wrap up, I want to give a huge thank you to everyone who has continued to support PianoRhythm during my absence. Whether you've been playing regularly, sharing the app with friends, or just patiently waiting for updates - you're the reason I'm motivated to keep building and improvi",
    "url": "/blog/blog\\2025-06-28-back-from-hiatus\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 8
  },
  {
    "objectID": 1188,
    "title": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
    "description": "",
    "content": "ng this platform. PianoRhythm has always been a passion project, and seeing how much it means to the community makes all the hard work worthwhile. Stay tuned for more updates as we approach the v0.10.0 release. I'm excited to share this journey with all of you! As always, you can reach me at: Email:",
    "url": "/blog/blog\\2025-06-28-back-from-hiatus\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 9
  },
  {
    "objectID": 1189,
    "title": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
    "description": "",
    "content": " oak@pianorhythm.io Discord: Feel free to ping me in the PianoRhythm Discord server Let's make some beautiful music together! 🎹 — Oak",
    "url": "/blog/blog\\2025-06-28-back-from-hiatus\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "hiatus",
      "v0.10.0",
      "comeback",
      "staging"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "I'm Back! PianoRhythm v0.10.0 Coming Soon",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 10
  },
  {
    "objectID": 1190,
    "title": "Server Upgrade",
    "description": "",
    "content": "Whew, it's been a while since I've posted here. I've been busy with life and other things, but I've finally gotten around to upgrading the server. Version 0.9.0 has now been released! I've also added a few new features to the app. Let's dive in, shall we? {/* truncate */} Server Upgrade I've been on",
    "url": "/blog/blog\\2023-12-30\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Server Upgrade",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 0
  },
  {
    "objectID": 1191,
    "title": "Server Upgrade",
    "description": "",
    "content": " quite an adventure with the development of the server. Initially, it was built using F# and the Akka.NET framework. However, as the complexity grew, I found the backend becoming a bit too challenging to maintain. Also, the server didn't seem to be as performant as I would have liked. So I hope many",
    "url": "/blog/blog\\2023-12-30\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Server Upgrade",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 1
  },
  {
    "objectID": 1192,
    "title": "Server Upgrade",
    "description": "",
    "content": " of the weird bugs that you've encountered in the past, due to the server, are now gone with this new update. So, I decided to give Rust a try. Rust, with the Actix framework, offered a fresh start and a chance to streamline the codebase. I've been diving deep into Rust lately, and I've been enjoyin",
    "url": "/blog/blog\\2023-12-30\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Server Upgrade",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 2
  },
  {
    "objectID": 1193,
    "title": "Server Upgrade",
    "description": "",
    "content": "g every minute of it. The decision to rewrite the backend in Rust was a significant one, but it's a decision I'm glad I made. However, it's not a complete rewrite. There are still certain prior features that I need to rewrite. For example, the backend for the sheet music repo service needs to be por",
    "url": "/blog/blog\\2023-12-30\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Server Upgrade",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 3
  },
  {
    "objectID": 1194,
    "title": "Server Upgrade",
    "description": "",
    "content": "ted into Rust. I hope to get that done in the following weeks. The transition to Rust has not only made the backend easier to maintain but also more efficient at processing web requests. Plus, it's opened up a whole new world of possibilities for adding new features. I'm excited about the improvemen",
    "url": "/blog/blog\\2023-12-30\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Server Upgrade",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 4
  },
  {
    "objectID": 1195,
    "title": "Server Upgrade",
    "description": "",
    "content": "ts I've made and even more excited about what's to come. Stay tuned for more updates as I continue to enhance the app with new features! New Features In the recent development cycle, I was also able to add/improve some features. Added two new stages: \"Music Studio\" and \"Arena.\" Added stage sound eff",
    "url": "/blog/blog\\2023-12-30\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Server Upgrade",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 5
  },
  {
    "objectID": 1196,
    "title": "Server Upgrade",
    "description": "",
    "content": "ects. You can now play background music while playing the piano. Rain, Wind, and Bird audio effects. Moderators are now able to add/remove badges to/from users. With that being said, I would like to add more moderators to the team. If you're interested, please send me a message or you can fill out t",
    "url": "/blog/blog\\2023-12-30\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Server Upgrade",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 6
  },
  {
    "objectID": 1197,
    "title": "Server Upgrade",
    "description": "",
    "content": "his form: Application Form. I've implemented a system to create a new lobby when a user is attempting to join a lobby that is full. Future Plans With the release of version 0.9.0, we're reaching the near end of the beta phase. If all goes well with this new server upgradeg, then I plan on releasing ",
    "url": "/blog/blog\\2023-12-30\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Server Upgrade",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 7
  },
  {
    "objectID": 1198,
    "title": "Server Upgrade",
    "description": "",
    "content": "version 1.0.0 in the coming months. The major focuses for the next few months will be: Improving the UI/UX. Add a Midi Music repository. Adding more social features. Adding more exclusive features for the PRO subscription plan. Stabilize the self-hosting process. Improving mobile support. Improving ",
    "url": "/blog/blog\\2023-12-30\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Server Upgrade",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 8
  },
  {
    "objectID": 1199,
    "title": "Server Upgrade",
    "description": "",
    "content": "localization support (Send me a message if you would like to contribute. You'll get a translator badge as recognizition for your efforts). Add more DAW like features. Bring back and improve Avatars.",
    "url": "/blog/blog\\2023-12-30\\index",
    "type": "blog",
    "tags": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "keywords": [
      "oak",
      "pianorhythm",
      "server upgrade"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Server Upgrade",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 9
  },
  {
    "objectID": 1200,
    "title": "Welcome",
    "description": "",
    "content": "Welcome to PianoRhythm's first blog post! Yes, it is I, Oak! I am the creator and main developer of PianoRhythm. If you're looking to create a blog post pertaining to PianoRhythm, piano, or just anything music related, then feel free to contact me! Email: oak@pianorhythm.io Discord: Oak#9806 You can",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 0
  },
  {
    "objectID": 1201,
    "title": "Welcome",
    "description": "",
    "content": " find the PianoRhythm app's url here. {/* truncate */} Why did I create PianoRhythm in the first place? Well, like many of you, I was an avid user of MPP and loved it. At the time, I just got into learning the piano and actual programming. I thought MPP had so much potential and the lack of updates ",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 1
  },
  {
    "objectID": 1202,
    "title": "Welcome",
    "description": "",
    "content": "kind of pushed me into envisioning my own thing. PianoRhythm is just a passion product. I didn't create it for the profit or for the masses. It's something I've been putting my own time and money cause I just really enjoy creating and didn't mind sharing the platform with other people. I'm not tryin",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 2
  },
  {
    "objectID": 1203,
    "title": "Welcome",
    "description": "",
    "content": "g to compete with MPP. I wanted to PianoRhythm to be its own thing with a unique world. I'm still striving for that. So far, I've been the sole developer with some help from BopIt on the Discord stuff in the backend. I can only do so much as a working professional. What happened to v2? So v2 was cre",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 3
  },
  {
    "objectID": 1204,
    "title": "Welcome",
    "description": "",
    "content": "ated back in 2016 when I just started learning programming in college. I definitely used MPP as the basis for the idea but used that as an opportunity to try different things. v2 was generally stable because it was simpler and less demanding. And that's because I was initially following MPP's footst",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 4
  },
  {
    "objectID": 1205,
    "title": "Welcome",
    "description": "",
    "content": "eps. But for those OG members who may remember, that I did have a 3D mode in v2. However, what was the common complaint? That it was too laggy for lower performing machines. So, I scrapped that idea in the mean time to focus. But, I really really preferred the aesthetics of 3D. The way I justify it ",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 5
  },
  {
    "objectID": 1206,
    "title": "Welcome",
    "description": "",
    "content": "is that if you really want 2d, then you have MPP for that. May not be ideal but there's nothing stopping you from using both (free) services. I wanted PR to be different. What's the point of creating a clone of MPP with just a different skin? The features that were in v2 were ideas I just wanted to ",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 6
  },
  {
    "objectID": 1207,
    "title": "Welcome",
    "description": "",
    "content": "play around with that I thought people would use. So, like being able to record, have multiple instruments, have a personal representation with avatars (blobs), and other stuff. I also wanted to make PR more game like because I've always been interested in making games as well. v2 was always in earl",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 7
  },
  {
    "objectID": 1208,
    "title": "Welcome",
    "description": "",
    "content": "y alpha state since there was a lot of active development. But the ideas that I had in mind were still limited by certain technological limits that I'll talk about later. Anyhoo, I was in college back then and my time was limited. Since I was still learning of heck of a lot of stuff about developmen",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 8
  },
  {
    "objectID": 1209,
    "title": "Welcome",
    "description": "",
    "content": "t, there was a lot of sphaghetti code and probably bad practices. Add also that here were plenty of hiatuses that occurred and over time, things became unmaintable. Once I got an internship at my current workplace, I learned a lot of new stuff and decided to create the project from scratch with my n",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 9
  },
  {
    "objectID": 1210,
    "title": "Welcome",
    "description": "",
    "content": "ew knowledge. Thus came v3. The eventual plan was to get v3 to decent enough state with similar features to v2 and have it replace it. Before I officially replaced v2, I did have message that would show in v2's lobby about me working on v3 so hopefully it wasn't that much of a surprise. And that was",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 10
  },
  {
    "objectID": 1211,
    "title": "Welcome",
    "description": "",
    "content": " there for at least a few months. What's up with v3? v3 has an interesting history because I've probably rewritten it from scratch like a dozen times. But before I get to some of the history, I'll first answer a few common things people have said: Why is V3 like forced 3D? It's so laggy! Like I ment",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 11
  },
  {
    "objectID": 1212,
    "title": "Welcome",
    "description": "",
    "content": "ioned above, that is the direction I've wanted to take and I knew it was going to outcast some users. It's impossible to please everyone so I'm not trying to. I'm still learning so I will keep trying to optimizing the app as best as I can but there's only so much old hardware can deal with. My machi",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 12
  },
  {
    "objectID": 1213,
    "title": "Welcome",
    "description": "",
    "content": "ne is not a beast (GTX 1080 GPU and i7 CPU) but it runs perfectly smooth so far. Unfortunately, it's not like I have a bunch of old laptops sitting around where I can do performance tests. Keep in mind that v3 is in open beta and in active development. This where you guys come in and provide feedbac",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 13
  },
  {
    "objectID": 1214,
    "title": "Welcome",
    "description": "",
    "content": "k so I can best try and deal with these issues. In general, v3 has a totally different tech stack from v2. Why? Cause I want to learn and try different things. If you've created any software, you would know how rapid frameworks, libraries, and other tech can get. Honestly, I would've like to use a p",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 14
  },
  {
    "objectID": 1215,
    "title": "Welcome",
    "description": "",
    "content": "roper 3D game engine to make PianoRhythm but for now, web developing is relatively easier and has better cross platform compatibility. I'm primarily limited to web technology. The desktop app (and no, it's actually not using Electron but actually using a product called Tauri (https://tauri.app/) tha",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 15
  },
  {
    "objectID": 1216,
    "title": "Welcome",
    "description": "",
    "content": "t renders using the machine's native webview), was an attempt to at least provide more stability and a better desktop app experience. What's up v3's audio engine? It's terrible. Hmm, that's primarily subjective in my opinion. So, I'll cite some sources and the reasoning behind certain things with th",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 16
  },
  {
    "objectID": 1217,
    "title": "Welcome",
    "description": "",
    "content": "e audio engine. I knew people were going to probably bash v3's audio since they were most likely used to v2's audio. A lot of people don't like change. Sure, there's probably a distinctive difference in audio fidelity but I imagine if you never used v2 in the first place and came to v3, then you wou",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 17
  },
  {
    "objectID": 1218,
    "title": "Welcome",
    "description": "",
    "content": "ld've probably had a different view. Luckily, if you don't like v3's audio, you can always use the midi output to play audio on your preferred synthesizer of choice. And once again, this is in active development where there's always room for improvement. If you're a developer that can build a better",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 18
  },
  {
    "objectID": 1219,
    "title": "Welcome",
    "description": "",
    "content": " audio engine, then please let me know. I'm just one person working on the front and back end. First, I wanted PR to be able to use multiple instruments and thus allowing other users to hear such instruments to have a band/orchestra like experience. MPO (multiplayer orchestra) pretty much tackled th",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 19
  },
  {
    "objectID": 1220,
    "title": "Welcome",
    "description": "",
    "content": "at. v2's audio engine was using an existing tech that converted audio samples to a base64 encoded javascript object and allowed to process those encoded samples through WebAudio (https://github.com/gleitz/midi-js-soundfonts). So an example would like look: MIDI.Soundfont.high_quality_acoustic_grand_",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 20
  },
  {
    "objectID": 1221,
    "title": "Welcome",
    "description": "",
    "content": "piano = { \"A0\": \"data:audio/ogg;base64,SUQzAwAAAAAAOlRYWFgAAAAW...\" } Was it the best choice back then? Who knows? I was still learning and it was relatively easy to use. However, these objects were per instrument and took a bit of computer memory. So, each instrument had to manually be loaded into ",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 21
  },
  {
    "objectID": 1222,
    "title": "Welcome",
    "description": "",
    "content": "the browser to be able to be played. Okay so what's the issue? Well, if I was going to provide a feature to allow using different instruments, most people would expect to able to hear other users' instruments. That would be fine and dandy if it was just a few instruments but these audio js objects w",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 22
  },
  {
    "objectID": 1223,
    "title": "Welcome",
    "description": "",
    "content": "ere converted from .sf2 soundfonts. These are files that are sample based audio files that can contain multiple instruments and sound effects. These have been standardized and a GM (General Midi) usually contain at least 100+ instruments. I recall that I experimented trying to load every single Java",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 23
  },
  {
    "objectID": 1224,
    "title": "Welcome",
    "description": "",
    "content": "Script audio object and quickly ran into memory limitation issues (like 2GB used for the audio) with Chrome. Often times, the browsers limits what an active site can do. So from a design aspect, I couldn't really justify users kind of forcing other users to load these audio objects with how much it ",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 24
  },
  {
    "objectID": 1225,
    "title": "Welcome",
    "description": "",
    "content": "cost. I had to think of an alternative and that's where using soundfont files (.sf2) came to mind. Theoretically, the tech behind them seem to be effecient and really what I was looking for. A 10mb soundfont file could potentially have all the GM instruments loaded without costing a lot in RAM. Also",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 25
  },
  {
    "objectID": 1226,
    "title": "Welcome",
    "description": "",
    "content": ", there would be added benefit of people using their own custom soundfonts if they didn't like the default ones that PR might have. Win/Win, right? At the time of v2, I don't recall of any stable libraries that supported loading sf2 files. I'm no audio engineer so I definitely was going to try and b",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 26
  },
  {
    "objectID": 1227,
    "title": "Welcome",
    "description": "",
    "content": "uild one from scratch since it was way out of my scope. But, I didn't give up. That's why with v3, I did so many rewrites trying a lot of different things. Developing is hard. I'm not a genius. Just an average programmer that's trying his best. Once better technology came about, I finally decided to",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 27
  },
  {
    "objectID": 1228,
    "title": "Welcome",
    "description": "",
    "content": " go the Web WASM route and found a SF2 parsing library written in Rust called OxiSynth (https://github.com/PolyMeilex/OxiSynth). This was also an opportunity to learn a new programming language (developers like shiny new stuff). So far, I like this library. Since I didn't write it from scratch, I do",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 28
  },
  {
    "objectID": 1229,
    "title": "Welcome",
    "description": "",
    "content": "n't know the ins and outs, yet. There's a lot of low level audio programming that I have to get familiar with and that will take time. Now if users have the same soundfont, you can load any instrument and have it heard by anyone without any additional cost. Users also now have an option to use highe",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 29
  },
  {
    "objectID": 1230,
    "title": "Welcome",
    "description": "",
    "content": "r quality soundfonts without any major real drawback (their machine is the only limitation, I suppose). I still have to figure out how to allow users to hear a custom soundfont that someone else loaded (I do not want to force someone to have to download a 2gb soundfont for example). And speaking of ",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 30
  },
  {
    "objectID": 1231,
    "title": "Welcome",
    "description": "",
    "content": "size, choosing a default soundfont was a compromise. Sure, I could have a high quality one as the default but the default but that would incur a large download. So, I initially settled on a standard GM soundfont that was around 50-60mb that sounded decent (at least to me). However, it was recently p",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 31
  },
  {
    "objectID": 1232,
    "title": "Welcome",
    "description": "",
    "content": "ushed to like 100ish since people really wanted the old v2 default piano (which is about 50+ mb decoded in audio samples). So, I learned to created soundfonts and replaced the first piano in the default with v2's. I recently added a first draft of an equalizer for those who want to try and fine tune",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 32
  },
  {
    "objectID": 1233,
    "title": "Welcome",
    "description": "",
    "content": " the audio. The point is that I'm trying my best but I can't please everyone. So, if you have supported me thus far, I really appreciate it. There's been plenty of times where I've wanted to quit and just completely abandon the project. As a creator, open criticism is expected and I can deal with. B",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 33
  },
  {
    "objectID": 1234,
    "title": "Welcome",
    "description": "",
    "content": "ut I can definitely do without people who are just extremely negative with nothing to offer.",
    "url": "/blog/blog\\2023-05-02-welcome\\index",
    "type": "blog",
    "tags": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "keywords": [
      "welcome",
      "oak",
      "pianorhythm",
      "history",
      "v2",
      "v2 history",
      "v3"
    ],
    "hierarchy": {
      "lvl0": "Blog",
      "lvl1": "Welcome",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 90,
    "chunkIndex": 34
  },
  {
    "objectID": 1235,
    "title": "Untitled",
    "description": "",
    "content": "0.9.9 :rocket: New Features VirtualPiano Sheet Music Player (PRFP-463) Added a basic virtual piano sheet music player! Find out more here: VirtualPiano Sheet Music Player {/* truncate */} Guests Can View Sheet Music Repo Guest can now view the sheet music repository. They can't upload sheet music, b",
    "url": "/changelog/changelog\\source\\2024-05-07-0.9.9",
    "type": "changelog",
    "tags": [
      "0.9.9",
      "changelog"
    ],
    "keywords": [
      "0.9.9",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1236,
    "title": "Untitled",
    "description": "",
    "content": "ut they can view the list of sheet music available. You can find it at Tools -> Open Sheet Music Repo or the Sheet Music button on the bottom bar. (PRFP-1146) Added more general analytics/stats about the app. You can find it on the bottom bar as Leaderboards. (PRFP-1221) Added icons to represent the",
    "url": "/changelog/changelog\\source\\2024-05-07-0.9.9",
    "type": "changelog",
    "tags": [
      "0.9.9",
      "changelog"
    ],
    "keywords": [
      "0.9.9",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 1
  },
  {
    "objectID": 1237,
    "title": "Untitled",
    "description": "",
    "content": " main sources of midi input by users: PC Keyboard, Midi Piano, and Mouse. (PRFP-1219) Added a cookie consent form. You can find it at the bottom of the page. This is to comply with the EU's GDPR regulations. (PRFP-1068) Added a search bar in many of the settings. Now it should be easier to find what",
    "url": "/changelog/changelog\\source\\2024-05-07-0.9.9",
    "type": "changelog",
    "tags": [
      "0.9.9",
      "changelog"
    ],
    "keywords": [
      "0.9.9",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 2
  },
  {
    "objectID": 1238,
    "title": "Untitled",
    "description": "",
    "content": " you're looking for. (PRFP-1223) Added support for an extended layout for VP. You can find it at Settings -> Input -> MIDI to VP/QWERTY Layout. (PRFP-1097) Added keyboard mapping overlays for 3D and 2D. You can toggle by pressing F6 or going to the action widgets on the right and pressing Show Input",
    "url": "/changelog/changelog\\source\\2024-05-07-0.9.9",
    "type": "changelog",
    "tags": [
      "0.9.9",
      "changelog"
    ],
    "keywords": [
      "0.9.9",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 3
  },
  {
    "objectID": 1239,
    "title": "Untitled",
    "description": "",
    "content": " Mapping. (PRFP-1192) Added a button to export logs for the desktop app. You can find it at Settings -> Application -> Export Logs. :smile: Enhancements (PRFP-936) Reduced latency between keyboard input and sound output. The audio processing will use the main thread by default. The drawback is that ",
    "url": "/changelog/changelog\\source\\2024-05-07-0.9.9",
    "type": "changelog",
    "tags": [
      "0.9.9",
      "changelog"
    ],
    "keywords": [
      "0.9.9",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 4
  },
  {
    "objectID": 1240,
    "title": "Untitled",
    "description": "",
    "content": "it's more susceptible to instability spikes (may hear more static if there's too much load). You can toggle this in the settings by going to Settings -> Soundfont -> Use AudioWorklet for audio processing. (PRFP-1202) The client has gone through a major refactor. This should help with performance and",
    "url": "/changelog/changelog\\source\\2024-05-07-0.9.9",
    "type": "changelog",
    "tags": [
      "0.9.9",
      "changelog"
    ],
    "keywords": [
      "0.9.9",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 5
  },
  {
    "objectID": 1241,
    "title": "Untitled",
    "description": "",
    "content": " stability. (PRFP-1184) Added a Copy button to the sheet music viewer. (PRFP-1207) Added a progress bar when downloading soundfonts. (PRFP-1208) Added a setting to toggle the audio equalizer. (PRFP-1213) Added a new soundfount: SGM-v2.01-NicePianosGuitarsBass-V1.2 (PRFP-1217) Added a graphics settin",
    "url": "/changelog/changelog\\source\\2024-05-07-0.9.9",
    "type": "changelog",
    "tags": [
      "0.9.9",
      "changelog"
    ],
    "keywords": [
      "0.9.9",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 6
  },
  {
    "objectID": 1242,
    "title": "Untitled",
    "description": "",
    "content": "g for soft shadows. :bug: Bug Fixes (PRFP-1209) Fixed issue with the 2D piano sometimes getting clipped on the edge of the window. (PRFP-1203) Fixed an issue with server banning. (PRFP-1161) Fixed the padding/spacing in the user profile \"About\" section text. (PRFP-741) Fixed an issue with youtube li",
    "url": "/changelog/changelog\\source\\2024-05-07-0.9.9",
    "type": "changelog",
    "tags": [
      "0.9.9",
      "changelog"
    ],
    "keywords": [
      "0.9.9",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 7
  },
  {
    "objectID": 1243,
    "title": "Untitled",
    "description": "",
    "content": "nks with parameters not getting parsed correctly. (PRFP-1204) Fixed emails not being saved properly for new registrations. (PRFP-1215) Fixed an issue with urls not being parsed correctly in chat due to server censorship.",
    "url": "/changelog/changelog\\source\\2024-05-07-0.9.9",
    "type": "changelog",
    "tags": [
      "0.9.9",
      "changelog"
    ],
    "keywords": [
      "0.9.9",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 8
  },
  {
    "objectID": 1244,
    "title": "Untitled",
    "description": "",
    "content": "0.9.0 You can find out more about this update here in the blog: Server Upgrade {/* truncate */} Versions Notes: If you're encountering any issues when creating a new room, try clicking the \"Reset\" button in the room creation settings. (Credit: @sun queen#61facd) Version: 0.9.8 (2024-01-10) :rocket: ",
    "url": "/changelog/changelog\\source\\2023-12-31-0.9.0",
    "type": "changelog",
    "tags": [
      "0.9.0",
      "changelog"
    ],
    "keywords": [
      "0.9.0",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1245,
    "title": "Untitled",
    "description": "",
    "content": "New Features (PRFP-1197) Added two new lobbies: Forest and Studio! Forest Stage (PRFP-1198) Added volume slider for stage audio effects. :smile: Enhancements (PRFP-1196) Upgrade Tauri (Desktop client) to v1.5.4 :bug: Bug Fixes (PRFP-1199) Fixed a potential issue with Discord login causing a failure ",
    "url": "/changelog/changelog\\source\\2023-12-31-0.9.0",
    "type": "changelog",
    "tags": [
      "0.9.0",
      "changelog"
    ],
    "keywords": [
      "0.9.0",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 1
  },
  {
    "objectID": 1246,
    "title": "Untitled",
    "description": "",
    "content": "to load on desktop. Version: 0.9.7 (2024-01-07) :bug: Bug Fixes (PRFP-1193) Fixed issue with chat history deletion in normal rooms. (PRFP-1195) Fixed issue with clearing profile description not working. (PRFP-1191) Fixed issue with new Discord users not automatically registering a new account. (PRFP",
    "url": "/changelog/changelog\\source\\2023-12-31-0.9.0",
    "type": "changelog",
    "tags": [
      "0.9.0",
      "changelog"
    ],
    "keywords": [
      "0.9.0",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 2
  },
  {
    "objectID": 1247,
    "title": "Untitled",
    "description": "",
    "content": "-1190) Fixed issue with input for edit_badges command. (PRFP-1194) Fixed /clear_chat command for mods. :smile: Enhancements (PRFP-1186) All active instruments are shown in the mini user profile. Version: 0.9.6 (2024-01-07) Note: You have may have to fully clear your cookies and relogin, if you're ha",
    "url": "/changelog/changelog\\source\\2023-12-31-0.9.0",
    "type": "changelog",
    "tags": [
      "0.9.0",
      "changelog"
    ],
    "keywords": [
      "0.9.0",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 3
  },
  {
    "objectID": 1248,
    "title": "Untitled",
    "description": "",
    "content": "ving issues logging in with this update. :bug: Bug Fixes (PRFP-1188) Fixed certain commands not using the full username. :smile: Enhancements (PRFP-1187) Added a new role: Trial Moderator. Version: 0.9.5 (2024-01-06) :bug: Bug Fixes (PRFP-1182) Sheet music repo service should be back up now. Note: Y",
    "url": "/changelog/changelog\\source\\2023-12-31-0.9.0",
    "type": "changelog",
    "tags": [
      "0.9.0",
      "changelog"
    ],
    "keywords": [
      "0.9.0",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 4
  },
  {
    "objectID": 1249,
    "title": "Untitled",
    "description": "",
    "content": "ou have may have to clear your cookies and relogin again if you get an error trying to access it. (PRFP-1183) (Server) Lobby chat messages should now persist after deployments. Version: 0.9.3 (2024-01-02) Minor bug fixes for the front and backend. Version: 0.9.1 (PRFP-1179) Sound fx not working on i",
    "url": "/changelog/changelog\\source\\2023-12-31-0.9.0",
    "type": "changelog",
    "tags": [
      "0.9.0",
      "changelog"
    ],
    "keywords": [
      "0.9.0",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 5
  },
  {
    "objectID": 1250,
    "title": "Untitled",
    "description": "",
    "content": "nitial load. (PRFP-1177) Users can't join password protected rooms.",
    "url": "/changelog/changelog\\source\\2023-12-31-0.9.0",
    "type": "changelog",
    "tags": [
      "0.9.0",
      "changelog"
    ],
    "keywords": [
      "0.9.0",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 6
  },
  {
    "objectID": 1251,
    "title": "Untitled",
    "description": "",
    "content": "0.8.46 :rocket: New Features Added Self Hosting Rooms! (PRFP-1149) Added the ability to host your own rooms! Find out more here: Self Hosting Rooms {/* truncate */} :smile: Enhancements (PRFP-1158) Room creation settings are now saved locally so you don't have to keep redoing the inputs when creatin",
    "url": "/changelog/changelog\\source\\2023-09-29-0.8.46",
    "type": "changelog",
    "tags": [
      "0.8.46",
      "changelog"
    ],
    "keywords": [
      "0.8.46",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1252,
    "title": "Untitled",
    "description": "",
    "content": "g a room. So this means that when you reload the page and you were the room owner, then it'll be created with the same settings (including password). (note: the room password is also saved as plain text in the object in the local storage so I don't recommend using a password you using for other acco",
    "url": "/changelog/changelog\\source\\2023-09-29-0.8.46",
    "type": "changelog",
    "tags": [
      "0.8.46",
      "changelog"
    ],
    "keywords": [
      "0.8.46",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 1
  },
  {
    "objectID": 1253,
    "title": "Untitled",
    "description": "",
    "content": "unts) (PRFP-1166) Gave good ol' @Near#80366e the V2 OG MEMBER badge that he's been waiting for, since forever. :) (PRFP-1155) Added a lobby just for PRO subscribers. To help with server bandwidth, if you're by yourself in a room, then no midi data will be emitted to the server (why didn't I think of",
    "url": "/changelog/changelog\\source\\2023-09-29-0.8.46",
    "type": "changelog",
    "tags": [
      "0.8.46",
      "changelog"
    ],
    "keywords": [
      "0.8.46",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 2
  },
  {
    "objectID": 1254,
    "title": "Untitled",
    "description": "",
    "content": " this before?). Therefore, regardless of the room settings, note quota will not be a factor. :bug: Bug Fixes (PRFP-1169) Fixed issue with logging in by email. (PRFP-1159) Fixed an issue with Orchestra mode rooms (such as the lobby) not showing other player pianos. (PRFP-1157) Fixed a UI issues where",
    "url": "/changelog/changelog\\source\\2023-09-29-0.8.46",
    "type": "changelog",
    "tags": [
      "0.8.46",
      "changelog"
    ],
    "keywords": [
      "0.8.46",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 3
  },
  {
    "objectID": 1255,
    "title": "Untitled",
    "description": "",
    "content": " the lock icon was not immediately shown when muting a user. (PRFP-1160) Fixed user meta details (on the mini profile when you hover over a user) not immediately showing. (PRFP-1167) Fixed an issue where the app would get \"stuck\" when trying to enter a room with password in a new session. An \"enter ",
    "url": "/changelog/changelog\\source\\2023-09-29-0.8.46",
    "type": "changelog",
    "tags": [
      "0.8.46",
      "changelog"
    ],
    "keywords": [
      "0.8.46",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 4
  },
  {
    "objectID": 1256,
    "title": "Untitled",
    "description": "",
    "content": "room password\" modal should now show up.",
    "url": "/changelog/changelog\\source\\2023-09-29-0.8.46",
    "type": "changelog",
    "tags": [
      "0.8.46",
      "changelog"
    ],
    "keywords": [
      "0.8.46",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 5
  },
  {
    "objectID": 1257,
    "title": "Untitled",
    "description": "",
    "content": "0.8.45 No real enhancements mades to the client. Really just some minor things to accomodate some backend changes.",
    "url": "/changelog/changelog\\source\\2023-09-23-0.8.45",
    "type": "changelog",
    "tags": [
      "0.8.45",
      "changelog"
    ],
    "keywords": [
      "0.8.45",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1258,
    "title": "Untitled",
    "description": "",
    "content": "0.8.44 :smile: Enhancements Refactored the back end server by updating some dependencies and configurations. Should (hopefully) be less laggy now. :bug: Bug Fixes (PRFP-1117) For PC keyboard players, fixed issue with shift not keeping held notes. (PRFP-1132) Fixed issue with account verification pag",
    "url": "/changelog/changelog\\source\\2023-09-20-0.8.44",
    "type": "changelog",
    "tags": [
      "0.8.44",
      "changelog"
    ],
    "keywords": [
      "0.8.44",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1259,
    "title": "Untitled",
    "description": "",
    "content": "e not being found. (PRFP-1130) Fixed issue with the wrong username showing when a new user joins chat. :soon: Coming soon (PRFP-1137) Fix whisper function. (PRFP-1125) Add Midi Repo. (PRFP-1115) Add \"Achievements.\" (PRFP-1139) Add the ability to record playing to midi tracks. (PRFP-1138) Add the abi",
    "url": "/changelog/changelog\\source\\2023-09-20-0.8.44",
    "type": "changelog",
    "tags": [
      "0.8.44",
      "changelog"
    ],
    "keywords": [
      "0.8.44",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 1
  },
  {
    "objectID": 1260,
    "title": "Untitled",
    "description": "",
    "content": "lity to \"loop/auto-replay\" midi tracks",
    "url": "/changelog/changelog\\source\\2023-09-20-0.8.44",
    "type": "changelog",
    "tags": [
      "0.8.44",
      "changelog"
    ],
    "keywords": [
      "0.8.44",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 2
  },
  {
    "objectID": 1261,
    "title": "Untitled",
    "description": "",
    "content": "0.8.43 :smile: Enhancements (PRFP-1116) Discord Bot should show current players online in its status. Added more general stats (total notes & chat messages sent). You can see them in the leaderboards. Note: These are new metrics that wasn't previously being tracked, so everyone is starting from 0. A",
    "url": "/changelog/changelog\\source\\2023-09-12-0.8.43",
    "type": "changelog",
    "tags": [
      "0.8.43",
      "changelog"
    ],
    "keywords": [
      "0.8.43",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1262,
    "title": "Untitled",
    "description": "",
    "content": "lso, these particular metrics are only updated after you logout. So, they're not real time. :bug: Bug Fixes Fixed an issue with users not being able to sign in with Discord.",
    "url": "/changelog/changelog\\source\\2023-09-12-0.8.43",
    "type": "changelog",
    "tags": [
      "0.8.43",
      "changelog"
    ],
    "keywords": [
      "0.8.43",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 1
  },
  {
    "objectID": 1263,
    "title": "Untitled",
    "description": "",
    "content": "0.8.42 :smile: Enhancements (PRFP-1111) Show user mini profile when hovering over usernames in the leaderboard. (PRFP-1109) View your favorites list in the sheet music repo. (PRFP-1108) Added the ability to unbind single keybinds from the custom keyboard layout mapping.",
    "url": "/changelog/changelog\\source\\2023-09-11-0.8.42",
    "type": "changelog",
    "tags": [
      "0.8.42",
      "changelog"
    ],
    "keywords": [
      "0.8.42",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1264,
    "title": "Untitled",
    "description": "",
    "content": "0.8.41 :smile: Enhancements (PRFP-1106) Added system status reports to client. PianoRhythm now has a StatusPage. You'll be able to find out the current state of the server. (PRFP-515) You can now \"favorite\" sheet music in the repository. With that said, a leaderboard of the most favorited sheet musi",
    "url": "/changelog/changelog\\source\\2023-09-10-0.8.41",
    "type": "changelog",
    "tags": [
      "0.8.41",
      "changelog"
    ],
    "keywords": [
      "0.8.41",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1265,
    "title": "Untitled",
    "description": "",
    "content": "c has also been added. :bug: Bug Fixes (PRFP-1090) Fixed issue midi sequencer not starting in web version due to suspended audio context. Fixed Orchestra Mode not showing up in the room modes when creating a new room.",
    "url": "/changelog/changelog\\source\\2023-09-10-0.8.41",
    "type": "changelog",
    "tags": [
      "0.8.41",
      "changelog"
    ],
    "keywords": [
      "0.8.41",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 1
  },
  {
    "objectID": 1266,
    "title": "Untitled",
    "description": "",
    "content": "0.8.40 :rocket: New Features Added Rusty Synth (PRFP-1101) You can now change between different audio synthesizers. The default one has been called OxiSynth and it's not perfect when it comes to how it handles certain soundfonts. RustySynth seems to do it better. However, there are certain features ",
    "url": "/changelog/changelog\\source\\2023-09-09-0.8.40",
    "type": "changelog",
    "tags": [
      "0.8.40",
      "changelog"
    ],
    "keywords": [
      "0.8.40",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1267,
    "title": "Untitled",
    "description": "",
    "content": "(such as setting the max polyphony) that I haven't implemented within it, yet. To change the synthesizer, you can go to Settings -> Soundfont -> Audio Synthesizer. {/* truncate */} Added Leaderboards (PRFP-1105) Added leaderboards about general stats. More boards will be added over time. You can fin",
    "url": "/changelog/changelog\\source\\2023-09-09-0.8.40",
    "type": "changelog",
    "tags": [
      "0.8.40",
      "changelog"
    ],
    "keywords": [
      "0.8.40",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 1
  },
  {
    "objectID": 1268,
    "title": "Untitled",
    "description": "",
    "content": "d it on the bottom bar as Leaderboards. :smile: Enhancements (PRFP-913) Emails will not be parsed (as mailto:*) in chat. (PRFP-1102) Increased min/max supported transpose to -20/20, respectively. Updated the 3D graphics engine Babylon.js to version 6.20.1. Some backend server refactoring.",
    "url": "/changelog/changelog\\source\\2023-09-09-0.8.40",
    "type": "changelog",
    "tags": [
      "0.8.40",
      "changelog"
    ],
    "keywords": [
      "0.8.40",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 2
  },
  {
    "objectID": 1269,
    "title": "Untitled",
    "description": "",
    "content": "0.8.39 :rocket: New Features Added 2D Mode (PRFP-1082) After much contemplation, I've decided to add support back for a 2D renderer of the piano. You can toggle between 2D/3D (without having to restart) by clicking on the button that says Camera Mode in the button groups at the top right. Note: Cert",
    "url": "/changelog/changelog\\source\\2023-09-05-0.8.39",
    "type": "changelog",
    "tags": [
      "0.8.39",
      "changelog"
    ],
    "keywords": [
      "0.8.39",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1270,
    "title": "Untitled",
    "description": "",
    "content": "ain features such as the Midi Player are not available in 2d mode, until further notice. {/* truncate */} :smile: Enhancements (PRFP-1094) Added room option for enabling/disabling bots in the room. Backend server refactoring. :bug: Bug Fixes (PRFP-1099) Fixed issue with feedback loop with midi i/o. ",
    "url": "/changelog/changelog\\source\\2023-09-05-0.8.39",
    "type": "changelog",
    "tags": [
      "0.8.39",
      "changelog"
    ],
    "keywords": [
      "0.8.39",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 1
  },
  {
    "objectID": 1271,
    "title": "Untitled",
    "description": "",
    "content": "(PRFP-1098) Fixed volume icons not updating the user volume slider. Minor bug fixes.",
    "url": "/changelog/changelog\\source\\2023-09-05-0.8.39",
    "type": "changelog",
    "tags": [
      "0.8.39",
      "changelog"
    ],
    "keywords": [
      "0.8.39",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 2
  },
  {
    "objectID": 1272,
    "title": "Untitled",
    "description": "",
    "content": "0.8.30 :rocket: New Features Version: 0.8.37 Added a help chat bot! (PRFP-1089) The first draft of the PianoRhythm Help Bot is now here. This was just a fun little thing to work on. You can ask it general questions about PianoRhythm. It's primary source is from the documentation site but you can als",
    "url": "/changelog/changelog\\source\\2023-07-17-0.8.30",
    "type": "changelog",
    "tags": [
      "0.8.30",
      "changelog"
    ],
    "keywords": [
      "0.8.30",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1273,
    "title": "Untitled",
    "description": "",
    "content": "o ask it some questions about the real time state of the server, such as how many players are online or the total number of registered users. To interact with it, just type in @helpbot (insert question here) in the chat bar. :::note You must at least be a registered member to use the help bot. So cr",
    "url": "/changelog/changelog\\source\\2023-07-17-0.8.30",
    "type": "changelog",
    "tags": [
      "0.8.30",
      "changelog"
    ],
    "keywords": [
      "0.8.30",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 1
  },
  {
    "objectID": 1274,
    "title": "Untitled",
    "description": "",
    "content": "eate an account, today! ::: {/* truncate */} Version: 0.8.34 Added build pipelines for MacOS and Linux (PRFP-1079) Added desktop builds for MacOS and Linux. Will need extensive testing. Added customizable keyboard layout (PRFP-1080) For those keyboard warriors out there, you can now individually map",
    "url": "/changelog/changelog\\source\\2023-07-17-0.8.30",
    "type": "changelog",
    "tags": [
      "0.8.30",
      "changelog"
    ],
    "keywords": [
      "0.8.30",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 2
  },
  {
    "objectID": 1275,
    "title": "Untitled",
    "description": "",
    "content": " each key on your keyboard to a corresponding note on the piano. You can find this at: Settings -> Input -> (Piano Keys Layout) Custom. Once selected, click on the Customize Layout Keys button. Version: 0.8.33 Midi Step Sequencer (PRFP-502) Added a midi/drum step sequencer. Find out more here: Midi ",
    "url": "/changelog/changelog\\source\\2023-07-17-0.8.30",
    "type": "changelog",
    "tags": [
      "0.8.30",
      "changelog"
    ],
    "keywords": [
      "0.8.30",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 3
  },
  {
    "objectID": 1276,
    "title": "Untitled",
    "description": "",
    "content": "Step Sequencer Version: 0.8.30 Orchestra Mode! (PRFP-1026) Added the first draft of orchestra mode. Find out more here: Orchestra Mode Piano Customization! (PRFP-1073) Find out more here: Piano Customization Channel Parameter Sliders (PRFP-1070) Added functionality to individually set the volume and",
    "url": "/changelog/changelog\\source\\2023-07-17-0.8.30",
    "type": "changelog",
    "tags": [
      "0.8.30",
      "changelog"
    ],
    "keywords": [
      "0.8.30",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 4
  },
  {
    "objectID": 1277,
    "title": "Untitled",
    "description": "",
    "content": " pan values for channels. Find out more here: Channel Parameters Increased Max Players Limit (PRFP-1072) Increased max players to 20 for normal rooms and 30 for lobbies. Added setting to set max channels for Multi Mode (PRFP-1074) You can now set the max number of channels to use during multi mode. ",
    "url": "/changelog/changelog\\source\\2023-07-17-0.8.30",
    "type": "changelog",
    "tags": [
      "0.8.30",
      "changelog"
    ],
    "keywords": [
      "0.8.30",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 5
  },
  {
    "objectID": 1278,
    "title": "Untitled",
    "description": "",
    "content": "You can find this setting by going to: Settings -> Midi -> Max Multi Mode Channels :smile: Enhancements Version: 0.8.34 (PRFP-1084) Increase default room size room to 20 in UI. (PRFP-1081) Add functionality for canvas to use main thread when offscreen canvas is not supported. You can also manually t",
    "url": "/changelog/changelog\\source\\2023-07-17-0.8.30",
    "type": "changelog",
    "tags": [
      "0.8.30",
      "changelog"
    ],
    "keywords": [
      "0.8.30",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 6
  },
  {
    "objectID": 1279,
    "title": "Untitled",
    "description": "",
    "content": "oggle this in the settings by going to: Settings -> Graphics -> Enable Offscreen Canvas Version: 0.8.30 (PRFP-1071) Volume button in the bottom bar is now highlighted when the global volume is muted or zero. (PRFP-1066) Added the user slot mode to the meta details in the mini profile card. :bug: Bug",
    "url": "/changelog/changelog\\source\\2023-07-17-0.8.30",
    "type": "changelog",
    "tags": [
      "0.8.30",
      "changelog"
    ],
    "keywords": [
      "0.8.30",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 7
  },
  {
    "objectID": 1280,
    "title": "Untitled",
    "description": "",
    "content": " Fixes Version: 0.8.38 Simply fixed an issue with the desktop builds not loading properly. Version: 0.8.35 (PRFP-1075) Fixed: Audio engine doesn't work when logging out and relogging back in, without refreshing page Version: 0.8.34 (PRFP-1083) Fixed an issue where notes from other users were not bei",
    "url": "/changelog/changelog\\source\\2023-07-17-0.8.30",
    "type": "changelog",
    "tags": [
      "0.8.30",
      "changelog"
    ],
    "keywords": [
      "0.8.30",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 8
  },
  {
    "objectID": 1281,
    "title": "Untitled",
    "description": "",
    "content": "ng emitted to midi outputs. (PRFP-1085) Fixed issue with MIDI player notes showing up behind the keys and going through the piano model. Version: 0.8.32 (PRFP-1076) PRFP-1076 Can't see other player notes playing on keys? (PRFP-1077) Instruments list not updating when switching soundfonts. (PRFP-1078",
    "url": "/changelog/changelog\\source\\2023-07-17-0.8.30",
    "type": "changelog",
    "tags": [
      "0.8.30",
      "changelog"
    ],
    "keywords": [
      "0.8.30",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 9
  },
  {
    "objectID": 1282,
    "title": "Untitled",
    "description": "",
    "content": ") Keys with no sound not being represented properly. Version: 0.8.30 (PRFP-1069) Fixed an issue where turning on stage effects would remove the room's password. General Notes Version: 0.8.30 Avatars (and the piano bench) have been disabled temporarily while I rework a more optimal system. Figured ou",
    "url": "/changelog/changelog\\source\\2023-07-17-0.8.30",
    "type": "changelog",
    "tags": [
      "0.8.30",
      "changelog"
    ],
    "keywords": [
      "0.8.30",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 10
  },
  {
    "objectID": 1283,
    "title": "Untitled",
    "description": "",
    "content": "t how to use stereo audio (it was apparently mono before) for the web version. (PRFP-1075) There is a known issue about the audio engine not working when relogging in. Working on it!",
    "url": "/changelog/changelog\\source\\2023-07-17-0.8.30",
    "type": "changelog",
    "tags": [
      "0.8.30",
      "changelog"
    ],
    "keywords": [
      "0.8.30",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 11
  },
  {
    "objectID": 1284,
    "title": "Untitled",
    "description": "",
    "content": "0.8.26 :bug: Bug Fixes (PRFP-1067) Fixed an issue with crashes when playing certain midi notes/events. (PRFP-1065) Fixed the pageloader screen showing indefinitely. General Notes You may have noticed that there hasn't been a lot of updates lately. I've just been taking a general break from v3 and pr",
    "url": "/changelog/changelog\\source\\2023-06-17-0.8.26",
    "type": "changelog",
    "tags": [
      "0.8.26",
      "changelog"
    ],
    "keywords": [
      "0.8.26",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1285,
    "title": "Untitled",
    "description": "",
    "content": "ogramming. But I've been slowly getting back into the groove of things. Thank you guys for all the support you've given so far. ❤ Some things I'm currently going to or have been working on: Ensuring that the reverb effect works across all soundfonts. Volume scaling sliders for mixing instrument chan",
    "url": "/changelog/changelog\\source\\2023-06-17-0.8.26",
    "type": "changelog",
    "tags": [
      "0.8.26",
      "changelog"
    ],
    "keywords": [
      "0.8.26",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 1
  },
  {
    "objectID": 1286,
    "title": "Untitled",
    "description": "",
    "content": "nels in MultiChannel mode. Add a feature to loop/auto replay midi tracks. Add some basic drum loops for when you're in 'Play Drums' mode. Implementing a Orchestra like room/mode. You'll be able to customize your piano and also see everyone else's. Increase max users count in rooms by double. Improve",
    "url": "/changelog/changelog\\source\\2023-06-17-0.8.26",
    "type": "changelog",
    "tags": [
      "0.8.26",
      "changelog"
    ],
    "keywords": [
      "0.8.26",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 2
  },
  {
    "objectID": 1287,
    "title": "Untitled",
    "description": "",
    "content": " logging and to better deal with crashes that lead to audio/sound issues.",
    "url": "/changelog/changelog\\source\\2023-06-17-0.8.26",
    "type": "changelog",
    "tags": [
      "0.8.26",
      "changelog"
    ],
    "keywords": [
      "0.8.26",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 3
  },
  {
    "objectID": 1288,
    "title": "Untitled",
    "description": "",
    "content": "0.8.24 :ok_hand: Changes (PRFP-1062) Created a Telegram group! Join here: https://t.me/+hUJtV_QXVnU1NTIx (PRFP-1059) Added \"Arco Strings\" soundfont to default list. (PRFP-1063) Updated the default reverb settings. (PRFP-1020) Added a reset functionality for soundfont settings. :bug: Bug Fixes (PRFP-",
    "url": "/changelog/changelog\\source\\2023-05-27-0.8.24",
    "type": "changelog",
    "tags": [
      "0.8.24",
      "changelog"
    ],
    "keywords": [
      "0.8.24",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1289,
    "title": "Untitled",
    "description": "",
    "content": "1061) Fixed a note-off issue for instruments in multi-channel mode. (PRFP-1060) Fixed an issue with users being able to add instruments to disabled channels.",
    "url": "/changelog/changelog\\source\\2023-05-27-0.8.24",
    "type": "changelog",
    "tags": [
      "0.8.24",
      "changelog"
    ],
    "keywords": [
      "0.8.24",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 1
  },
  {
    "objectID": 1290,
    "title": "Untitled",
    "description": "",
    "content": "0.8.0 :rocket: New Features Added plugins! (PRFP-629) Added the first draft of a plugin system to allow users to build local plugins to extend PianoRhythm. Find out more here: Plugins Guide {/* truncate */} Added Changelog Modal (PRFP-1022) A modal of the latest changes will now show up after a new ",
    "url": "/changelog/changelog\\source\\2023-05-04-0.8.0",
    "type": "changelog",
    "tags": [
      "0.8.0",
      "changelog"
    ],
    "keywords": [
      "0.8.0",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1291,
    "title": "Untitled",
    "description": "",
    "content": "version update. Added User Velocity Percentage Slider (PRFP-1045) Added a global slider alongside individual sliders for controlling the total percentage value of other users' velocity inputs. You can find the global setting in Settings -> Midi and find individual sliders by clicking on user profile",
    "url": "/changelog/changelog\\source\\2023-05-04-0.8.0",
    "type": "changelog",
    "tags": [
      "0.8.0",
      "changelog"
    ],
    "keywords": [
      "0.8.0",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 1
  },
  {
    "objectID": 1292,
    "title": "Untitled",
    "description": "",
    "content": "s in the sidebar. :ok_hand: Changes Updated Desktop App (Tauri -> v1.3.0) If you would like to know the technical details, you can check out their blog post: Tauri 1.3.0 Updated Graphics Engine (Bablyon.js -> v6.0) (PRFP-1024) Find out more here Babylon.js v6.0 (PRFP-1035) (Development) Updated Vite",
    "url": "/changelog/changelog\\source\\2023-05-04-0.8.0",
    "type": "changelog",
    "tags": [
      "0.8.0",
      "changelog"
    ],
    "keywords": [
      "0.8.0",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 2
  },
  {
    "objectID": 1293,
    "title": "Untitled",
    "description": "",
    "content": " to 4. (PRFP-1033) (Development) Added some more much needed unit tests. (PRFP-1033) (Development) Added some much needed E2E (Cypress) tests. (PRFP-1055) Added an option to experiment with WebGPU rendering. (PRFP-1043) Added a visual indication when a user has a different soundfont loaded than you ",
    "url": "/changelog/changelog\\source\\2023-05-04-0.8.0",
    "type": "changelog",
    "tags": [
      "0.8.0",
      "changelog"
    ],
    "keywords": [
      "0.8.0",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 3
  },
  {
    "objectID": 1294,
    "title": "Untitled",
    "description": "",
    "content": "do. (Development) Minor internal refactors. :bug: Bug Fixes (PRFP-1021) Fixed an issue with other players not being able to hear your drums. (PRFP-1029) Fixed a glitch with the room owner's crown display. (PRFP-1034) Fixed issue with executing unit tests. (PRFP-1030) Fixed issue with the reverb moda",
    "url": "/changelog/changelog\\source\\2023-05-04-0.8.0",
    "type": "changelog",
    "tags": [
      "0.8.0",
      "changelog"
    ],
    "keywords": [
      "0.8.0",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 4
  },
  {
    "objectID": 1295,
    "title": "Untitled",
    "description": "",
    "content": "l and other related modals, due to the UI sliders (noUiSlider) being broken. (PRFP-1032) Fixed glitch with the New Messages button sometimes showing up inappropriately. (PRFP-1036) Fixed an issue with trying to display the latest changelog from the docs page. (PRFP-1039) Fixed multi channel slot mod",
    "url": "/changelog/changelog\\source\\2023-05-04-0.8.0",
    "type": "changelog",
    "tags": [
      "0.8.0",
      "changelog"
    ],
    "keywords": [
      "0.8.0",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 5
  },
  {
    "objectID": 1296,
    "title": "Untitled",
    "description": "",
    "content": "e not emitting properly in the desktop app. Minor internal bug fixes.",
    "url": "/changelog/changelog\\source\\2023-05-04-0.8.0",
    "type": "changelog",
    "tags": [
      "0.8.0",
      "changelog"
    ],
    "keywords": [
      "0.8.0",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 6
  },
  {
    "objectID": 1297,
    "title": "Untitled",
    "description": "",
    "content": "0.7.230 :rocket: New Features Added sound effects (PRFP-137) Implemented the first draft of having sound effects with UI Elements! You can find more settings at Settings -> Audio Effects",
    "url": "/changelog/changelog\\source\\2023-03-18-0.7.230",
    "type": "changelog",
    "tags": [
      "0.7.230",
      "changelog"
    ],
    "keywords": [
      "0.7.230",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1298,
    "title": "Untitled",
    "description": "",
    "content": "0.7.222 :rocket: New Features Added initial draft of World PianoRhythm World is a feature that I've always wanted to implement. It's an environment where you can create your own avatars and engage in a 3D world with others while playing music. Added support for displaying images in chat (PRFP-956) F",
    "url": "/changelog/changelog\\source\\2023-03-13-0.7.222",
    "type": "changelog",
    "tags": [
      "0.7.222",
      "changelog"
    ],
    "keywords": [
      "0.7.222",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1299,
    "title": "Untitled",
    "description": "",
    "content": "or certain links that contain images, there'll be a preview displayed in chat Added Reporting (PRFP-225) Still in the initial stages but you can now report certain chat messages and users for inappropriate content/behaviours. You can right click a chat message or user to see the context of being abl",
    "url": "/changelog/changelog\\source\\2023-03-13-0.7.222",
    "type": "changelog",
    "tags": [
      "0.7.222",
      "changelog"
    ],
    "keywords": [
      "0.7.222",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 1
  },
  {
    "objectID": 1300,
    "title": "Untitled",
    "description": "",
    "content": "e to report.",
    "url": "/changelog/changelog\\source\\2023-03-13-0.7.222",
    "type": "changelog",
    "tags": [
      "0.7.222",
      "changelog"
    ],
    "keywords": [
      "0.7.222",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 2
  },
  {
    "objectID": 1301,
    "title": "Untitled",
    "description": "",
    "content": "0.7.152 :rocket: New Features Added Audio Equalizer (PRFP-918) Added an audio equalizer to allow for better fine tuning of the audio output. You can find it Tools -> Audio Equalizer",
    "url": "/changelog/changelog\\source\\2023-01-09-0.7.152",
    "type": "changelog",
    "tags": [
      "0.7.152",
      "changelog"
    ],
    "keywords": [
      "0.7.152",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1302,
    "title": "Untitled",
    "description": "",
    "content": "0.7.146 :rocket: New Features Added V2 Piano Soundfont (PRFP-900) I did my best to convert the default piano from v2 into a soundfont. For now, I set it as the default soundfont. You can go to Settings -> Soundfont -> Load Default Soundfont. In the list, there's the PR_V2_SF.sf2 which is just the pi",
    "url": "/changelog/changelog\\source\\2022-12-26-0.7.146",
    "type": "changelog",
    "tags": [
      "0.7.146",
      "changelog"
    ],
    "keywords": [
      "0.7.146",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1303,
    "title": "Untitled",
    "description": "",
    "content": "ano itself and PR_GM2.sf2 which has the v2 piano mixed with the previous GM2_Map sf.",
    "url": "/changelog/changelog\\source\\2022-12-26-0.7.146",
    "type": "changelog",
    "tags": [
      "0.7.146",
      "changelog"
    ],
    "keywords": [
      "0.7.146",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 1
  },
  {
    "objectID": 1304,
    "title": "Untitled",
    "description": "",
    "content": "0.7.143 :rocket: New Features Improved Soundfont Support If you previously had certain custom soundfonts that would not load, try loading them again. I updated to code to be a bit more friendlier. There are still going to be some exceptions.",
    "url": "/changelog/changelog\\source\\2022-12-26-0.7.143",
    "type": "changelog",
    "tags": [
      "0.7.143",
      "changelog"
    ],
    "keywords": [
      "0.7.143",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1305,
    "title": "Untitled",
    "description": "",
    "content": "0.7.123 :rocket: New Features Sheet Music Repo (PRFP-851) Added a repository for uploading sheet music! To check it out, click on Tools -> Open Sheet Music Repo. This feature is not available for guests, so sign up and create an account today!",
    "url": "/changelog/changelog\\source\\2022-12-20-0.7.123",
    "type": "changelog",
    "tags": [
      "0.7.123",
      "changelog"
    ],
    "keywords": [
      "0.7.123",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1306,
    "title": "Untitled",
    "description": "",
    "content": "0.7.119 :rocket: New Features Graphics Optimization Optimized the default scene so some you guys should experience a decent boost to frame rate. Also add more graphical settings that you can mess with to see what improves your framerate. You can check it out at Settings > General (Graphics).",
    "url": "/changelog/changelog\\source\\2022-12-18-0.7.119",
    "type": "changelog",
    "tags": [
      "0.7.119",
      "changelog"
    ],
    "keywords": [
      "0.7.119",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1307,
    "title": "Untitled",
    "description": "",
    "content": "0.7.91 :rocket: New Features UI Themes Added themes! This is just the first draft of this feature so there are certain color issues on some themes. They'll be eventually fixed in the coming updates. To change a theme, go to Settings -> (Graphics) UI -> Theme Reverb Settings (PRFP-988) Added customiz",
    "url": "/changelog/changelog\\source\\2022-12-07-0.7.91",
    "type": "changelog",
    "tags": [
      "0.7.91",
      "changelog"
    ],
    "keywords": [
      "0.7.91",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 0
  },
  {
    "objectID": 1308,
    "title": "Untitled",
    "description": "",
    "content": "able reverb settings. To adjust them, go to Settings -> Soundfont -> Advanced New stage models! You can try the new stages by going to New Room -> Room Stage. Ear Training Games These exercises will improve your musical ability by developing a more intuitive understanding of what you hear. Two exerc",
    "url": "/changelog/changelog\\source\\2022-12-07-0.7.91",
    "type": "changelog",
    "tags": [
      "0.7.91",
      "changelog"
    ],
    "keywords": [
      "0.7.91",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 1
  },
  {
    "objectID": 1309,
    "title": "Untitled",
    "description": "",
    "content": "ises were added: Perfect Pitch and Scales. To try them out, go to New Room -> Room Mode -> SoloGame. Midi Player Added a built-in midi player that renders like Synthesia's waterfall notes. You can test it out by dragging a midi file in the main window or by going to Instrument Dock -> Tools -> Open ",
    "url": "/changelog/changelog\\source\\2022-12-07-0.7.91",
    "type": "changelog",
    "tags": [
      "0.7.91",
      "changelog"
    ],
    "keywords": [
      "0.7.91",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 2
  },
  {
    "objectID": 1310,
    "title": "Untitled",
    "description": "",
    "content": "Midi File. :bug: Bug Fixes (PRFP-807) Fixed issue with Touhou soundfont only emitting sound to one speaker from the lower notes.",
    "url": "/changelog/changelog\\source\\2022-12-07-0.7.91",
    "type": "changelog",
    "tags": [
      "0.7.91",
      "changelog"
    ],
    "keywords": [
      "0.7.91",
      "changelog"
    ],
    "hierarchy": {
      "lvl0": "Changelog",
      "lvl1": "Untitled",
      "lvl2": null,
      "lvl3": null,
      "lvl4": null,
      "lvl5": null
    },
    "weight": 80,
    "chunkIndex": 3
  }
]